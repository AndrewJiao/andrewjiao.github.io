<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/04/01/elasticsearch/ElasticSearch%E6%9B%BE-%E5%88%A0-%E6%94%B9/"/>
    <url>/2025/04/01/elasticsearch/ElasticSearch%E6%9B%BE-%E5%88%A0-%E6%94%B9/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch搜索引擎（基础-部署）</title>
    <link href="/2022/08/16/elasticsearch/ElasticSearch%E5%9F%BA%E7%A1%80%E5%92%8C%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/08/16/elasticsearch/ElasticSearch%E5%9F%BA%E7%A1%80%E5%92%8C%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><ul><li>近实时的搜索引擎</li><li>应用场景包括电商搜索、日志分析、指标分析、地理搜索等等</li></ul><h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h2><ul><li>Elasticsearch 专用的可视化工具</li><li>支持丰富的可视化图表和即时的交互体验</li></ul><h2 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h2><ul><li><p>集群 Cluster</p><ul><li>由一个或多个节点组成，对外提供服务</li></ul></li><li><p>节点 Node</p><ul><li>一个 Elasticsearch 的运行实例(JVM 实例)</li></ul></li><li><p>索引 Index </p><ul><li>由具有相同字段的文档（document）列表组成</li></ul></li><li><p>分片 Shard</p><ul><li>一个 Index 被切成 N 份存储在集群的多个 Node 上，每一份被称为一个分片</li><li>有 primary 和 replica 两种类型</li><li>ES 的最小管理单元</li></ul></li><li><p>文档 Document</p><ul><li>用户存储在 es 中的数据文档</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;remote_ip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;93.180.71.3&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;user_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;@timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2015-05-17T08:05:32.000Z&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;request_action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;GET&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/downloads/product_1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;http_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;response&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;304&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;bytes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;referrer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;agent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Debian APT-HTTP/1.3 (0.8.16~exp12ubuntu10.21)&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>如何使用？借助kibana</p><h2 id="软件包"><a href="#软件包" class="headerlink" title="软件包"></a>软件包</h2><p>通过<a href="https://www.elastic.co/">elastic官网地址</a>获取软件安装包。</p><p>参考文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.13/install-elasticsearch.html">https://www.elastic.co/guide/en/elasticsearch/reference/8.13/install-elasticsearch.html</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>以windows为例子，只需要解压zip即可。进入目录即可使用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> C:\elasticsearch-8.13.4<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">.\bin\elasticsearch.bat<br></code></pre></td></tr></table></figure><p>elasticsearch支持https协议传输，会动态生成如下命令</p><img src="http://andrewblogs.oss-cn-heyuan.aliyuncs.com/elastic/%E5%88%9D%E6%AC%A1%E5%90%AF%E5%8A%A8ealsticsearch.png"/><ul><li>自动为用户生成密码</li><li>生成HTTPS的指纹信息（elasticsearch通过https协议提供服务）</li><li>生成elasticsearch的base64签名，提供给kibana使用</li></ul><blockquote><p>kibana安装不过多说，和elasticsearch类似。</p></blockquote><h2 id="elastic目录结构"><a href="#elastic目录结构" class="headerlink" title="elastic目录结构"></a>elastic目录结构</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">elastic<br><span class="hljs-comment">--bin（elastic二进制启动文件）</span><br><span class="hljs-comment">--config（elastic配置文件）</span><br><span class="hljs-comment">--data（elastic索引存储目录）</span><br><span class="hljs-comment">--jdk</span><br><span class="hljs-comment">--lib</span><br><span class="hljs-comment">--log</span><br></code></pre></td></tr></table></figure><h2 id="集群启动"><a href="#集群启动" class="headerlink" title="集群启动"></a>集群启动</h2><p>集群中的不同节点需要占用不同的port端口，因此在启动新的节点前，需要手动指定一些配置信息。</p><p>以下是一些核心配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 集群名称，同一集群下的节点的这个配置要一致</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">cluster</span><br><span class="hljs-comment"># 节点名称</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-master</span><br><span class="hljs-comment"># 节点角色</span><br><span class="hljs-attr">node.roles:</span> [<span class="hljs-string">master</span>]<br><span class="hljs-comment"># 索引存储目录</span><br><span class="hljs-attr">path.data:</span> <span class="hljs-string">/data</span><br><span class="hljs-comment"># 初始节点，控制集群提供服务的最小节点</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-master&quot;</span>]<br><span class="hljs-comment"># 集群对外访问，本地访问可改成localhost</span><br><span class="hljs-attr">http.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-comment"># 其它节点地址</span><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;127.0.0.1:9201&quot;</span>,<span class="hljs-string">&quot;127.0.0.1:9202&quot;</span>]<br></code></pre></td></tr></table></figure><p>一些kibana配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># elasticsearch地址</span><br><span class="hljs-attr">elasticsearch.hosts:</span> [<span class="hljs-string">&#x27;https://127.0.0.1:9200&#x27;</span>]<br><span class="hljs-attr">elasticsearch.username:</span> <span class="hljs-string">kibana_system</span><br><span class="hljs-comment">#elasticsearch.serviceAccountToken: AAEAAWVsYXN0aWMva2liYW5hL2Vucm9sbC1wcm9jZXNzLXRva2VuLTE3Mzk5MzI0MjE3NTI6ZjdhV0FNbUVUWDIxMFZsUmtfR0U3UQ</span><br><span class="hljs-attr">elasticsearch.ssl.certificateAuthorities:</span> [<span class="hljs-string">&#x27;x:\xxx\xxx\elasticSearch\elasticsearch-8.13.4\config\certs\http_ca.crt&#x27;</span>]<br><br></code></pre></td></tr></table></figure><p>一些常用命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">bin\elasticsearch-create-enrollment-token -s node //在master节点上为从节点生成token信息<br>bin\elasticsearch --enrollment-token &lt;enrollment-token&gt; 通过token启动并连接主节点<br>bin\elasticsearch-setup-passwrod //生成新的密码<br>更多命令可在bin目录下查看<br></code></pre></td></tr></table></figure><h2 id="基于docker启动"><a href="#基于docker启动" class="headerlink" title="基于docker启动"></a>基于docker启动</h2><p>主要通过docker容器编排来负责启动elastic镜像和kibana;以下是一个基本的基于三节点的docker容器。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">version: <span class="hljs-string">&quot;2.2&quot;</span><br><br>services:<br>  setup:<br>    image: docker.elastic.co/elasticsearch/elasticsearch:$&#123;STACK_VERSION&#125;<br>    volumes:<br>      - certs:/usr/share/elasticsearch/config/certs<br>    <span class="hljs-keyword">user</span>: <span class="hljs-string">&quot;0&quot;</span><br>    command: &gt;<br>      bash -c <span class="hljs-string">&#x27;</span><br><span class="hljs-string">        if [ x$&#123;ELASTIC_PASSWORD&#125; == x ]; then</span><br><span class="hljs-string">          echo &quot;Set the ELASTIC_PASSWORD environment variable in the .env file&quot;;</span><br><span class="hljs-string">          exit 1;</span><br><span class="hljs-string">        elif [ x$&#123;KIBANA_PASSWORD&#125; == x ]; then</span><br><span class="hljs-string">          echo &quot;Set the KIBANA_PASSWORD environment variable in the .env file&quot;;</span><br><span class="hljs-string">          exit 1;</span><br><span class="hljs-string">        fi;</span><br><span class="hljs-string">        if [ ! -f config/certs/ca.zip ]; then</span><br><span class="hljs-string">          echo &quot;Creating CA&quot;;</span><br><span class="hljs-string">          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;</span><br><span class="hljs-string">          unzip config/certs/ca.zip -d config/certs;</span><br><span class="hljs-string">        fi;</span><br><span class="hljs-string">        if [ ! -f config/certs/certs.zip ]; then</span><br><span class="hljs-string">          echo &quot;Creating certs&quot;;</span><br><span class="hljs-string">          echo -ne \</span><br><span class="hljs-string">          &quot;instances:\n&quot;\</span><br><span class="hljs-string">          &quot;  - name: es01\n&quot;\</span><br><span class="hljs-string">          &quot;    dns:\n&quot;\</span><br><span class="hljs-string">          &quot;      - es01\n&quot;\</span><br><span class="hljs-string">          &quot;      - localhost\n&quot;\</span><br><span class="hljs-string">          &quot;    ip:\n&quot;\</span><br><span class="hljs-string">          &quot;      - 127.0.0.1\n&quot;\</span><br><span class="hljs-string">          &quot;  - name: es02\n&quot;\</span><br><span class="hljs-string">          &quot;    dns:\n&quot;\</span><br><span class="hljs-string">          &quot;      - es02\n&quot;\</span><br><span class="hljs-string">          &quot;      - localhost\n&quot;\</span><br><span class="hljs-string">          &quot;    ip:\n&quot;\</span><br><span class="hljs-string">          &quot;      - 127.0.0.1\n&quot;\</span><br><span class="hljs-string">          &quot;  - name: es03\n&quot;\</span><br><span class="hljs-string">          &quot;    dns:\n&quot;\</span><br><span class="hljs-string">          &quot;      - es03\n&quot;\</span><br><span class="hljs-string">          &quot;      - localhost\n&quot;\</span><br><span class="hljs-string">          &quot;    ip:\n&quot;\</span><br><span class="hljs-string">          &quot;      - 127.0.0.1\n&quot;\</span><br><span class="hljs-string">          &gt; config/certs/instances.yml;</span><br><span class="hljs-string">          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;</span><br><span class="hljs-string">          unzip config/certs/certs.zip -d config/certs;</span><br><span class="hljs-string">        fi;</span><br><span class="hljs-string">        echo &quot;Setting file permissions&quot;</span><br><span class="hljs-string">        chown -R root:root config/certs;</span><br><span class="hljs-string">        find . -type d -exec chmod 750 \&#123;\&#125; \;;</span><br><span class="hljs-string">        find . -type f -exec chmod 640 \&#123;\&#125; \;;</span><br><span class="hljs-string">        echo &quot;Waiting for Elasticsearch availability&quot;;</span><br><span class="hljs-string">        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q &quot;missing authentication credentials&quot;; do sleep 30; done;</span><br><span class="hljs-string">        echo &quot;Setting kibana_system password&quot;;</span><br><span class="hljs-string">        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:$&#123;ELASTIC_PASSWORD&#125; -H &quot;Content-Type: application/json&quot; https://es01:9200/_security/user/kibana_system/_password -d &quot;&#123;\&quot;password\&quot;:\&quot;$&#123;KIBANA_PASSWORD&#125;\&quot;&#125;&quot; | grep -q &quot;^&#123;&#125;&quot;; do sleep 10; done;</span><br><span class="hljs-string">        echo &quot;All done!&quot;;</span><br><span class="hljs-string">      &#x27;</span><br>    <span class="hljs-keyword">healthcheck</span><span class="language-bash">:</span><br>      test: [<span class="hljs-string">&quot;CMD-SHELL&quot;</span>, <span class="hljs-string">&quot;[ -f config/certs/es01/es01.crt ]&quot;</span>]<br>      interval: <span class="hljs-number">1</span>s<br>      timeout: <span class="hljs-number">5</span>s<br>      retries: <span class="hljs-number">120</span><br><br>  es01:<br>    depends_on:<br>      setup:<br>        condition: service_healthy<br>    image: docker.elastic.co/elasticsearch/elasticsearch:$&#123;STACK_VERSION&#125;<br>    volumes:<br>      - certs:/usr/share/elasticsearch/config/certs<br>      - esdata01:/usr/share/elasticsearch/data<br>    ports:<br>      - $&#123;ES_PORT&#125;:<span class="hljs-number">9200</span><br>    environment:<br>      - node.name=es01<br>      - cluster.name=$&#123;CLUSTER_NAME&#125;<br>      - cluster.initial_master_nodes=es01,es02,es03<br>      - discovery.seed_hosts=es02,es03<br>      - ELASTIC_PASSWORD=$&#123;ELASTIC_PASSWORD&#125;<br>      - bootstrap.memory_lock=true<br>      - xpack.security.enabled=true<br>      - xpack.security.http.ssl.enabled=true<br>      - xpack.security.http.ssl.key=certs/es01/es01.key<br>      - xpack.security.http.ssl.certificate=certs/es01/es01.crt<br>      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt<br>      - xpack.security.http.ssl.verification_mode=certificate<br>      - xpack.security.transport.ssl.enabled=true<br>      - xpack.security.transport.ssl.key=certs/es01/es01.key<br>      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt<br>      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt<br>      - xpack.security.transport.ssl.verification_mode=certificate<br>      - xpack.license.self_generated.type=$&#123;LICENSE&#125;<br>    mem_limit: $&#123;MEM_LIMIT&#125;<br>    ulimits:<br>      memlock:<br>        soft: -<span class="hljs-number">1</span><br>        hard: -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">healthcheck</span><span class="language-bash">:</span><br>      test:<br>        [<br>          <span class="hljs-string">&quot;CMD-SHELL&quot;</span>,<br>          <span class="hljs-string">&quot;curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q &#x27;missing authentication credentials&#x27;&quot;</span>,<br>        ]<br>      interval: <span class="hljs-number">10</span>s<br>      timeout: <span class="hljs-number">10</span>s<br>      retries: <span class="hljs-number">120</span><br><br>  es02:<br>    depends_on:<br>      - es01<br>    image: docker.elastic.co/elasticsearch/elasticsearch:$&#123;STACK_VERSION&#125;<br>    volumes:<br>      - certs:/usr/share/elasticsearch/config/certs<br>      - esdata02:/usr/share/elasticsearch/data<br>    environment:<br>      - node.name=es02<br>      - cluster.name=$&#123;CLUSTER_NAME&#125;<br>      - cluster.initial_master_nodes=es01,es02,es03<br>      - discovery.seed_hosts=es01,es03<br>      - bootstrap.memory_lock=true<br>      - xpack.security.enabled=true<br>      - xpack.security.http.ssl.enabled=true<br>      - xpack.security.http.ssl.key=certs/es02/es02.key<br>      - xpack.security.http.ssl.certificate=certs/es02/es02.crt<br>      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt<br>      - xpack.security.http.ssl.verification_mode=certificate<br>      - xpack.security.transport.ssl.enabled=true<br>      - xpack.security.transport.ssl.key=certs/es02/es02.key<br>      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt<br>      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt<br>      - xpack.security.transport.ssl.verification_mode=certificate<br>      - xpack.license.self_generated.type=$&#123;LICENSE&#125;<br>    mem_limit: $&#123;MEM_LIMIT&#125;<br>    ulimits:<br>      memlock:<br>        soft: -<span class="hljs-number">1</span><br>        hard: -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">healthcheck</span><span class="language-bash">:</span><br>      test:<br>        [<br>          <span class="hljs-string">&quot;CMD-SHELL&quot;</span>,<br>          <span class="hljs-string">&quot;curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q &#x27;missing authentication credentials&#x27;&quot;</span>,<br>        ]<br>      interval: <span class="hljs-number">10</span>s<br>      timeout: <span class="hljs-number">10</span>s<br>      retries: <span class="hljs-number">120</span><br><br>  es03:<br>    depends_on:<br>      - es02<br>    image: docker.elastic.co/elasticsearch/elasticsearch:$&#123;STACK_VERSION&#125;<br>    volumes:<br>      - certs:/usr/share/elasticsearch/config/certs<br>      - esdata03:/usr/share/elasticsearch/data<br>    environment:<br>      - node.name=es03<br>      - cluster.name=$&#123;CLUSTER_NAME&#125;<br>      - cluster.initial_master_nodes=es01,es02,es03<br>      - discovery.seed_hosts=es01,es02<br>      - bootstrap.memory_lock=true<br>      - xpack.security.enabled=true<br>      - xpack.security.http.ssl.enabled=true<br>      - xpack.security.http.ssl.key=certs/es03/es03.key<br>      - xpack.security.http.ssl.certificate=certs/es03/es03.crt<br>      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt<br>      - xpack.security.http.ssl.verification_mode=certificate<br>      - xpack.security.transport.ssl.enabled=true<br>      - xpack.security.transport.ssl.key=certs/es03/es03.key<br>      - xpack.security.transport.ssl.certificate=certs/es03/es03.crt<br>      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt<br>      - xpack.security.transport.ssl.verification_mode=certificate<br>      - xpack.license.self_generated.type=$&#123;LICENSE&#125;<br>    mem_limit: $&#123;MEM_LIMIT&#125;<br>    ulimits:<br>      memlock:<br>        soft: -<span class="hljs-number">1</span><br>        hard: -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">healthcheck</span><span class="language-bash">:</span><br>      test:<br>        [<br>          <span class="hljs-string">&quot;CMD-SHELL&quot;</span>,<br>          <span class="hljs-string">&quot;curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q &#x27;missing authentication credentials&#x27;&quot;</span>,<br>        ]<br>      interval: <span class="hljs-number">10</span>s<br>      timeout: <span class="hljs-number">10</span>s<br>      retries: <span class="hljs-number">120</span><br><br>  kibana:<br>    depends_on:<br>      es01:<br>        condition: service_healthy<br>      es02:<br>        condition: service_healthy<br>      es03:<br>        condition: service_healthy<br>    image: docker.elastic.co/kibana/kibana:$&#123;STACK_VERSION&#125;<br>    volumes:<br>      - certs:/usr/share/kibana/config/certs<br>      - kibanadata:/usr/share/kibana/data<br>    ports:<br>      - $&#123;KIBANA_PORT&#125;:<span class="hljs-number">5601</span><br>    environment:<br>      - SERVERNAME=kibana<br>      - ELASTICSEARCH_HOSTS=https://es01:<span class="hljs-number">9200</span><br>      - ELASTICSEARCH_USERNAME=kibana_system<br>      - ELASTICSEARCH_PASSWORD=$&#123;KIBANA_PASSWORD&#125;<br>      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt<br>    mem_limit: $&#123;MEM_LIMIT&#125;<br>    <span class="hljs-keyword">healthcheck</span><span class="language-bash">:</span><br>      test:<br>        [<br>          <span class="hljs-string">&quot;CMD-SHELL&quot;</span>,<br>          <span class="hljs-string">&quot;curl -s -I http://localhost:5601 | grep -q &#x27;HTTP/1.1 302 Found&#x27;&quot;</span>,<br>        ]<br>      interval: <span class="hljs-number">10</span>s<br>      timeout: <span class="hljs-number">10</span>s<br>      retries: <span class="hljs-number">120</span><br><br>volumes:<br>  certs:<br>    driver: local<br>  esdata01:<br>    driver: local<br>  esdata02:<br>    driver: local<br>  esdata03:<br>    driver: local<br>  kibanadata:<br>    driver: local<br><br></code></pre></td></tr></table></figure><h1 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h1><ul><li><p>master</p><ul><li>主节点，主要负责集群元数据(Cluster State)管理和分发</li><li>大脑，负责制定数据分配规则等</li></ul></li><li><p>Data </p><ul><li>数据节点，主要负责数据存储和数据读写请求处理 </li><li>劳工，真正干活的</li><li>劳工也分等级</li></ul><table><thead><tr><th>层级</th><th>访问频率</th><th>存储介质</th><th>典型场景</th><th>存储成本</th></tr></thead><tbody><tr><td><strong>Hot（热）</strong></td><td>极高（实时访问）</td><td>高速存储（如SSD）</td><td>交易数据、实时计算</td><td>高</td></tr><tr><td><strong>Warm（温）</strong></td><td>中等</td><td>高性能HDD</td><td>近期日志、活跃归档</td><td>中</td></tr><tr><td><strong>Cold（冷）</strong></td><td>低</td><td>普通HDD&#x2F;对象存储</td><td>历史数据、合规性存档</td><td>低</td></tr><tr><td><strong>Frozen（冻结）</strong></td><td>极少（几乎不访问）</td><td>磁带&#x2F;云归档</td><td>法律留存、灾难恢复备份</td><td>极低</td></tr></tbody></table></li><li><p>Ingest</p><ul><li>预处理节点，主要负责对数据进行处理转换</li></ul></li><li><p>Coordinate&#x2F;Client</p><ul><li>协调节点，主要负责请求转发</li><li>交警，将读写流量调度到具体的数据节点</li><li>默认角色(每个角色都自带coordinate属性)</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch搜索引擎（数据建模）</title>
    <link href="/2022/08/14/elasticsearch/ElasticSearch%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1/"/>
    <url>/2022/08/14/elasticsearch/ElasticSearch%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>和java类似</p><table><thead><tr><th><strong>JSON 数据类型</strong></th><th><strong>Elasticsearch 数据类型</strong></th><th><strong>ES 类型说明</strong></th><th><strong>映射示例</strong></th><th><strong>注意事项</strong></th></tr></thead><tbody><tr><td><code>string</code></td><td><code>text</code></td><td>全文检索字段</td><td><code>&quot;name&quot;: &#123; &quot;type&quot;: &quot;text&quot; &#125;</code></td><td>默认分词，适合模糊搜索</td></tr><tr><td><code>string</code></td><td><code>keyword</code></td><td>精确值字段</td><td><code>&quot;status&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;</code></td><td>不分词，适合聚合&#x2F;过滤</td></tr><tr><td><code>number</code> (整数)</td><td><code>integer</code>&#x2F;<code>long</code></td><td>整型数值</td><td><code>&quot;age&quot;: &#123; &quot;type&quot;: &quot;integer&quot; &#125;</code></td><td>根据数值范围选择类型</td></tr><tr><td><code>number</code> (小数)</td><td><code>float</code>&#x2F;<code>double</code></td><td>浮点数值</td><td><code>&quot;price&quot;: &#123; &quot;type&quot;: &quot;float&quot; &#125;</code></td><td><code>double</code> 精度更高</td></tr><tr><td><code>boolean</code></td><td><code>boolean</code></td><td>布尔值</td><td><code>&quot;is_active&quot;: &#123; &quot;type&quot;: &quot;boolean&quot; &#125;</code></td><td>仅接受 <code>true</code>&#x2F;<code>false</code></td></tr><tr><td><code>null</code></td><td>忽略&#x2F;保留</td><td>空值处理</td><td>无需显式声明</td><td>可通过 <code>&quot;null_value&quot;: &quot;NULL&quot;</code> 替换空值</td></tr><tr><td><code>array</code></td><td>同元素类型</td><td>多值字段</td><td><code>&quot;tags&quot;: [ &quot;apple&quot;, &quot;banana&quot; ]</code></td><td>数组元素必须为同一类型</td></tr><tr><td><code>object</code></td><td><code>object</code></td><td>JSON 对象</td><td><code>&quot;user&quot;: &#123; &quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30 &#125;</code></td><td>自动映射为嵌套结构</td></tr><tr><td><code>nested object</code></td><td><code>nested</code></td><td>独立索引的对象数组</td><td><code>&quot;orders&quot;: &#123; &quot;type&quot;: &quot;nested&quot; &#125;</code></td><td>需显式声明，保持数组对象独立性</td></tr><tr><td><code>date</code> (字符串)</td><td><code>date</code></td><td>日期类型</td><td><code>&quot;created_at&quot;: &#123; &quot;type&quot;: &quot;date&quot;, &quot;format&quot;: &quot;yyyy-MM-dd&quot; &#125;</code></td><td>需指定格式，如 <code>epoch_millis</code>&#x2F;<code>strict_date_optional_time</code></td></tr><tr><td><code>geo_point</code></td><td><code>geo_point</code></td><td>经纬度坐标</td><td><code>&quot;location&quot;: &#123; &quot;type&quot;: &quot;geo_point&quot; &#125;</code></td><td>支持 <code>&quot;lat,lon&quot;</code> 或 <code>&#123; &quot;lat&quot;: 40.73, &quot;lon&quot;: -74.1 &#125;</code> 格式</td></tr><tr><td><code>ip</code></td><td><code>ip</code></td><td>IP地址</td><td><code>&quot;client_ip&quot;: &#123; &quot;type&quot;: &quot;ip&quot; &#125;</code></td><td>支持IPv4&#x2F;IPv6</td></tr></tbody></table><p>更多参考官方文档</p><h1 id="indexMapping"><a href="#indexMapping" class="headerlink" title="indexMapping"></a>indexMapping</h1><ul><li>类似数据库中的表结构定义，主要作用如下：<ul><li>定义 Index 下的字段名（Field Name）</li><li>定义字段的类型，比如数值型、字符串型、布尔型等</li><li>定义倒排索引相关的配置，比如是否索引、记录 position 等</li></ul></li></ul><h2 id="GET-test-index-mapping"><a href="#GET-test-index-mapping" class="headerlink" title="GET &#x2F;test_index&#x2F;_mapping"></a>GET &#x2F;test_index&#x2F;_mapping</h2><p>查看</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;test_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="PUT-my-index"><a href="#PUT-my-index" class="headerlink" title="PUT my_index"></a>PUT my_index</h2><p>修改&#x2F;新增结构</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>Mapping 中的字段类型一旦设定后，禁止直接修改，原因如下：<ul><li>Lucene 实现的倒排索引生成后不允许修改</li><li>解决方案为：重新建立新的索引，然后做 reindex 重新导入的操作</li></ul></li></ul><p>elastic提供自动根据入参json自动创建对应的文档索引（用户也可以关闭）</p><h3 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h3><ul><li>通过 dynamic 参数来控制字段的新增<ul><li>true（默认） 允许自动新增字段</li><li>false 不允许自动新增字段，但是文档可以正常写入，但无法 对字段进行查询等操作</li><li>strict 文档不能写入，报错</li></ul></li></ul><h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3><ul><li>控制当前字段是否索引，默认为 true，即记录索引，false 不 记录，即不可搜索</li></ul><h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2><p>分词器是 es 中专门处理分词的组件，英文为 Analyzer，它的组成</p><ol><li>Character Filters: 针对原始文本进行处理，比如去除 html 特殊标记符 </li><li>Tokenizer: 将原始文本按照一定规则切分为单词 </li><li>Token Filters: 针对 tokenizer 处理的单词就行再加工，比如转小写、删除或新增等处理</li></ol><pre><code class=" mermaid">graph LRA[Character Filters]--&gt;B[Tokenizer]B--&gt;C[Token Filters]</code></pre><p>通过analyzer可以对分词器进行测试</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//POST _analyze</span><br><span class="hljs-comment">//分词hello world</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;hello world!&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">//POST test_index/_analyze</span><br><span class="hljs-comment">//对字段内容分词</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;username&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;hello world!&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">//POST _analyze</span><br><span class="hljs-comment">//测试自定义分词器</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-string">&quot;lowercase&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Hello World!&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="预定义分词器"><a href="#预定义分词器" class="headerlink" title="预定义分词器"></a>预定义分词器</h3><ul><li>Standard ：特性为： 按词切分，支持多语言 ，小写处理</li><li>Simple：按照非字母切分 ，小写处理</li><li>Whitespace：按照空格切分</li><li>Stop：Stop Word 指语气助词等修饰性的词语，比如 the、an、的、这等等</li><li>Keyword ：不分词，直接将输入作为一个单词输出</li><li>Pattern：通过正则表达式自定义分割符 ，默认是 \W+，即非字词的符号作为分隔符</li></ul><h3 id="自定义分词器"><a href="#自定义分词器" class="headerlink" title="自定义分词器"></a>自定义分词器</h3><p>通过自定义分词流程中的Character Filters、Tokenizer 和 Token Filter 实现</p><h4 id="Character-Filters"><a href="#Character-Filters" class="headerlink" title="Character Filters"></a>Character Filters</h4><ul><li>Character Filters ：在 Tokenizer 之前对原始文本进行处理，比如增加、删除或替换字符等 • 自带的如下：<ul><li>HTML Strip 去除 html 标签和转换 html 实体 </li><li>Mapping 进行字符替换操作</li><li>Pattern Replace 进行正则匹配替换</li></ul></li><li>会影响后续 tokenizer 解析的 position 和 offset 信息</li></ul><p>示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">POST _analyze<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;char_filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-string">&quot;html_strip&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;p&gt;I&amp;apos;m so &lt;b&gt;happy&lt;/b&gt;!&lt;/p&gt;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="Tokenizer"><a href="#Tokenizer" class="headerlink" title="Tokenizer"></a>Tokenizer</h4><p>将原始文本按照一定规则切分为单词（term or token） 自带的如下：</p><ul><li>standard 按照单词进行分割</li><li>letter 按照非字符类进行分割 </li><li>whitespace 按照空格进行分割 </li><li>UAX URL Email 按照 standard 分割，但不会分割邮箱和 url</li><li>NGram 和 Edge NGram 连词分割 </li><li>Path Hierarchy 按照文件路径进行切割</li></ul><p>示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">POST _analyze<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;path_hierarchy&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/one/two/three&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h4 id="Token-Filters"><a href="#Token-Filters" class="headerlink" title="Token Filters"></a>Token Filters</h4><p>对于 tokenizer 输出的 单词（term） 进行增加、删除、修改等操作</p><p>自带如下</p><ul><li>lowercase 将所有 term 转换为小写 </li><li>stop 删除 stop words</li><li>NGram 和 Edge NGram 连词分割</li><li>Synonym 添加近义词的 term</li></ul><p>示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">POST _analyze<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a Hello,world!&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;stop&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;lowercase&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ngram&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;min_gram&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;max_gram&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="配置分词器"><a href="#配置分词器" class="headerlink" title="配置分词器"></a>配置分词器</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT test_index<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;analysis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;my_custom_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;custom&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;char_filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                        <span class="hljs-string">&quot;html_strip&quot;</span><br>                    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                        <span class="hljs-string">&quot;lowercase&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;asciifolding&quot;</span><br>                    <span class="hljs-punctuation">]</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="分词的时机"><a href="#分词的时机" class="headerlink" title="分词的时机"></a>分词的时机</h3><p>分词会在如下两个时机使用：</p><ul><li>创建或更新文档时（Index Time），会对相应的文档进行分词处理</li><li>查询时（Search Time），会对查询语句进行分词</li></ul><p>学会查看官方文档：[<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.1/a">https://www.elastic.co/guide/en/elasticsearch/reference/8.1/a</a> nalysis-analyzers.html](<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.1/a">https://www.elastic.co/guide/en/elasticsearch/reference/8.1/a</a> nalysis-analyzers.html)</p><h2 id="多字段"><a href="#多字段" class="headerlink" title="多字段"></a>多字段</h2><p>允许对同一个字段采用不同的类型配置，通过fields实现</p><ul><li>设定不同的分词器，比如对人名实现拼音搜索，只需要在人 名中新增一个子字段为 pinyin 即可</li><li>设定不同的类型，比如设为 text 和 keyword，同时实现全 文检索、排序、聚合的需求</li></ul><p>官方文档：[<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.1/m">https://www.elastic.co/guide/en/elasticsearch/reference/8.1/m</a> ulti-fields.html](<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.1/m">https://www.elastic.co/guide/en/elasticsearch/reference/8.1/m</a> ulti-fields.html)</p><p>示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;test_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>                                <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pinyin&quot;</span><br>                            <span class="hljs-punctuation">&#125;</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">//查询时</span><br>GET test_index/_search<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;username.pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hanhan&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Runtime-field-类型"><a href="#Runtime-field-类型" class="headerlink" title="Runtime field 类型"></a>Runtime field 类型</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/runtime-indexed.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/runtime-indexed.html</a></p><p>在查询时动态生成的字段，可正常用于查询、排序、聚合分析等；</p><p>不占用存储空间，常见的应用场景如下</p><ul><li>获取被 disabled 的 _source 中的字段</li><li>使用 grok 等从非结构化数据中动态提取相关字段 </li><li>动态新增字段，无需重写数据（reindex）</li><li>覆盖当前的字段和字段类型</li></ul><p>runtime field也需要被定义</p><h3 id="使用时机"><a href="#使用时机" class="headerlink" title="使用时机"></a>使用时机</h3><ol><li>查询时指定，灵活性高，但增加了查询语句的复杂度</li><li>Index Mapping 中提前指定，适用于需求明确后，固化字段，供 所有使用方共用</li></ol><p>示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//索引时指定runtimefield</span><br>PUT my-index<span class="hljs-number">-000001</span>/<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;runtime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;day_of_week&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">//查询时指定runtimefield</span><br>GET my-index<span class="hljs-number">-000001</span>/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;runtime_mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;day_of_week&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;script&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;emit(doc[&#x27;@timestamp&#x27;].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL, Locale.ENGLISH))&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;day_of_week&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;day_of_week&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>查询时为每个文档动态计算，耗费额外的资源 </li><li>设置不合理的计算代码会拖慢整个集群性能，甚至导致节点崩溃 </li><li>可以实现一些轻量级的运算，避免复杂计算逻辑</li></ul>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解java（二）</title>
    <link href="/2022/03/14/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/03/14/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM方法调用"><a href="#JVM方法调用" class="headerlink" title="JVM方法调用"></a>JVM方法调用</h1><h2 id="重写与重载"><a href="#重写与重载" class="headerlink" title="重写与重载"></a>重写与重载</h2><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>针对java编译器约定方法签名为<code>方法名+参数列表</code>，故此java中允许<strong>方法重载</strong>，即方法名相同，参数列表不同的方法。</p><p>但也会出现以下异常情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//调用第一个</span><br>        test(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;a&quot;</span>&#125;);<br>        <span class="hljs-comment">//调用第二个</span><br>        test(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;a&quot;</span>&#125;);<br><br>        <span class="hljs-comment">//以下均无法通过编译</span><br><span class="hljs-comment">//        test(&quot;a&quot;, &quot;b&quot;);</span><br><span class="hljs-comment">//        test(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;);</span><br>    &#125;<br>    <span class="hljs-comment">//第一个方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String a,String... c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;echo first&quot;</span>);<br>    &#125;<br><br>     <span class="hljs-comment">//第二个</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String a, String b, String... c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;echo second&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>java在编译阶段就能识别重载，识别方案如下：</p><ol><li>优先选取不需要自动装箱拆箱的方法，和不需要可变长参数的方法；</li><li>考虑自动装箱，但不考虑可变长参数；</li><li>考虑自动装箱，考虑可变长参数；</li><li>如果在同一阶段由多个匹配的方法，会选择最贴切的方法（关键在于形参继承关系）。</li></ol><blockquote><blockquote><p>如果子类也可以去重载父类的方法，他们的效果一样。</p></blockquote></blockquote><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>java中允许<strong>方法重写</strong>，即子类可以重写父类的方法，但需要满足以下条件：</p><ol><li>子类方法的访问权限不能低于父类方法；</li><li>子类方法的返回值类型不能大于父类方法；</li><li>子类方法的异常类型不能大于父类方法；</li><li>子类方法的方法名和参数列表必须与父类方法一致。</li><li>子类方法不能覆盖父类的<code>private</code>方法，因为<code>private</code>方法是私有的，子类无法访问。</li><li>子类方法不能覆盖父类的<code>final</code>方法，因为<code>final</code>方法是最终的，无法被覆盖。</li></ol><p><strong>关于静态字段</strong></p><p>子类不能重写静态成员，因为静态不是对象的属性，是class类的成员。可以理解每一个class类都是一个单例的对象，故此静态成员是唯一的。</p><ul><li>在编译器眼里这是可以允许的，因为java编译器会将静态成员的调用转换为<code>类名.静态成员</code>，故此在编译阶段是可以通过的。</li><li>运行阶段则不同，java虚拟机会根据对象的实际类型来调用方法，故此在运行阶段父类调用父类的静态成员。<blockquote><blockquote><p>我们管以上场景叫子类对父类属性的隐藏。</p></blockquote></blockquote></li></ul><h2 id="JVM重写与重载判定"><a href="#JVM重写与重载判定" class="headerlink" title="JVM重写与重载判定"></a>JVM重写与重载判定</h2><p>在JVM中，方法签名的判定由<code>类名</code>，<code>方法名``方法描述符</code>共同判定。其中，<code>方法描述符</code>包括<code>参数列表</code>和<code>返回值</code>。这与编译器的判定有所不同，编译器只关注<code>方法名</code>和<code>参数列表</code>。</p><ul><li>针对JVM重写而编译器不是重写的情况，编译器通过生成桥接方法的形式来实现语义重写。</li><li>针对重载方法而言，其重载特性在编译时已决定，故此JVM不会再次判定。</li></ul><h2 id="静态绑定和动态帮定"><a href="#静态绑定和动态帮定" class="headerlink" title="静态绑定和动态帮定"></a>静态绑定和动态帮定</h2><p>针对以上重载和重写的场景，对于在编译时已决定的方法，如重载方法，编译器会在编译阶段就确定方法的调用。这种方法调用方式叫做<strong>静态绑定</strong>。<br>但也有例外，如子类重写了父类的重载方法的场景，编译器无法确定方法的调用，故此在运行阶段才能确定方法的调用。这种方法调用方式叫做<strong>动态绑定</strong>。（包括大部分重写方法的调用）</p><blockquote><blockquote><p>具体来说，java在解析阶段就能判定要调用的方法会使用<strong>静态绑定</strong>（私有方法），反之则使用<strong>动态绑定</strong>（除私有方法以外）。</p></blockquote></blockquote><h3 id="java的方法调用指令"><a href="#java的方法调用指令" class="headerlink" title="java的方法调用指令"></a>java的方法调用指令</h3><p>java的方法调用指令主要有以下几种：</p><ol><li><code>invokestatic</code>：调用静态方法</li><li><code>invokespecial</code>：调用私有方法，构造方法，父类方法</li><li><code>invokevirtual</code>：非私有实例方法调用</li><li><code>invokeinterface</code>：调用接口方法</li><li><code>invokedynamic</code>：动态调用方法<br>对于JVM而言，<code>invokestatic</code>和<code>invokespecial</code>是<strong>静态绑定</strong>,因为他们可以被虚拟机在解析阶段确定调用的方法。其它场景则需要根据JVM上下文环境判断当前类型。</li></ol><h2 id="符号引用与实际引用替换"><a href="#符号引用与实际引用替换" class="headerlink" title="符号引用与实际引用替换"></a>符号引用与实际引用替换</h2><p>针对上文讲过<strong>静态绑定</strong>以外的场景，编译器会将方法的符号引用放在常量池中，而不是直接指向方法的内存地址。这种方式叫做<strong>符号引用</strong>。因此在编译器编译方法之后，所有的方法并不指向某一块内存地址，而是指向一个符号引用(目标所在类，方法名称，方法描述符）。<br>方法符号引用包括<code>接口符号引</code>,<code>非接口符号引用</code>用，以及他们在解析阶段如何查找实际引用;</p><ul><li>接口符号引用<ol><li>在接口中找到符合签名的方法。</li><li>在 Object 类中的公有实例方法中搜索。</li><li>在接口的超接口中搜索。</li></ol></li><li>非接口符号引用(假定该符号引用所指向的类为 C)<ol><li>在 C 中找到符合签名的方法。</li><li>如果没有找到，在 C 的父类中继续搜索，直至 Object 类。</li><li>如果没有找到，在 C 所直接实现或间接实现的接口中搜索，这一步搜索得到的目标方法必须是非私有、非静态的。并且，如果目标方法在间接实现的接口中，则需满足 C 与该接口之间没有其他符合条件的目标方法。如果有多个符合条件的目标方法，则任意返回其中一个。</li></ol></li></ul><h2 id="虚方法"><a href="#虚方法" class="headerlink" title="虚方法"></a>虚方法</h2><p>上文提到静态绑定，包含<code>invokestatic</code>和<code>invokespecial</code>两种方法调用指令。这两种方法调用指令在编译阶段就能确定调用的方法，故此在运行阶段不需要再次判定。<br>而针对<code>invokevertual</code>和<code>invokeinterface</code>两种方法调用指令即为<strong>虚方法调用</strong>，属于<strong>动态绑定</strong></p><p>虚方法则使用了一种空间换时间的策略，JVM会为每个类生成一个方法表（在类接在准备阶段创建），用于存储类的方法信息。<br>方法表中存储了方法的实际地址，以及方法的访问权限等信息。<br>在调用虚方法时，JVM会根据对象的实际类型来查找方法表，找到对应的方法地址，然后调用该方法。</p><p><strong>关于方法表</strong></p><ul><li>方法表是一个二维数组，第一维是类的实际类型，第二维是方法的实际地址。</li><li>方法表的生成是在类加载的准备阶段，即为每个类生成一个方法表。</li><li>子类会拥有父类方法表的所有方法，对于同签名的方法子类的方法表会覆盖父类的方法表对应索引值的方法。</li><li>由于子类会拥有所有父类的非私有方法，因此对应索引值位置的方法和父类会相同。</li></ul><p><strong>关于方法调用</strong></p><ul><li>虚方法绑定<ul><li>解析阶段，根据类型，获取到虚方法对应类型的索引值。</li><li>替换<strong>符号引用</strong>为当前方法表的索引值。（静态绑定则是直接替换为方法地址）</li></ul></li><li>虚方法调用<ul><li>根据对象的实际类型，获取到方法表。</li><li>根据方法表的索引值，获取到方法地址。</li><li>调用方法。</li></ul></li></ul><h2 id="内联缓存"><a href="#内联缓存" class="headerlink" title="内联缓存"></a>内联缓存</h2><p>针对虚方法调用，JVM会使用内联缓存来提高方法调用的效率。(解决虚方法调用需要多次解引用操作的性能问题)。</p><p>简单说，内联缓存是一种空间换时间的策略。</p><ul><li>JVM会将方法调用的结果缓存起来，下次调用时直接使用缓存的结果，而不需要再次查找方法表。</li><li>缓存无法命中则退化为普通的虚方法调用。</li></ul><p>内联缓存的调用场景</p><ul><li>单态：方法调用的接收者只有一个类型。<ul><li>缓存单个类型，当触发这个类型的调用，直接调用缓存的方法地址。</li></ul></li><li>多态：方法调用的接收者有两个或数个类型。<ul><li>缓存多个类型，当触发这些类型的调用，直接调用缓存的方法地址。</li></ul></li><li>超多太：方法调用的接收者有多个类型。<ul><li>同上</li></ul></li></ul><p>JVM为了节约内存占用，且绝大部分方法都是单态调用，因而只使用了单态缓存。</p><ul><li>在二态场景下，AB两个类型调用相同的方法。在最坏的场景下（即AB交替调用），JVM无法使用内联缓存，并在原有虚方法调用基础上额外增加了替换原有缓存的写操作。（但这次写在下一次调用也不会被命中）<ul><li>在上述场景下，JAVA选择抛弃内联缓存，而使用普通的虚方法调用（需要达到一定阈值）。</li></ul></li><li>在超多态场景下，JVM会使用<strong>分支预测</strong>来提高方法调用的效率(软件层全局表和硬件分支预测)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解java（一）</title>
    <link href="/2021/12/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/12/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JAVA/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="如何运行java代码的"><a href="#如何运行java代码的" class="headerlink" title="如何运行java代码的"></a>如何运行java代码的</h1><p>在讲述java执行过程之前，需要先弄清java的编译过程。</p><h2 id="关于编译"><a href="#关于编译" class="headerlink" title="关于编译"></a>关于编译</h2><p><strong>java编译过程分为两步</strong></p><ol><li>前端编译器将.java文件编译成字节码.class文件。字节码顾名思义，是将操作指令固定为一个字节的操作码。</li><li>由后端编译器将.class文件解析，编译成可由机器托管的机器码。</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 最左列是偏移；中间列是给虚拟机读的机器码；最右列是给人读的代码</span><br><span class="hljs-attribute">0x00</span>:  b2 <span class="hljs-number">00</span> <span class="hljs-number">02</span>         getstatic java.lang.System.out<br><span class="hljs-attribute">0x03</span>:  <span class="hljs-number">12</span> <span class="hljs-number">03</span>            ldc <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-attribute">0x05</span>:  b6 <span class="hljs-number">00</span> <span class="hljs-number">04</span>         invokevirtual java.io.PrintStream.println<br><span class="hljs-attribute">0x08</span>:  b1               return<br></code></pre></td></tr></table></figure><p><strong>关于后端编译</strong></p><p>后端编译器有有两种编译类型，C1（客户端编译器）C2服务端编译器；</p><ul><li>C1编译器编译时间更短，执行时间较长，适合对启动敏感的客户端程序。</li><li>C2编译器则反之，适合对峰值性能要求较高的服务器端程序。</li><li>HotSpot默认使用分层编译，即对于热点方法先由C1编译器预先编译，二后热点方法中的热点方法又C2编译器再次编译。</li><li>HotSpot会给予后端编译器单独的线程，此外会根据线程的数量按1：2分别为C1和C2分配线程数。</li></ul><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>java字节码均有虚拟机托管执行，执行过程分两种。</p><ol><li>解释执行，即解释一行执行一行，显然这种执行过程较慢；</li><li>即时编译执行（JIT），即将字节码编译成机器码执行（通过后端编译器编译），这种执行过程更快但需要时间编译。</li></ol><p>基于以上两点，java思想认为程序代码遵循二八定律，即20%的代码占据80%的执行时间。故此针对少量使用的80%代码使用解释执行，而20%热点代码将通过即时编译（JIT）编译。</p><p>具体编译过程如下：java会统计每个方法在单位时间调用的次数，针对使用不频繁的方法将继续使用<strong>解释执行</strong>方案。而当某一方法调用频率过高，则会将其通过JIT编译成机器码（此过程是异步过程），当编译完成时，下一次程序再次执行这个方法则会调用这块机器码执行。（理论上java在条件充足的情况下，这部分机器码执行效率会比C更快，因为JVM会缓存当前程序上下文信息）。</p><h2 id="为什么使用虚拟机"><a href="#为什么使用虚拟机" class="headerlink" title="为什么使用虚拟机"></a>为什么使用虚拟机</h2><ol><li>依次编译处处运行，只需替换不同种类的虚拟机即可。（目前在docker容器托管部署的趋势下优势不大）</li><li>动态保存代码信息，实现动态推断，隐藏细节等；如java泛型机制为动态泛型机制，java可通过反射操作方法调用；</li><li>减少了对内存的管理，指针的管理，开发者可专注于业务代码；</li></ol><h1 id="java的基本类型"><a href="#java的基本类型" class="headerlink" title="java的基本类型"></a>java的基本类型</h1><h2 id="基本类型概述"><a href="#基本类型概述" class="headerlink" title="基本类型概述"></a>基本类型概述</h2><p>首先，java并不是那么存粹面向对象的语言，如Scala这样，所有的值都是对象。java设计的初衷并不是为了解决数学问题和抽象的思想，更多还是出于对工程学的考虑保留了基本类型，因为他们可在栈保存的特质保证了代码的执行效率。</p><ul><li>boolean<ul><li>java编译器规范中 0&#x3D;false，1&#x3D;true布尔值没有2，3，4等值；我们不能将2&#x3D;&#x3D;false进行判断（编译不会通过）</li><li>在java虚拟机中 ，boolean值被映射成了int，对应false&#x3D;0，true&#x3D;1。</li><li>因此虚拟机要求编译器在编译阶段将true和false转换为对应的int值。</li></ul></li><li>整数类型<ul><li>java整数类型有char，byte，short，int，long，分别占用（2，1，2，4，8）个字节。</li><li>其中char是无符号字节，在java中它还会通过utf16表示字符。</li></ul></li><li>浮点类型<ul><li>float，double，分别占用4，8个字节。</li><li>浮点类型因为有符号位，因此他会有+0&#x2F;-0。</li><li>通过 <strong>正浮点数&#x2F;+0</strong> 或 <strong>正浮点数&#x2F;-0</strong> 可以分别得到<strong>正无穷（0x7F800000）<strong>和</strong>负无穷（0xFF800000）</strong>。而无穷大+1或无穷大-1会得到一个NaN（not a number)。</li><li>针对NaN比较，只要是！&#x3D;比较均为true，即便是比较自己。</li></ul></li></ul><h2 id="基本类型的大小"><a href="#基本类型的大小" class="headerlink" title="基本类型的大小"></a>基本类型的大小</h2><p><strong>局部变量区</strong></p><p>java基本数据类型有两个存储方向，堆和栈；在栈空间中，由于所有的变量数据和指针包括this指针都会存入局部变量区。</p><ul><li>它可以视为一个数组，每一个数组单元（slot）格在32位和64位操作系统的大小位4和8个字节。</li><li>在32位操作系统里，short，byte，char，boolean所占用slot格空间和int一致，而在64位操作系统中他们和long一致。</li></ul><p><strong>数据转换</strong></p><p>在堆空间中，上述变量的值的大小和他们的定义值大小一致。</p><p>java存在隐式转换，即将short转为int，一般遵循从小转大规则。但也可以通过(short)将大数据转为较小的short。</p><ul><li>大转小时，会发生高位截断；反之高位补0；</li><li>如数据带偶符号位<ul><li>负数：大转小，高位截断，高位补上符号位1。小转大，高位补1，符号位也位1；</li><li>正数：大转小，高位截断，高位补上符号位0。小转大，高位补0，符号位也为0；</li></ul></li><li>当数据出现溢出时，如int.MAX+1数据会从最大变为最小。</li></ul><h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><p>java数据类型分为两大类，引用类型，基本类型（上述八大基本类型）。基本类型无需加载，引用类则包含接口，类，数组，泛型参数。而本节会涉及到类加载过程的则会包含接口，类，数组。此外数组是java虚拟机直接生成，但任然需要执行链接，初始化过程。</p><p>类加载分三个大阶段，分为<strong>加载，链接，初始化</strong>。</p><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>即加载字节流，从文件流中获取字节数据，也可以从网络中读取数据流，通过类加载器读取字节信息获取类型返回。</p><p><strong>类加载器</strong></p><p>类加载器除<strong>BootStrap class loader</strong>外，均继承<strong>java.lang.ClassLoader</strong>，因此所有的java类加载器都要先由启动类加载器（java.lang.ClassLoader）开始执行。这个过程应遵循<strong>双亲委派原则</strong>，即先由父类加载器加载，当无法加载类时，后由本类或子类加载器加载一个类。避免了类加载冲突，保证了类型的安全。（这个过程由JVM默认保证，也可由用户重现loadClass方法打破）。其原理如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java.lang.ClassLoader的源码（简化版）</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-type">boolean</span> resolve) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-keyword">synchronized</span> (getClassLoadingLock(name)) &#123;<br>        <span class="hljs-comment">// 1. 检查是否已加载</span><br>        Class&lt;?&gt; c = findLoadedClass(name);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 2. 优先委托父加载器加载（关键步骤）</span><br>                <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<br>                    c = parent.loadClass(name, <span class="hljs-literal">false</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    c = findBootstrapClassOrNull(name);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                <span class="hljs-comment">// 父加载器无法完成时，才自己加载</span><br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>                c = findClass(name); <span class="hljs-comment">// 自定义类加载逻辑</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>各加载器职责</strong></p><ul><li>java9之前<ul><li>启动类加载器负责加载lib目录下的jar包文件中的类（以及由虚拟机参数 -Xbootclasspath 指定的类）</li><li>扩展类加载器（extension class loader），加载次要但通用的类，如JRE的lib&#x2F;ext目录下的jar包类（以及由系统变量 java.ext.dirs 指定的类）</li><li>应用类加载器（application class loader），即加载当前java项目的类<ul><li>虚拟机参数 -cp&#x2F;-classpath、</li><li>系统变量 java.class.path </li><li>环境变量 CLASSPATH 所指定的路径</li></ul></li><li>以上类加载器逐层继承。</li></ul></li><li><a href="https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-A868D0B9-026F-4D46-B979-901834343F9E">java9及之后</a><ul><li>定义平台类加载器（原扩展类加载器），吞噬了原启动类加载器的大部分职责。（java.base)包除外</li></ul></li><li>自定义类加载器<ul><li>可以读取我们特定目录下的java类</li><li>对java类文件加密由类加载器解密</li><li>热更新特定类</li></ul></li><li>类唯一性：由类加载器和类全名共同决定，即不同类加载器加载同一个类可认为时两个不同的类。</li></ul><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接可理解为将加载的类合并到JVM中。核心分三个步骤，<strong>验证，准备，解析</strong>。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证的核心是确保加载的类，符合JVM规范。通常在编译器生成的字节码文件必然符合JVM规范。但也不排除通过字节码注入，诸如ASM框架修改java类信息等手法导致数据不再符合JVM规范。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>有以下两个核心步骤</p><ol><li>为静态字段分配内存（但不涉及静态字段初始化）</li><li>部分虚拟机会在此阶段构造<strong>java类层次结构</strong>，如实现虚方法的动态绑定的方法表。<ul><li>注意：java在编译器编译后，解析之前。类和其成员变量，方法，外部方法，均以<strong>符号引用</strong>占位。</li></ul></li></ol><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul><li>解析阶段会将上述的<strong>符号引用</strong>替换为<strong>实际引用</strong>；</li><li>如果符号引用关联别的类（未加载的类），会触发这个类的加载（但不一定触发这个类的链接，初始化）；</li><li>JVM没有强制要求链接过程中一定要完成解析<ul><li>类加载过程的解析会完成对类信息，字符串字面量，静态成员的解析。</li><li>对于动态成员，如方法调用，会在执行阶段完成。（JVM只规定了使用符号引用的字节码在执行之前，需要完成对符号引用的解析）</li></ul></li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>类的初始化主要是为静态成员赋值。</p><ul><li>静态成员的类型是基本类型或字符串类型，编译器会标记他们为（ConstantValue），由虚拟机负责初始化；</li><li>否则，所有的初始化赋值包括static代码块，都会被编译器放置在<code>clinit</code>方法中；<ul><li>虚拟机会确保它只执行依次，会加锁；</li></ul></li></ul><p>初始化的时机主要由以下情况</p><ul><li>当虚拟机启动时，初始化用户指定的主类；</li><li>当遇到用以新建目标类实例的 new 指令时，初始化 new 指令的目标类；</li><li>当遇到调用静态方法的指令时，初始化该静态方法所在的类；</li><li>当遇到访问静态字段的指令时，初始化该静态字段所在的类；</li><li>子类的初始化会触发父类的初始化；</li><li>如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；</li><li>使用反射 API 对某个类进行反射调用时，初始化这个类；</li><li>当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。</li></ul><p>典型延迟初始化例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;&#125;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyHolder</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> LazyHolder.INSTANCE;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数图像小结</title>
    <link href="/2020/04/24/%E6%95%B0%E5%AD%A6%20-%20%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F/"/>
    <url>/2020/04/24/%E6%95%B0%E5%AD%A6%20-%20%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="函数图像总结"><a href="#函数图像总结" class="headerlink" title="函数图像总结"></a>函数图像总结</h1><h2 id="一次函数"><a href="#一次函数" class="headerlink" title="一次函数"></a>一次函数</h2><p><img src="D:/MyProject/block/upload_image/Math/一次函数.jpeg" alt="一次函数"></p><ul><li><p>表达式：$y&#x3D;kx+b$</p><ul><li>$k$：斜率，k值越大则函数直线越往上升</li><li>$b$： 决定函数图像上移或下移</li></ul></li></ul><h2 id="二次函数"><a href="#二次函数" class="headerlink" title="二次函数"></a>二次函数</h2><p><img src="D:/MyProject/block/upload_image/Math/二次函数.jpeg" alt="二次函数"></p><ul><li><p>表达式：$y&#x3D;ax^2+bx+c$</p><ul><li>$a$：a值越大则函数开口越小，反之亦然；若a为负数开口向下</li><li>$b$：b和a共同决定对称轴的位置.当a与b同号时（即ab&gt;0）,对称轴在y轴左；当a与b异号时（即ab&lt;0）,对称轴在y轴右.</li><li>$c$：c决定抛物线与y轴交点.抛物线与y轴交于（0,c）</li></ul></li></ul><h2 id="反比例函数"><a href="#反比例函数" class="headerlink" title="反比例函数"></a>反比例函数</h2><p><img src="D:/MyProject/block/upload_image/Math/反比例函数.jpeg" alt="反比例函数"></p><ul><li><p>表达式：$y&#x3D;&#x2F;frac{k}{x}$</p><ul><li>$k$：<ol><li>当k&gt;0时，图象分别位于第一、三象限，每一个象限内，从左往右，y随x的增大而减小；</li><li>当k&lt;0时，图象分别位于第二、四象限，每一个象限内，从左往右，y随x的增大而增大。</li></ol></li></ul></li></ul><h2 id="指数函数"><a href="#指数函数" class="headerlink" title="指数函数"></a>指数函数</h2><p><img src="D:/MyProject/block/upload_image/Math/指数函数.jpeg" alt="指数函数"><br><img src="D:/MyProject/block/upload_image/Math/指数函数2.jpeg" alt="指数函数"></p><ul><li><p>表达式：$y&#x3D;a^x$</p><ul><li>在y轴右边“<strong>底大图高</strong>”；在y轴左边“<strong>底大图低</strong>”。底数为负数时图形向下</li></ul></li><li><p>特性</p><ul><li>$y&#x3D;a^x$与$y&#x3D;&#x2F;frac{1}{a}^x$呈y轴对称</li></ul></li></ul><h2 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h2><p><img src="D:/MyProject/block/upload_image/Math/对数函数.jpeg" alt="反比例函数"></p><ul><li><p>表达式：$y&#x3D;&#x2F;log_a{x}$</p><ul><li>特性<ul><li>同底的<strong>对数函数</strong>与<strong>指数函数</strong>互为反函数。</li><li>如果<a href="https://baike.baidu.com/item/%E5%BA%95%E6%95%B0">底数</a>一样，<a href="https://baike.baidu.com/item/%E7%9C%9F%E6%95%B0">真数</a>越大，<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%80%BC">函数值</a>越大。（a&gt;1时）</li><li>如果底数一样，真数越小，函数值越大。（0&lt;a&lt;1时）</li></ul></li></ul></li></ul><h1 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h1><h2 id="对数计算"><a href="#对数计算" class="headerlink" title="对数计算"></a>对数计算</h2><ul><li>$log_am+log_an&#x3D;log_a{(m*n)}$</li><li>$log_am-log_an&#x3D;log_a{&#x2F;frac{m}{n}}$ </li><li>$log_{a^m}{b^n}&#x3D;&#x2F;frac{n}{m}*log_ab$<ul><li>$log_{a^m}b&#x3D;&#x2F;frac{1}m*log_ab$</li><li>$log_a{b^n}&#x3D;n*log_ab$</li></ul></li><li>$a^{(log_aN)}&#x3D;N$</li><li>$log_ab&#x3D;&#x2F;frac{log_mb}{log_ma}$</li></ul><p>由上可推导出一下公式</p><ul><li>$log_ab*log_ba&#x3D;1$</li><li>$lg5+lg2&#x3D;1$</li><li>$log_a{a^n}&#x3D;n*log_aa&#x3D;n$</li><li>$log_ab<em>log_bc</em>log_cd…*log_ef&#x3D;log_af$</li></ul><h1 id="算法常用函数"><a href="#算法常用函数" class="headerlink" title="算法常用函数"></a>算法常用函数</h1><h2 id="近似函数"><a href="#近似函数" class="headerlink" title="近似函数"></a>近似函数</h2><table><thead><tr><th>描述</th><th>近似函数</th></tr></thead><tbody><tr><td>调和级数求和</td><td>$H_N&#x3D;1+\frac{1}{2}+\frac{1}{3}+\frac{1}{4}+…+\frac{1}{N} \approx lnN$</td></tr><tr><td>等差数列求和</td><td>$1+2+3+4+…+N\approx\frac{N^2}{2}$</td></tr><tr><td>等比数列求和</td><td>$1+2+4+…+N\approx2N-1\approx2N,其中N&#x3D;2^n$</td></tr><tr><td>斯特灵公式</td><td>$lgN!&#x3D;lg1+lg2+lg3+…+lgN\approx NlgN$</td></tr><tr><td>二项式系数</td><td>$\approx\frac{N^k}{k!},其中k为小常数$</td></tr><tr><td>指数函数</td><td>$(1-\frac{1}{x})^x\approx\frac{1}{e}$</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springCloud</title>
    <link href="/2020/03/19/springCloud/"/>
    <url>/2020/03/19/springCloud/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud概述"><a href="#SpringCloud概述" class="headerlink" title="SpringCloud概述"></a>SpringCloud概述</h1><h2 id="微服务架构概述"><a href="#微服务架构概述" class="headerlink" title="微服务架构概述"></a>微服务架构概述</h2><p>“微服务”源于MartinFowler的博文Microservices。</p><p>Martin说：微服务是系统架构上的<strong>一种设计风格</strong>，它的主旨是将一个原本独立的系统<strong>拆成多个小型服务</strong>，这些小型服务都在各自<strong>独立的进程中运行</strong>，服务之间通过<strong>基于HTTP的RESTful API进行通信协作</strong>。被拆分成的每一个小型服务都围绕着系统中的某一项或者<strong>某些耦合度较高的业务功能</strong>进行构建，并且每个服务都维护着自身的数据存储、业务开发、自动化测试案例以及独立部署机制。由于有了轻量级的通信协作基础，所以这些微服务可以使用不同的语言来编写。</p><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/springBoot/springCloud.png"></p><p>简而言之，微服务就是开发一组小型服务的方式来开发一个独立的应用系统，每个小型服务都运行在自己的进程中，并采用HTTP资源API轻量级的机制来互相通信。这些服务围绕业务功能进行构建，并能通过全自动的部署机制来进行独立部署。这些微服务可以使用不同的语言来编写，并且可以使用不同的数据库存储技术。</p><h2 id="微服务优点"><a href="#微服务优点" class="headerlink" title="微服务优点"></a>微服务优点</h2><ol><li>易于开发和维护</li><li>单个微服务启动快</li><li>故障隔离</li><li>局部修改容易且部署快</li><li>技术栈不受限制</li></ol><h2 id="SpringCloud官网"><a href="#SpringCloud官网" class="headerlink" title="SpringCloud官网"></a>SpringCloud官网</h2><p>官网：     <a href="http://projects.spring.io/spring-cloud/">http://projects.spring.io/spring-cloud/</a></p><p>手册：     <a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR2/">http://cloud.spring.io/spring-cloud-static/Dalston.SR2/</a></p><p>中文：     <a href="https://springcloud.cc/">https://springcloud.cc/</a></p><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><ul><li>configuration management         配置中心</li><li>service discovery               服务发现</li><li>circuit breakers                断路器</li><li>intelligent routing             智能路由</li><li>micro-proxy                     微代理</li><li>control bus                     控制总线</li><li>one-time tokens                 一次性令牌</li><li>global locks                    全局锁</li><li>leadership election             选举算法</li><li>distributed sessions            分布式会话</li><li>cluster state                   集群状态</li></ul><h2 id="核心架构图"><a href="#核心架构图" class="headerlink" title="核心架构图"></a>核心架构图</h2><p><img src="D:\MyProject\block\upload_image\springBoot\springCloudCore.png"></p><h2 id="规划内容和步骤"><a href="#规划内容和步骤" class="headerlink" title="规划内容和步骤"></a>规划内容和步骤</h2><ul><li>注册中心Eureka        eureka+ provider-user + consumer-client</li><li>前端负载均衡Ribbon    consumer-ribbon</li><li>RESTFul简易封装       consumer-ribbon-feign</li><li>断路器支持            consumer-ribbon-feign-hystrix</li><li>API网关 Zuul         gateway-zuul</li><li>异构开发语言Sidecar   sidecar+ nodejs</li><li>配置中心config        configserver+consumer-ribbon-feign-hystrix</li></ul><h1 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h1><h2 id="eureka的注册中心原理"><a href="#eureka的注册中心原理" class="headerlink" title="eureka的注册中心原理"></a>eureka的注册中心原理</h2><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/springBoot/zhuceCenter.png" alt="zhuceCenter"></p><p>注意它的特点，结构类似于MessageQueue消息队列，服务（提供者、消费者）先都注册到注册中心。对于服务的消费者，**它的特点在于，不会每次都去注册中心获取，而是有本地缓存，加快访问性能。内部含有心跳机制，当注册中心信息改变，自动快速获取新的信息到本地。**心跳机制还保证分布式环境下，某个服务失败后，自动列表从注册中心移除。注册中心中保证所有可用的链接。</p><h2 id="注册中心相关配置"><a href="#注册中心相关配置" class="headerlink" title="注册中心相关配置"></a>注册中心相关配置</h2><h3 id="自我保护模式"><a href="#自我保护模式" class="headerlink" title="自我保护模式"></a>自我保护模式</h3><p>什么是自我保护模式？默认配置下，如果Eureka Server每分钟收到心跳续约的数量低于一个阈值（instance的数量(60&#x2F;每个instance的心跳间隔秒数)自我保护系数），并且持续15分钟，就会触发自我保护。在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。当它收到的心跳数重新恢复到阈值以上时，该Eureka Server节点就会自动退出自我保护模式。它的设计哲学前面提到过，那就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。</p><p>该模式可以通过eureka.server.enable-self-preservation &#x3D; false来禁用，同时eureka.instance.lease-renewal-interval-in-seconds可以用来更改心跳间隔。</p><h2 id="调用关系图"><a href="#调用关系图" class="headerlink" title="调用关系图"></a>调用关系图</h2><p>下图可见，对于负载均衡的Ribbon而言，它是基于消费者端的</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/springBoot/eurekaService.png" alt="eurekaService"></p><h2 id="注册中心搭建"><a href="#注册中心搭建" class="headerlink" title="注册中心搭建"></a>注册中心搭建</h2><h3 id="pom-xml文件"><a href="#pom-xml文件" class="headerlink" title="pom.xml文件"></a>pom.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>eureka.server<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Dalston.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">security:</span><br>  <span class="hljs-attr">basic:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">user</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">password123</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8761</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://user:password123@localhost:8761/eureka</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">root:</span> <span class="hljs-string">INFO</span><br><br></code></pre></td></tr></table></figure><h3 id="服务启动类"><a href="#服务启动类" class="headerlink" title="服务启动类"></a>服务启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;<br><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunServices</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RunServices.class,args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>地址：<a href="http://localhost:8761/">http://localhost:8761</a></p><p>启动后可通过地址访问各种微服务实例</p><h1 id="Eureka服务提供者"><a href="#Eureka服务提供者" class="headerlink" title="Eureka服务提供者"></a>Eureka服务提供者</h1><h2 id="服务提供者搭建"><a href="#服务提供者搭建" class="headerlink" title="服务提供者搭建"></a>服务提供者搭建</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ypjiao<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>eureka-supplier<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Dalston.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7900</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">supplier-user</span> <span class="hljs-comment"># 服务的名称，名称可以相同用于标识是什么服务，且方便用于负载均衡识别对应的服务</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">serviceUrl:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://user:password123@localhost:8761/eureka</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">root:</span> <span class="hljs-string">INFO</span><br></code></pre></td></tr></table></figure><h3 id="Controller-java"><a href="#Controller-java" class="headerlink" title="Controller.java"></a>Controller.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SupplierController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/supplier/&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello,&quot;</span>+name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="服务启动类-1"><a href="#服务启动类-1" class="headerlink" title="服务启动类"></a>服务启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">//Eureka客户端</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunSupplier1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RunSupplier1.class,args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Eureka服务消费者"><a href="#Eureka服务消费者" class="headerlink" title="Eureka服务消费者"></a>Eureka服务消费者</h1><h2 id="服务消费者搭建"><a href="#服务消费者搭建" class="headerlink" title="服务消费者搭建"></a>服务消费者搭建</h2><h3 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ypjiao<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ribbon-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>Tomorow<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Dalston.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="application-yml-2"><a href="#application-yml-2" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7902</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">ribbon-client</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">serviceUrl:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://user:password123@localhost:8761/eureka</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">root:</span> <span class="hljs-string">INFO</span><br><br></code></pre></td></tr></table></figure><h3 id="Controller-java-1"><a href="#Controller-java-1" class="headerlink" title="Controller.java"></a>Controller.java</h3><ul><li>RestTemplate对象是在RunApp中声明并创建的，用它才可以实现负载均衡，同时注意url中的地址为VIP虚拟IP，为application.yml中配置的application-name。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RibbonController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    RestTemplate restTemplate;<br>    <span class="hljs-meta">@RequestMapping(&quot;/ribbon/&#123;name&#125;&quot;)</span><br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://SUPPLIER-USER/supplier/&quot;</span>+name;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(url,String.class);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="服务启动类-2"><a href="#服务启动类-2" class="headerlink" title="服务启动类"></a>服务启动类</h3><ul><li>@LoadBalanced注解：用于制定RestTemplate对象的负载均衡</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunRibbon</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RunRibbon.class,args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h1><h2 id="Ribbon概述"><a href="#Ribbon概述" class="headerlink" title="Ribbon概述"></a>Ribbon概述</h2><ul><li>Ribbon是基于客户端的，因此需要在消费者客户端中进行配置</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/springBoot/Ribbon.png" alt="Ribbon"></p><h2 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h2><p>常见的负载均衡策略有三种</p><ol><li>第一种也是默认为轮询</li><li>第二种为random随机</li><li>第三种为WeightedResponseTimeRule，响应时间</li></ol><h2 id="负载均衡型消费者搭建"><a href="#负载均衡型消费者搭建" class="headerlink" title="负载均衡型消费者搭建"></a>负载均衡型消费者搭建</h2><p>ribbon其实无异于普通消费者，只需对代码中Template对象添加负载均衡注解@LoadBlance即可，此外还需切换调用虚拟IP的方法来实现负载均衡</p><p>ribbon相关jar包已存在于eureka的jar包中，因此无需更改pom文件</p><h3 id="Controller-java-2"><a href="#Controller-java-2" class="headerlink" title="Controller.java"></a>Controller.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RibbonController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    RestTemplate restTemplate;<br>    <span class="hljs-meta">@RequestMapping(&quot;/ribbon/&#123;name&#125;&quot;)</span><br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://SUPPLIER-USER/supplier/&quot;</span>+name;<br>      <span class="hljs-comment">//VIP虚拟IP，提供者的application-name:provider-user</span><br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(url,String.class);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="服务启动类-3"><a href="#服务启动类-3" class="headerlink" title="服务启动类"></a>服务启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunRibbon</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span> <span class="hljs-comment">//Ribbon负载均衡</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RunRibbon.class,args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Ribbon随机负载算法配置"><a href="#Ribbon随机负载算法配置" class="headerlink" title="Ribbon随机负载算法配置"></a>Ribbon随机负载算法配置</h2><h3 id="Ribbon规则配置类"><a href="#Ribbon规则配置类" class="headerlink" title="Ribbon规则配置类"></a>Ribbon规则配置类</h3><p>需先自定义一个规则配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.IRule;<br><span class="hljs-keyword">import</span> com.netflix.loadbalancer.RandomRule;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 自定义Ribbon配置</span><br><span class="hljs-comment"> * 规定：这个类不能在<span class="hljs-doctag">@ComponentScan</span>和<span class="hljs-doctag">@SpringBootApplication</span>本包和子包下，否则引起<span class="hljs-doctag">@RibbonClients</span>扫描冲突</span><br><span class="hljs-comment"> * 注意：随机第一次打断点进入，之后多次刷新就不进入，可能由于本地缓存原因</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RibbonRuleConfig</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">ribbonRule</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="服务启动类-4"><a href="#服务启动类-4" class="headerlink" title="服务启动类"></a>服务启动类</h3><p>在原有的基础上新增@RibbonClient注解配置规则即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@RibbonClient(name=&quot;provider-user&quot;, configuration=RibbonRuleConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunRibbon</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span> <span class="hljs-comment">//Ribbon负载均衡</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RunRibbon.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Feign服务消费者（申明式客户端）"><a href="#Feign服务消费者（申明式客户端）" class="headerlink" title="Feign服务消费者（申明式客户端）"></a>Feign服务消费者（申明式客户端）</h1><h2 id="Feign概述"><a href="#Feign概述" class="headerlink" title="Feign概述"></a>Feign概述</h2><p>Feigh是一个声明式web服务客户端。它能让开发web服务变得容易。使用Feign需要创建一个接口并注解它。它拥有包括Feign注解和JAX-RS注解的可插拔支持。它还支持可插拔的编码器和解码器。Spring Cloud拥有Spring MVC支持，并使用Spring Web中默认同样的HttpMessageConverters。在使用Feign时，SpringCloud集成了Ribbon和Eureka来提供负载均衡的HTTP客户端。</p><p>总结：Feign简化HttpClient开发，封装了JAX-RS和SprinMVC的注解，学习成本很低。</p><h2 id="Feign原理"><a href="#Feign原理" class="headerlink" title="Feign原理"></a>Feign原理</h2><ol><li>首先通过@EnableFeignCleints注解开启FeignCleint</li><li>根据Feign的规则实现接口，并加@FeignCleint注解</li><li>程序启动后，会进行包扫描，扫描所有的@ FeignCleint的注解的类，并将这些信息注入到ioc容器中。</li><li>当接口的方法被调用，通过jdk的代理，来生成具体的RequesTemplate</li><li>RequesTemplate在生成Request</li><li>Request交给Client去处理，其中Client可以是HttpUrlConnection、HttpClient也可以是Okhttp</li><li>最后Client被封装到LoadBalanceClient类，这个类结合类Ribbon做到了负载均衡。</li></ol><p>原文链接：<a href="https://blog.csdn.net/forezp/article/details/73480304">https://blog.csdn.net/forezp/article/details/73480304</a></p><h2 id="服务提供者搭建-1"><a href="#服务提供者搭建-1" class="headerlink" title="服务提供者搭建"></a>服务提供者搭建</h2><h3 id="pom-xml-2"><a href="#pom-xml-2" class="headerlink" title="pom.xml"></a>pom.xml</h3><ul><li>注意，Feign是基于Hystrix的</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ypjiao<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign=client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Hystrix，Feign是基于Hystrix的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Feign依赖，声明式开发 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Eureka依赖，连接注册中心的都需要有这个依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Dalston.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="application-yml-3"><a href="#application-yml-3" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs .yml">server:<br>  port: 7903<br>spring:<br>  application:<br>    name: feign-client<br>eureka:<br>  client:<br>    serviceUrl:<br>      defaultZone: http://user:password123@localhost:8761/eureka<br>      <br></code></pre></td></tr></table></figure><h3 id="FeignService-java"><a href="#FeignService-java" class="headerlink" title="FeignService.java"></a>FeignService.java</h3><p>以接口对外暴露，从而封装底层操作。</p><ul><li>注解：<ul><li>@FeignClient：申明该接口为Feign管理<ul><li>value值中指定对应的服务提供者</li><li>config：指定具体的配置类</li><li>fallback：Feign的降级</li></ul></li><li>@RequestMapping：将来作为请求模板的一员指定请求路径</li><li>@PathVariable：指定请求参数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.feign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-comment">// 这个接口相当于把原来的服务提供者项目当成一个Service类</span><br><span class="hljs-meta">@FeignClient(value = &quot;supplier-user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FeignService</span> &#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Feign中没有原生的@GetMapping/@PostMapping/@DeleteMapping/@PutMapping，要指定需要用method进行</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/supplier/&#123;name&#125;&quot;)</span><br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String value)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="FeignConfig-java"><a href="#FeignConfig-java" class="headerlink" title="FeignConfig.java"></a>FeignConfig.java</h3><p>Feign相关配置设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Retryer <span class="hljs-title function_">feignRetryer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Retryer</span>.Default(<span class="hljs-number">100</span>, SECONDS.toMillis(<span class="hljs-number">1</span>), <span class="hljs-number">5</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Controller-java-3"><a href="#Controller-java-3" class="headerlink" title="Controller.java"></a>Controller.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.controller;<br><br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    FeignService feignService;<br>    <span class="hljs-meta">@RequestMapping(&quot;/ypFeign/&#123;name&#125;&quot;)</span><br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> feignService.getName(name);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="服务启动类-5"><a href="#服务启动类-5" class="headerlink" title="服务启动类"></a>服务启动类</h3><ul><li>注解说明<ul><li>@EnableFeignClients：开启Feign功能，这样容器才回去扫描带有@FeignClient注解的接口</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.SpringCloudApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.feign.EnableFeignClients;<br><br><span class="hljs-meta">@SpringCloudApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunFeign</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RunFeign.class,args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Feign实现降级"><a href="#Feign实现降级" class="headerlink" title="Feign实现降级"></a>Feign实现降级</h2><h3 id="Fallback-java"><a href="#Fallback-java" class="headerlink" title="Fallback.java"></a>Fallback.java</h3><p>直接实现消费者的CartFeign接口，给每个方法设置异常时的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.feign;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><span class="hljs-comment">//微服务访问异常则启用降级</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignServiceFallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FeignService</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SysResult <span class="hljs-title function_">mycart</span><span class="hljs-params">(Long userId)</span> &#123;<br><span class="hljs-keyword">return</span> SysResult.build(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;mycart error.&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SysResult <span class="hljs-title function_">save</span><span class="hljs-params">(Cart cart)</span> &#123;<br><span class="hljs-keyword">return</span> SysResult.build(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;save error.&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SysResult <span class="hljs-title function_">update</span><span class="hljs-params">(Cart cart)</span> &#123;<br><span class="hljs-keyword">return</span> SysResult.build(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;update error.&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SysResult <span class="hljs-title function_">delete</span><span class="hljs-params">(Cart cart)</span> &#123;<br><span class="hljs-keyword">return</span> SysResult.build(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;delete error.&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="修改FeignService-java"><a href="#修改FeignService-java" class="headerlink" title="修改FeignService.java"></a>修改FeignService.java</h3><p>需指定降级配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.feign;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.feign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@FeignClient(value = &quot;supplier-user&quot;, fallback = CartFeignFallback.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FeignService</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/supplier/&#123;name&#125;&quot;)</span><br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String value)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="修改Application-yml"><a href="#修改Application-yml" class="headerlink" title="修改Application.yml"></a>修改Application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">jt-cart</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">serviceUrl:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://user:password123@localhost:8761/eureka</span><br><br><span class="hljs-comment">#feign集成hystrix必须开启</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">root:</span> <span class="hljs-string">INFO</span><br><br></code></pre></td></tr></table></figure><h2 id="Feign调用过程"><a href="#Feign调用过程" class="headerlink" title="Feign调用过程"></a>Feign调用过程</h2><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/springBoot/processFeign.png" alt="processFeign"></p><p>首先，提供者provider-user和消费者custorm-feign都注册到Eureka中。用户请求feign中的controller，feign中的controller调用feign定义的接口方法。接口的方法根据注解去找到eureka注册中心中的provider-user地址，然后请求远程provider-user所在服务器的地址，然后调用远程的provider-user提供者的具体服务。提供者响应返回json，json被feign封装传输给“接口”的返回值，“接口”在返回给feign的controller，最终响应给用户。</p><h1 id="Hystrix断路器"><a href="#Hystrix断路器" class="headerlink" title="Hystrix断路器"></a>Hystrix断路器</h1><h2 id="Hystrx断路器概述"><a href="#Hystrx断路器概述" class="headerlink" title="Hystrx断路器概述"></a>Hystrx断路器概述</h2><ul><li>微服务架构存在的问题</li></ul><p>微服务的设计，服务分散在多个服务器上，服务之间互相调用，要调用的服务由于跨网络跨服务器调用，响应速度明显比传统项目单机调用慢很多，甚至由于网络涌动的不稳定的现象发生导致调用超时；还有类似级联失败、雪崩效应（依赖的基础服务宕机，关联的服务导致失败甚至宕机，就像滚雪球一样层层失败。）</p><p>如何解决这类新的问题呢？传统的机制就是<strong>超时机制</strong>。</p><ul><li>超时机制</li></ul><p>良好的设计，在通过网络请求其他服务时，都必须设置超时时间。正常情况下，一个远程调用几十毫秒内返回。当要调用的服务不可用时或者网络问题，响应时间要等超时，如HttpClient几十秒才超时返回。通常，**一次远程调用对应一个线程&#x2F;进程，如果大量的线程&#x2F;进程得不到释放，并且越积越多，服务资源就会被耗尽，从而导致资深服务不可用。**所以必须为每个请求设置超时时间</p><p>特别像微服务这样基于多个服务，服务之间都是远程调用，如果一个服务长时间等待，用户体验会极差的，那怎么办呢？断路器模式应运而生。</p><ul><li>熔断机制</li></ul><p>**断路器可以实现快速失败，如果它在一段时间内检测到许多失败，如超时，就会强迫其以后的多个调用快速失败，**不再请求所依赖的服务，从而防止应用程序不断地尝试执行可能会失败的操作，这样应用程序可以继续执行而不用等待修正错误，或者浪费CPU时间去等待长时间的超时。<strong>断路器也可以使应用程序能够诊断错误是否已经修正</strong>，如果已经修正，应用程序会再次尝试调用操作。</p><h2 id="断路器几个状态"><a href="#断路器几个状态" class="headerlink" title="断路器几个状态"></a>断路器几个状态</h2><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/springBoot/hystrixProcess.png" alt="hystrixProcess"></p><ul><li>关闭：当访问没有问题时，断路器处于关闭未使用。</li><li>打开：当访问开始出现异常，错误次数增多，达到阀值时就会打开断路器，这样服务直接访问断路器，进行快速失败返回。</li><li>半开：那服务一直走断路器，系统就没法用了，万一被调用的服务已经稳定了呢。断路器的优势就来了，过一定时间窗口后（若干秒）它就会自动分流一部分服务再去尝试访问之前失败的服务。如果继续失败，那就不再转发，如果成功了，成功率高了，那会关闭断路器。</li></ul><h2 id="断路器搭建"><a href="#断路器搭建" class="headerlink" title="断路器搭建"></a>断路器搭建</h2><ul><li>由于Feign是基于Hystrix因此pom文件和Feign一致</li><li>SpringClouldApplication注解内置开启hystrix</li></ul><h3 id="application-yml-4"><a href="#application-yml-4" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">consumer-feign-hystrix</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">serviceUrl:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://user:password123@localhost:8761/eureka</span><br><br></code></pre></td></tr></table></figure><h3 id="修改FeignController"><a href="#修改FeignController" class="headerlink" title="修改FeignController"></a>修改FeignController</h3><ul><li>注解说明<ul><li>@HystrixCommand：为注解的方法指定断路方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.controller;<br><br><span class="hljs-keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    FeignService feignService;<br>    <span class="hljs-meta">@RequestMapping(&quot;/ypFeign/&#123;name&#125;&quot;)</span><br>    <span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;fallbackfeign&quot;)</span><br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> feignService.getName(name);<br>    &#125;<br>  <span class="hljs-comment">//对应上面的方法，参数必须一致，当访问失败时，hystrix直接回调用此方法</span><br>    String <span class="hljs-title function_">fallbackfeign</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是断路器,你好,&quot;</span>+name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Zuul网关"><a href="#Zuul网关" class="headerlink" title="Zuul网关"></a>Zuul网关</h1><h2 id="API网关概述"><a href="#API网关概述" class="headerlink" title="API网关概述"></a>API网关概述</h2><p>通常来说，使用<br>API 网关是更好的解决方式。API 网关是一个服务器，也可以说是进入系统的唯一节点。API 网关封装内部系统的架构，并且提供 API 给各个客户端。它还可能还具备授权、监控、负载均衡、缓存、请求分片和管理、静态响应处理等功能。下图展示了一个适应当前架构的 API 网关</p><h2 id="Zuul搭建"><a href="#Zuul搭建" class="headerlink" title="Zuul搭建"></a>Zuul搭建</h2><p>Zuul的核心还yml配置文件，用映射关系来匹配请求和访问的服务</p><h3 id="pom-xml-3"><a href="#pom-xml-3" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ypjiao<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>eureka-zull<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Dalston.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="application-yml-5"><a href="#application-yml-5" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7904</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">zull-service</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">serviceUrl:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://user:password123@localhost:8761/eureka</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">root:</span> <span class="hljs-string">INFO</span><br><br><span class="hljs-attr">zuul:</span><br>  <span class="hljs-attr">routes:</span><br>    <span class="hljs-attr">app-a:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/user/**</span><br>      <span class="hljs-attr">serviceId:</span> <span class="hljs-string">feign-client</span><br>    <span class="hljs-attr">app-b:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/sidecar/**</span><br>      <span class="hljs-attr">serviceId:</span> <span class="hljs-string">eureka-sidecar</span><br><br></code></pre></td></tr></table></figure><h3 id="服务启动类-6"><a href="#服务启动类-6" class="headerlink" title="服务启动类"></a>服务启动类</h3><ul><li>注解说明<ul><li>@EnableZuulProxy：开启zuul配置</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;<br><br><span class="hljs-meta">@EnableZuulProxy</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunZull</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RunZull.class,args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="基于Zuul的断路器"><a href="#基于Zuul的断路器" class="headerlink" title="基于Zuul的断路器"></a>基于Zuul的断路器</h3><p>如果继续使用基于消费者端的Hystrix断路器，则断路器会失效，因此只能在zuul中配置断路器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.fallback;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.zuul.filters.route.ZuulFallbackProvider;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.http.client.ClientHttpResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//Zuul实现熔断机制</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZullFallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ZuulFallbackProvider</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRoute</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;*&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ClientHttpResponse <span class="hljs-title function_">fallbackResponse</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientHttpResponse</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> HttpStatus <span class="hljs-title function_">getStatusCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                <span class="hljs-keyword">return</span> HttpStatus.BAD_REQUEST;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRawStatusCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                <span class="hljs-keyword">return</span> HttpStatus.BAD_REQUEST.value();<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStatusText</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                <span class="hljs-keyword">return</span> HttpStatus.BAD_REQUEST.getReasonPhrase();<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br><br>            &#125;<br><span class="hljs-comment">//具体返回</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> InputStream <span class="hljs-title function_">getBody</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>((<span class="hljs-string">&quot;fallbackzull&quot;</span>+ZullFallback.<span class="hljs-built_in">this</span>.getRoute()).getBytes());<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> HttpHeaders <span class="hljs-title function_">getHeaders</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>                headers.setContentType(MediaType.APPLICATION_JSON_UTF8);<br>                <span class="hljs-keyword">return</span> headers;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="sidecar异构系统"><a href="#sidecar异构系统" class="headerlink" title="sidecar异构系统"></a>sidecar异构系统</h1><h2 id="sidecar概述"><a href="#sidecar概述" class="headerlink" title="sidecar概述"></a>sidecar概述</h2><p>如果有非jvm的开发语言开发的项目，想使用Eureka注册中心、Ribbon负载均衡、ConfigServer配置中心，就可以使用Sidecar。Sidecar可以通过Http api的方式访问。异构语言项目应该实现一个心跳检查，这样Eureka就能知道程序的死活。</p><p>注意：运行Sidecar必须在断路器、Eureka客户端、Zuul之上。</p><h2 id="异构系统搭建"><a href="#异构系统搭建" class="headerlink" title="异构系统搭建"></a>异构系统搭建</h2><h3 id="pom-xml-4"><a href="#pom-xml-4" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ypjiao<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>eureka-sidecar<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-netflix-sidecar<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Dalston.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="applicaton-yml"><a href="#applicaton-yml" class="headerlink" title="applicaton.yml"></a>applicaton.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7905</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-sidecar</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">serviceUrl:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://user:password123@localhost:8761/eureka</span><br><span class="hljs-comment"># 通过health-uri检测异构系统是否有效 </span><br><span class="hljs-attr">sidecar:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8060</span><br>  <span class="hljs-attr">health-uri:</span> <span class="hljs-string">http://localhost:8060/health.json</span><br><br></code></pre></td></tr></table></figure><h3 id="服务启动类-7"><a href="#服务启动类-7" class="headerlink" title="服务启动类"></a>服务启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.sidecar.EnableSidecar;<br><br><span class="hljs-meta">@EnableSidecar</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunSideCar</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RunSideCar.class,args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些网址收藏</title>
    <link href="/2020/03/17/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/"/>
    <url>/2020/03/17/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="工具使用文档"><a href="#工具使用文档" class="headerlink" title="工具使用文档"></a>工具使用文档</h1><ul><li>fiddler抓包工具用法</li></ul><p><a href="https://www.cnblogs.com/woaixuexi9999/p/9247705.html">https://www.cnblogs.com/woaixuexi9999/p/9247705.html</a></p><h1 id="相关学习"><a href="#相关学习" class="headerlink" title="相关学习"></a>相关学习</h1><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li>http请求</li></ul><p><a href="https://blog.csdn.net/ailunlee/article/details/90600174">https://blog.csdn.net/ailunlee/article/details/90600174</a></p><p> 一个HTTP请求报文由请求行（request line）、请求头部（headers）、空行（blank line）和请求数据（request body）4个部分组成。 </p><p><img src="E:/learning/repository/blog/upload_image/otherLearning/http请求.png"></p><h2 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h2><ul><li>内部类相关</li></ul><p><a href="https://www.cnblogs.com/hackerstd/p/12547503.html">https://www.cnblogs.com/hackerstd/p/12547503.html</a></p><p>内部类分别有成员内部类、局部内部类、匿名内部类、静态内部类</p><h2 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h2><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><ul><li>用markdown写函数表达式</li></ul><p><a href="https://blog.csdn.net/jyfu2_12/article/details/79207643">https://blog.csdn.net/jyfu2_12/article/details/79207643</a></p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Document</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis</title>
    <link href="/2019/12/21/mybatis/"/>
    <url>/2019/12/21/mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="架构分析"><a href="#架构分析" class="headerlink" title="架构分析"></a>架构分析</h1><h2 id="应用架构分析"><a href="#应用架构分析" class="headerlink" title="应用架构分析"></a>应用架构分析</h2><p>Mybatis 是一个优秀的持久层框架，底层基于 JDBC 实现与数据库的交互，并在<br>JDBC 操作的基础上做了封装和优化，其应用架构如图所示：</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/mybatis/mybatis1.png"></p><p>Mybatis 之所以能够成为互联网项目中持久层应用的翘楚，其核心竞争力应该是它灵活的 SQL 定制，参数及结果集的映射。</p><h2 id="产品架构分析"><a href="#产品架构分析" class="headerlink" title="产品架构分析"></a>产品架构分析</h2><p>互联网项目中的任何一个框架都可以看成是一个产品，每个产品都有它自己的产品架构，Mybatis 也不例外，它的产品架构主要可以从接口应用，SQL<br>处理以及基础服务支撑等几个角度进行分析。如下图所示：</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/mybatis/mybatis_jiagou.png"></p><p>所有想成为平台架构师的程序员，在应用一个互联网框架的过程中都应对框架的设计理念，实现思路有一个很好的认知，并基于认知强化实践过程，拓展产品架构思维。</p><h2 id="技术架构分析"><a href="#技术架构分析" class="headerlink" title="技术架构分析"></a>技术架构分析</h2><p>mybatis配置的核心均是通过读取配置xml文件或注解annotation来实现配置的加载。这些配置均会放在各种集合中（如下图所示），而这些集合将会被<br><strong>configuration</strong>类综合管理</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/mybatis/xmlMap.png"></p><ul><li>mybatis的API架构</li></ul><p>mybatis会暴露一个API主要为用户操作的API，SqlSession通过SqlSessionFactoryBactory工厂创建来执行sql操作</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/mybatis/mybatis_api.png"></p><h1 id="Mybatis实践"><a href="#Mybatis实践" class="headerlink" title="Mybatis实践"></a>Mybatis实践</h1><h2 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h2><ul><li>SqlSessionFactory 工厂对象创建分析<ol><li>系统底层会通过流读取所有mybatis配置以及mapper文件</li><li>这些数据存储到对应的对象或集合中，几乎所有的数据均由configuration对象管理</li><li>上述操作均是通过构造者XmlConfigBuilder和<strong>一系列构造者</strong>实现，并将数据存储到configuration中</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException&#123;<br>   <span class="hljs-comment">//所有框架都有配置(xml,annotation,properties,...)</span><br>   <span class="hljs-comment">//1)对于文件需要实用IO进行读取</span><br>   <span class="hljs-comment">//2)对于注解需要借助反射进行读取</span><br>   InputStream in=Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-configs.xml&quot;</span>);<br>   <span class="hljs-comment">//InputStream in=getClass().getClassLoader().getResourceAsStream(&quot;mybatis-configs.xml&quot;);</span><br>   <span class="hljs-comment">//假如是读取文件获取了流对象，后续需要对流对象中的内容进行读取和解析</span><br>   <span class="hljs-comment">//1)SqlSessionFactoryBuilder对象底层会首先借助xml解析器对流进行相关解析</span><br>   <span class="hljs-comment">//2)SqlSessionFactoryBuilder对象会对解析内容进行封装</span><br>   factory=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(in);<br>   <span class="hljs-comment">//系统底层建造者模式构建工厂对象(此对象构建过程相对复杂)</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/mybatis/mybatis_factory.png"></p><ul><li>SqlSessionFactory 创建之时序图分析</li></ul><h3 id="XmlConfigBuilder分析"><a href="#XmlConfigBuilder分析" class="headerlink" title="XmlConfigBuilder分析"></a>XmlConfigBuilder分析</h3><p>XmlConfigBuilder中主要做了两种操作</p><ol><li>读取流（读取为document对象）</li><li>赋值configuration</li></ol><ul><li>流的读取位于xmlConfigBuilder的构造方法中，其主要职责就是已document的方式读出流，这里后续不做具体分析;</li><li>后续会进行数据封装，参考<a href="#MappereStatment">封装</a></li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/mybatis/XmlConfigBuilder.png"></p><hr><h2 id="OpenSession"><a href="#OpenSession" class="headerlink" title="OpenSession"></a>OpenSession</h2><ul><li>SqlSession对象生成分析<ol><li>获取数据源，生成TransactionFactory(数据源在加载配置的时候就已经初始化)</li><li>初始化需要的Executor</li></ol></li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/mybatis/openSession.jpg"></p><h2 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h2><ul><li><p>SqlSession 对象应用过程分析</p><ol><li>SqlSession默认都是使用defaultSqlSession</li><li>SqlSession会通过Configuration对象获取存储的MappedStatement，即mapper文件写的sql<ul><li>SqlSession是通过配置文件命名空间+sql的ID来匹配对应map的key查询MappedStatement</li><li>MapperStatememt保存对应mapper文件指定的sql及相关sql配置</li></ul></li><li>SqlSession通过内部的Executor执行器去执行sql的查询（当开启缓存是会优先执行CachedExecutor)</li><li>BaseExecutor是mybatis的默认缓存执行器，它是一个装饰者装饰其它默认执行器，因此当其它执行器执行时均会执行它</li><li>最终通过封装过的StatementHandler来执行sql（statement）类似JDBC，参考JDBC</li></ol><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/mybatis/mybatis_processObject.png"></p></li></ul><h2 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h2><ul><li>Mapper接口对象应用方式分析<ol><li>mybatis会通过mapper接口对象的路径和方法获取到statement的key值以便获取到MapperStatement</li><li>它是由JDK动态代理来实现的</li></ol></li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/mybatis/mapper.png"></p><ul><li>Mapper 接口代理对象创建分析</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/mybatis/proxy.png"></p><ul><li>模拟mapper代理实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 代理工厂对象，用于生产代理对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br>    Class&lt;?&gt; dao;<br>    ProxyFactory(Class&lt;?&gt; dao)&#123;<br>        <span class="hljs-built_in">this</span>.dao = dao;<br>    &#125;<br>    Object <span class="hljs-title function_">newInstance</span><span class="hljs-params">(InvocationHandler handler)</span>&#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(dao.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[]&#123;dao&#125;,handler);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户自定义mapper接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MybatisDao</span>&#123;<br>    List&lt;Object&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 代理工具实现类，用于生产代理对象以及代理方法逻辑实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisProxyHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>&#123;<br>    SqlSession sqlSession;<br>    Class&lt;?&gt; daoInterface;<br>    MybatisProxyHandler(SqlSession sqlSession,Class&lt;?&gt; daoInterface)&#123;<br>        <span class="hljs-built_in">this</span>.sqlSession = sqlSession;<br>        <span class="hljs-built_in">this</span>.daoInterface = daoInterface;<br>    &#125;<br>    <span class="hljs-comment">//具体代理操作，mybatis并没真正意义上用代理方法，仅仅只是用来获取mapper接口的路径</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;invocation handler&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> daoInterface.getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> method.getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> className+methodName;<br>        sqlSession.query(statement);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//模拟sqlSession接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">SqlSession</span>&#123;<br>    Object <span class="hljs-title function_">query</span><span class="hljs-params">(String statement)</span>;<br>&#125;<br><span class="hljs-comment">//模拟DefaultSqlSession</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultSqlSession</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlSession</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">query</span><span class="hljs-params">(String statement)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;query data from statement:&quot;</span>+statement);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSqlSession</span>();<br>        Class&lt;?&gt; daoInterfase = MybatisDao.class;<br><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisProxyHandler</span>(sqlSession,daoInterfase);<br>        <span class="hljs-type">ProxyFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>(daoInterfase);<br>        <span class="hljs-type">MybatisDao</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (MybatisDao)factory.newInstance(invocationHandler);<br><br>        proxy.selectAll();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Mapper 代理创建之时序图分析</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/mybatis/proxyProcess.png"></p><ul><li>Mapper 代理对象数据访问应用过程分析<ol><li>可见基于接口实现mybatis的sql调度也是通过基础的<code>session.selectList(statement);</code>操作来实现的</li></ol></li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/mybatis/mapperProceess.png"></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>正确的使用mybatisAPI需要事先了解各个API对象的生命周期，以便我们知道他们之间的地位关系，错误的使用会导致非常严重的并发问题。</p><p>提示：依赖注入框架可以创建线程安全的、基于事务的 SqlSession 和映射器，并将它们直接注入到你的 bean 中，因此可以直接忽略它们的生命周期。<br>如果对如何通过依赖注入框架使用 MyBatis 感兴趣，<u>可以研究一下 MyBatis-Spring 或 MyBatis-Guice 两个子项目</u>。</p><ul><li><strong>SqlSessionFactoryBuilder</strong>:这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。 因此<br>SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 你可以重用 SqlSessionFactoryBuilder 来创建多个<br>SqlSessionFactory 实例，但最好还是不要一直保留着它，以保证所有的 XML 解析资源可以被释放给更重要的事情。</li></ul><h1 id="其它对象应用分析"><a href="#其它对象应用分析" class="headerlink" title="其它对象应用分析"></a>其它对象应用分析</h1><h1 id="数据封装及初始化分析"><a href="#数据封装及初始化分析" class="headerlink" title="数据封装及初始化分析"></a>数据封装及初始化分析</h1><h2 id="mapper加载分析"><a href="#mapper加载分析" class="headerlink" title="mapper加载分析"></a>mapper加载分析</h2><h3 id="XmlConfigBuilder"><a href="#XmlConfigBuilder" class="headerlink" title="XmlConfigBuilder"></a>XmlConfigBuilder</h3><ul><li>内部的<span id="parseConfiguration">parseConfiguration</span>方法可以清晰的找到所有数据的封装方法，以mapper为例</li></ul><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\packageMapper.png" alt="image-20200927152115775"></p><h3 id="XMLMapperBuilder"><a href="#XMLMapperBuilder" class="headerlink" title="XMLMapperBuilder"></a>XMLMapperBuilder</h3><ul><li>我们都知道mybatis_config主配置文件中的mappers存储的是所有mapper文件的路径，myubatis基于这个路径找到具体的每个mapper文件</li><li>mapper文件的读取和封装类似mybatis的主配置文件，都是由builder类的构造方法负责读取流，parse()<br>方法负责封装数据，因此具体的封装要看parse()方法；<strong>这里可以看到框架重新启用了一个构造者XMLMapperBuilder去封装数据。</strong></li></ul><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\parseMapper.png" alt="image-20200927152934471"></p><p>进入parse()方法可以看到它会从mapper配置文件的根目录标签“mapper”开始解析。</p><ul><li>通过isResourceLoaded()，addLoadedResource()方法实现配置文件的缓存</li><li>后续parsePendingResultMaps()，parsePendingCacheRefs()，parsePendingStatements()方法负责重新加载初始化配置数据，即二次加载，这里不做详细描述</li><li>mapper配置文件封装操作在configurationElement()方法</li></ul><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\parseMapperSubConfig.png" alt="image-20200927161642394"></p><p>如下图所示，可以看到是对mapper下的各种属性的封装和初始化，包括命名空间，结果集，参数集等</p><ul><li>sql语句封装具体在buildStatementFromContext()方法</li></ul><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\mapperStatistics.png" alt="image-20200928105833920"></p><h3 id="XMLStatementBuilder"><a href="#XMLStatementBuilder" class="headerlink" title="XMLStatementBuilder"></a><span id="XMLStatementBuilder">XMLStatementBuilder</span></h3><p>逐步进入方法，(其中会有包含mybatis多数据库支持的逻辑方法，在以后的章节中会聊)最终找到XMLStatementBuilder，这个构造者用于封装具体<br><code>select|insert|update|delete</code>标签中的属性和语句</p><ul><li>可以清晰的看见它通过parseStatementNode()方法完成数据封装</li></ul><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\addXmlStatementBuilder.png" alt="image-20200928110255555"></p><p>最终可以找到它会用到MapperBuilderAssistant类来辅助封装数据</p><ul><li>MapperBuilderAssistant在初始化XMLMapperBuilder对象时的构造函数中初始化，即一个mapper文件对应一个builderAssistant</li><li>方法中会用到<code>langDriver.createSqlSource(configuration, context, parameterTypeClass);</code><br>来将sql语句封装成SqlSource类型，这是一种基于组合模式的数据存储类型。</li><li>利用applyCurrentNamespace()方法生产key，该key将作为以后查询这个sql的索引</li><li>addMappedStatement()方法最终具体实现了sql 数据封装，即将SqlSource等类型数据加入主配置Configuration中</li></ul><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\creatSqlSource.png" alt="image-20200929153050360"></p><h3 id="MapperStatment-Builder"><a href="#MapperStatment-Builder" class="headerlink" title="MapperStatment.Builder"></a>MapperStatment.Builder</h3><ol><li>在封装方法中可以找到新启动了一个<span id="MappereStatment">MappereStatment</span><br>的内部类Builder，这是构造者模式的一个变种，用于构造MapperStatment</li><li>最后通过configuration的addMappedStatement()<br>方法将MapperStatment自己加入Configuration.MapperStatments的Map集合中以便configuration主配置文件管理，将来当我们要执行某个sql时，便会根据id为key来查找要执行的sql。</li></ol><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\MapperStatment.png" alt="image-20200929160402307"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>XmlConfigBuilder</strong>作为总构造者，负责加载调度其它构造者参与进程。其中<strong>XmlMapperBuilder</strong><br>专项作为mapper配置文件的启动类，它会逐个从mybatis主配置文件中的mapper路径来读取流，解析成document最终通过调度其下的一系列方法来参与构造。<br><strong>XmlStatementBuilder</strong>是mapperBuilder下主要用来封装<code>&lt;insert/&gt;|&lt;update/&gt;|&lt;delete/&gt;|&lt;select/&gt;</code><br>语句中的sql以及参数和结果集的，它会负责读取标签中的配置，最终通过MapperStatment的内部类构造者MapperStatment.Builder将数据封装到configuration下。每个sql及sql的配置都交由MapperStatment管理，而MapperStatment则被configuration类的一个Map封装。</p><p>builder包含关系如下:<br>XmlConfigBuilder<br>└─XmlMapperBuilder<br>└─XmlStatementBuilder<br>└─MapperStatment.Builder</p><hr><h2 id="Sql标签及多数据库支持"><a href="#Sql标签及多数据库支持" class="headerlink" title="Sql标签及多数据库支持"></a>Sql标签及多数据库支持</h2><p>当我们在MapperConfiguration配置文件中添加如下配置时，默认开启多数据库支持；此时，mybatis会根据当前链接的数据库来为Configuration配置匹配正确的数据库配置(<br>从下列配置中匹配，即mysql数据库匹配mysql)。随后我们可在mapper文件中的所有sql标签添加databaseId属性，此时，mybatis只会读取符合databaseId属性的sql</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">mybatis-config.xml<br><span class="hljs-tag">&lt;<span class="hljs-name">databaseIdProvider</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;DB_VENDOR&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Oracle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;oracle&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MySQL&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">databaseIdProvider</span>&gt;</span><br>        -----------------------------------<br>        <span class="hljs-comment">&lt;!-- 当我们连接mysql数据库时，一下两条sql均会被加载 --&gt;</span><br>        mapper.xml<br><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">databaseId</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>select * from student<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentsBySQLFragment&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.example.pojo.Student&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectAll&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;list != null and list.size &gt; 0&quot;</span>&gt;</span><br>    where id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        #&#123;item.id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="多数据库配置识别封装"><a href="#多数据库配置识别封装" class="headerlink" title="多数据库配置识别封装"></a>多数据库配置识别封装</h3><p>该方法位于XMLConfigBuilder.java这个构建者中，核心方法是最后两行</p><ul><li><code>databaseIdProvider.getDatabaseId(environment.getDataSource());</code>：可以看出它会获取数据源，随后在方法中执行以下两个操作：<ul><li>从数据源中获取数据源名称,此例中即：”MySQL”</li><li>匹配上文的<code>&lt;/databaseIdProvider&gt;</code>标签内的配置，当能匹配上时则进行辅助；相反，没有匹配则不作配置；</li></ul></li><li><code>configuration.setDatabaseId(databaseId);</code>进行配置</li></ul><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\setDatabaseId1.png" alt="image-20201022143827466"></p><h3 id="多数据库配置使用"><a href="#多数据库配置使用" class="headerlink" title="多数据库配置使用"></a>多数据库配置使用</h3><p>下文中会分别解析Sql标签的实现原理以及databaseId实现多数据配置的使用原理</p><ul><li>在上文的xml文件的Mapper配置中，以<code>&lt;sql/&gt;</code>标签为例，它的databaseId为“mysql”</li></ul><p>在构建者XMLMapperBuilder中，找到Sql的封装方法，这里不做截图:</p><ul><li><code>sqlElement(context.evalNodes(&quot;/mapper/sql&quot;));</code></li></ul><p>进入有databaseId配置的方法，注意：这里获取的databaseId是先前从主配置文件中封装的</p><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\sqlTag.png" alt="image-20201022145732372"></p><p>该方法有以下几步</p><ol><li>获取属性值，<ol><li>id：用于生成key值id，将来座位索引</li><li>databaseId：会用于匹配先前在主配置文件中配置并加载的databaseId</li></ol></li><li>生成ID:这个ID会成为索引key来方便以后进行调用</li><li>判断匹配两个databaseID是否一样，若一样则进行存储</li></ol><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\setDatabasisId2.png" alt="image-20201022150112491"></p><p>总结：</p><p>多数据库配置指的是当mybatis连接特定数据库时，只读取与这个数据库相关的sql（前提是我们要配置databaseId）；它的配置存储在Configuration主配置类的databaseId变量中；程序读取mapper文件后会一一获取它们的databaseId属性来逐一判断是否加载；</p><h3 id="关于sql标签的调用"><a href="#关于sql标签的调用" class="headerlink" title="关于sql标签的调用"></a>关于sql标签的调用</h3><p>上文用到sql标签的存储来演示多数据库配置，那sql标签是如何被调用的呢？</p><p>上文中提到sql标签中的内容会被存到一个sqlFragments的集合中，这个集合虽然是XmlMapperBuilder构建者的成员变量，但是它的初始化实际上是在Configuration主配置中实现的。因此可得出，在特定配置文件配置的sqlNode是可以全局使用它的，<br><strong>但是sql标签的加载必须先于include标签的加载</strong>；</p><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\sqlFragment.png" alt="image-20201022151753420"></p><p>调用位于具体的<code>&lt;select/&gt;&lt;insert/&gt;&lt;delete/&gt;&lt;update/&gt;</code>标签加载方法中，在SqlSource对象生成之前；（SqlSource对象是实现动态sql，数据拼接的基础；</p><p>该方法之前有分析过，可参考<a href="#XMLStatementBuilder">XMLStatementBuilder</a></p><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\useSql2.png" alt="image-20201023154457577"></p><p>内部实现</p><ul><li>该方法运用递归的方式逐一查找每个子节点，找到那些需要替换的include标签进行替换</li><li>同时当有符合${}表达式的参数时执行注入（注意：该操作只作用于sql标签中OGNL表达式）</li></ul><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\useSql.png" alt="image-20201023163938806"></p><h1 id="动态Mappere分析"><a href="#动态Mappere分析" class="headerlink" title="动态Mappere分析"></a>动态Mappere分析</h1><h2 id="sql封装结构"><a href="#sql封装结构" class="headerlink" title="sql封装结构"></a>sql封装结构</h2><h3 id="树和mapper文件对应关系"><a href="#树和mapper文件对应关系" class="headerlink" title="树和mapper文件对应关系"></a>树和mapper文件对应关系</h3><p>mybatis需要在用户内存空间中暂存sql数据，以便后续及时调用，而存在内存空间的结构需要仰仗mybatis的Sql数据结构</p><p>mybatis中sql的数据结构是mybatis框架的重要组成部分，实现动态sql，sql参数传递等操作均要依赖于优秀的数据结构，下面将介绍mybatis框架实现在这种数据结构的方案</p><p>mybatis的sql数据结构基于<strong>组合模式</strong>实现，这种模式将对象组合成树形结构以表示“部分-整体”的层次结构，而在mybatis的sql数据封装中，会将每个<br><code>&lt;insert/&gt;|&lt;update/&gt;|&lt;delete/&gt;|&lt;select/&gt;</code>标签中的sql内容封装到这种树型结构中(即：每条sql为一棵树结构)，如下图所示。</p><p>这些树最终将封装到<a href="#MappereStatment">MappereStatment封装</a>对象中，受Configuration对象的MappedStatements集合管理。</p><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\sqlTree_1.png" alt="sqlTree_1"></p><h3 id="树的实现"><a href="#树的实现" class="headerlink" title="树的实现"></a>树的实现</h3><ul><li><p>标准的组合模式分为三个结构</p><ol><li>Component ：组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。声明一个接口用于访问和管理Component子部件。</li><li>Leaf：叶子对象。叶子结点没有子结点。</li><li>Composite：容器对象，定义有枝节点行为，用来存储子部件，在Component接口中实现与子部件有关操作，如增加(add)和删除(<br>remove)等。</li></ol></li><li><p>在mybatis中，上述组合部件对应的类如下</p><ul><li>Component 作为整个树的接口，由SqlNode实现，它下面有一个公共方法<code>apply()</code><br>用于执行所有SqlNode的默认行为，默认行为视SqlNode实现对象类型而定后续会继续分析</li><li>Leaf子叶对象则会有很多种，它们各有各自的作为，在mapper文件中对应<code>&lt;insert/&gt;|&lt;update/&gt;|&lt;delete/&gt;|&lt;select/&gt;</code><br>标签中的每一行内容。都继承自SqlNode并实现不同的<code>apply()</code>方法，常见的类包括：TextSqlNode、IfSqlNode、StaticTextSqlNode等。</li><li>Composite容器对象由MixedSqlNode实现，同样也继承自SqlNode接口，实现自定义的<code>apply()</code>方法。容器用于承载各种Leaf子叶对象</li><li>此外DynamicContext对象作为<code>apply()</code>方法的参数，作用是封装具体的sql操作，如sql的获取和拼接等</li></ul></li></ul><h4 id="容器MixedSqlNode"><a href="#容器MixedSqlNode" class="headerlink" title="容器MixedSqlNode"></a>容器MixedSqlNode</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MixedSqlNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlNode</span> &#123;<br>  <span class="hljs-comment">//SqlNode容器用集合实现  </span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;SqlNode&gt; contents;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MixedSqlNode</span><span class="hljs-params">(List&lt;SqlNode&gt; contents)</span> &#123;<br>    <span class="hljs-built_in">this</span>.contents = contents;<br>  &#125;<br><br>  <span class="hljs-comment">//默认方法是遍历调用所有子叶节点中的apply()方法</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span> &#123;...&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="子叶StaticTextSqlNode"><a href="#子叶StaticTextSqlNode" class="headerlink" title="子叶StaticTextSqlNode"></a>子叶StaticTextSqlNode</h4><p>用于封装静态sql语句，mybatis会识别sql语句是否有${}符号，若没有动态sql符号则新建StaticTextSqlNode对象存储这条sql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Clinton Begin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticTextSqlNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlNode</span> &#123;<br>  <span class="hljs-comment">//字符串对象用于存储sql</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String text;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">StaticTextSqlNode</span><span class="hljs-params">(String text)</span> &#123;<br>    <span class="hljs-built_in">this</span>.text = text;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-comment">//拼接本条sql</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span> &#123;<br>    context.appendSql(<span class="hljs-built_in">this</span>.text);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="子叶TextSqlNode"><a href="#子叶TextSqlNode" class="headerlink" title="子叶TextSqlNode"></a>子叶TextSqlNode</h4><p>用于封装动态sql语句，与StaticTextSqlNode相反，当有${}符号时自动封装语句到该对象</p><ul><li>内部会用到两个内部类来辅助完成sql拼接和动态sql判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TextSqlNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlNode</span> &#123;<br>  <span class="hljs-comment">//存储sql文本</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String text;<br>  <span class="hljs-comment">//注入过滤器，用于过滤输入参数</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Pattern injectionFilter;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">TextSqlNode</span><span class="hljs-params">(String text)</span> &#123;<br>    <span class="hljs-built_in">this</span>(text, <span class="hljs-literal">null</span>);<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">TextSqlNode</span><span class="hljs-params">(String text, Pattern injectionFilter)</span> &#123;<br>    <span class="hljs-built_in">this</span>.text = text;<br>    <span class="hljs-built_in">this</span>.injectionFilter = injectionFilter;<br>  &#125;<br>  <span class="hljs-comment">//利用内部类DynamicCheckerTokenParser负责判断动态是否是动态sql</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDynamic</span><span class="hljs-params">()</span> &#123;...&#125;<br><br>  <span class="hljs-comment">//利用内部类BindingTokenParser负责$&#123;&#125;参数拼接</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span> &#123;...&#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BindingTokenParser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TokenHandler</span> &#123;...&#125;<br>  <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicCheckerTokenParser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TokenHandler</span> &#123;...&#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="动态sql标签"><a href="#动态sql标签" class="headerlink" title="动态sql标签"></a>动态sql标签</h4><p>子叶节点sql中，均是以xml节点形式存在，这种节点会利用ognl类库来辅助完成实现test属性的解析</p><h5 id="子叶标签IfSqlNode"><a href="#子叶标签IfSqlNode" class="headerlink" title="子叶标签IfSqlNode"></a>子叶标签IfSqlNode</h5><ul><li>节点SqlNode中会多出一个表达式解析器用于解析和判断节点中test属性对应的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfSqlNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlNode</span> &#123;<br>  <span class="hljs-comment">//表达式解析器，用于解析if标签中的test属性内容</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ExpressionEvaluator evaluator;<br>  <span class="hljs-comment">//test存储if标签中的test属性内容</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String test;<br>  <span class="hljs-comment">//封装下一级sqlNode，一般都是MixedSqlNode</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SqlNode contents;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">IfSqlNode</span><span class="hljs-params">(SqlNode contents, String test)</span> &#123;<br>    <span class="hljs-built_in">this</span>.test = test;<br>    <span class="hljs-built_in">this</span>.contents = contents;<br>    <span class="hljs-built_in">this</span>.evaluator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpressionEvaluator</span>();<br>  &#125;<br><br>  <span class="hljs-comment">//利用表达式解析器里面的evaluateBoolean()方法解析判断test属性中的值是否符合要求</span><br>  <span class="hljs-comment">//若符合要求则继续执行其下的sqlNode</span><br>  <span class="hljs-comment">//&lt;if test=&quot;name != null and name != &#x27;&#x27;&quot;/&gt;  </span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span> &#123;<br>    <span class="hljs-keyword">if</span> (evaluator.evaluateBoolean(test, context.getBindings())) &#123;<br>      contents.apply(context);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>下面会给出案例，两个if节点会封装成如下形式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentsIf&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.example.pojo.Student&quot;</span>&gt;</span><br>    select * from student where 1=1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br>        and name like &#x27;%&#x27; #&#123;name&#125; &#x27;%&#x27;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age &gt; 0&quot;</span>&gt;</span><br>        and age &gt; #&#123;age&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">MixedSqlNode<span class="hljs-punctuation">:</span><br>content<span class="hljs-punctuation">[</span><br>TextSqlNode<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;select * from student where 1=1&quot;</span><span class="hljs-punctuation">,</span><br>ifSqlNode<span class="hljs-punctuation">:</span> test<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span><br>MixedSqlNode<span class="hljs-punctuation">:</span> content<span class="hljs-punctuation">[</span><br>StaticTextSqlNode<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;and name like &#x27;%&#x27; #&#123;name&#125; &#x27;%&#x27;&quot;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>ifSqlNode<span class="hljs-punctuation">:</span> test<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age &gt; 0&quot;</span><br>MixedSqlNode<span class="hljs-punctuation">:</span> content<span class="hljs-punctuation">[</span><br>StaticTextSqlNode<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;and name like &#x27;%&#x27; #&#123;name&#125; &#x27;%&#x27;&quot;</span><br><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">]</span> <br></code></pre></td></tr></table></figure><h5 id="子叶标签TrimSqlNode"><a href="#子叶标签TrimSqlNode" class="headerlink" title="子叶标签TrimSqlNode"></a>子叶标签TrimSqlNode</h5><h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><p>要知道TrimSqlNode首先需要了解<code>&lt;trim/&gt;</code>标签的作用，trim标记是一个格式化的标记，可以完成set或者是where标记的功能</p><p>详情可参考如下案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">select * from user<br><br>        　　<br><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;WHERE&quot;</span> <span class="hljs-attr">prefixoverride</span>=<span class="hljs-string">&quot;AND |OR&quot;</span>&gt;</span><br><br>    　　　　<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name.length()&gt;0&quot;</span>&gt;</span>AND name=#&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>    　　　　<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null and gender.length()&gt;0&quot;</span>&gt;</span>AND gender=#&#123;gender&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>    　　<br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></table></figure><p>假如说name和gender的值都不为null的话打印的SQL为：select * from user where  <del>and</del> name &#x3D; ‘xx’ and gender &#x3D; ‘xx’</p><p>在删除线标记的地方是不存在第一个and的，上面两个属性的意思如下：</p><ul><li>prefix：前缀+ prefixoverride：去掉第一个and或者是or</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">　update user<br><br>        　　<br><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;set&quot;</span> <span class="hljs-attr">suffixoverride</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot; where id = #&#123;id&#125; &quot;</span>&gt;</span><br><br>    　　　　<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name.length()&gt;0&quot;</span>&gt;</span>name=#&#123;name&#125; ,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>    　　　　<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null and gender.length()&gt;0&quot;</span>&gt;</span>gender=#&#123;gender&#125; ,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>    　　<br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></table></figure><p>假如说name和gender的值都不为null的话打印的SQL为：update user set name&#x3D;’xx’ , gender&#x3D;’xx’ <del>,</del>  where id&#x3D;’x’</p><p>在删除线标记的地方不存在逗号，而且自动加了一个set前缀和where后缀，上面三个属性的意义如下，其中prefix意义如上：</p><ul><li>suffixoverride：去掉最后一个逗号（也可以是其他的标记，就像是上面前缀中的and一样）</li><li>suffix：后缀</li></ul><p><a href="https://www.cnblogs.com/qiankun-site/p/5758924.html">原文链接</a></p><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrimSqlNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlNode</span> &#123;<br>  <span class="hljs-comment">//封装下级节点</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SqlNode contents;<br>  <span class="hljs-comment">//封装对应的标签属性</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String prefix;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String suffix;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;String&gt; prefixesToOverride;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;String&gt; suffixesToOverride;<br>    <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Configuration configuration;<br><br>  <span class="hljs-comment">//解析这个&lt;trim/&gt;标签并转化成对应的sql</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span> &#123;<br>    <span class="hljs-comment">//修改传参，将DynamicContext替换为FilteredDynamicContext，以便后续实现属性suffixoverride的功能将多余的符号剔除</span><br>    <span class="hljs-type">FilteredDynamicContext</span> <span class="hljs-variable">filteredDynamicContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilteredDynamicContext</span>(context);<br>    <span class="hljs-comment">//继续执行其内部的其它SqlNode</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> contents.apply(filteredDynamicContext);<br>    <span class="hljs-comment">//它会调用内部类的方法applyAll()去实现sql的重拼接</span><br>    filteredDynamicContext.applyAll();<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilteredDynamicContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DynamicContext</span> &#123;<br>    <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyAll</span><span class="hljs-params">()</span> &#123;<br>      sqlBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(sqlBuffer.toString().trim());<br>      <span class="hljs-type">String</span> <span class="hljs-variable">trimmedUppercaseSql</span> <span class="hljs-operator">=</span> sqlBuffer.toString().toUpperCase(Locale.ENGLISH);<br>      <span class="hljs-keyword">if</span> (trimmedUppercaseSql.length() &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//分别实现prefix和suffix属性的功能，通过字符串操作重新拼接sql</span><br>        applyPrefix(sqlBuffer, trimmedUppercaseSql);<br>        applySuffix(sqlBuffer, trimmedUppercaseSql);<br>      &#125;<br>      delegate.appendSql(sqlBuffer.toString());<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="子叶标签WhereSqlNode"><a href="#子叶标签WhereSqlNode" class="headerlink" title="子叶标签WhereSqlNode"></a>子叶标签WhereSqlNode</h5><p>WhereSqlNode实际上是基于trim实现，因此WhereSqlNode继承TrimSqlNode共享它的所有方法，不同之处在于自动为TrimSqlNode添加了需要的初始化属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhereSqlNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TrimSqlNode</span> &#123;<br>  <span class="hljs-comment">//配置需要删除的prefixOverride参数，通trim标签的prefixoverride属性</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; prefixList = Arrays.asList(<span class="hljs-string">&quot;AND &quot;</span>,<span class="hljs-string">&quot;OR &quot;</span>,<span class="hljs-string">&quot;AND\n&quot;</span>, <span class="hljs-string">&quot;OR\n&quot;</span>, <span class="hljs-string">&quot;AND\r&quot;</span>, <span class="hljs-string">&quot;OR\r&quot;</span>, <span class="hljs-string">&quot;AND\t&quot;</span>, <span class="hljs-string">&quot;OR\t&quot;</span>);<br>  <span class="hljs-comment">//调用父类的构造方法，默认传where语句需要的参数</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">WhereSqlNode</span><span class="hljs-params">(Configuration configuration, SqlNode contents)</span> &#123;<br>    <span class="hljs-built_in">super</span>(configuration, contents, <span class="hljs-string">&quot;WHERE&quot;</span>, prefixList, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="子叶节点SetSqlNode"><a href="#子叶节点SetSqlNode" class="headerlink" title="子叶节点SetSqlNode"></a>子叶节点SetSqlNode</h5><p>原理同上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetSqlNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TrimSqlNode</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; suffixList = Arrays.asList(<span class="hljs-string">&quot;,&quot;</span>);<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SetSqlNode</span><span class="hljs-params">(Configuration configuration,SqlNode contents)</span> &#123;<br>    <span class="hljs-built_in">super</span>(configuration, contents, <span class="hljs-string">&quot;SET&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, suffixList);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="子叶节点ForEachSqlNode"><a href="#子叶节点ForEachSqlNode" class="headerlink" title="子叶节点ForEachSqlNode"></a>子叶节点ForEachSqlNode</h5><h6 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">if标签中的array表示数组，</span><br><span class="hljs-comment">collection表示要遍历的集合类型。其中array表示数组，list表示集合。</span><br><span class="hljs-comment">open、close、separator为对遍历内容的SQL拼接</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentsForeachArray&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.example.pojo.Student&quot;</span>&gt;</span><br>    select * from student<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;array != null and array.length &gt; 0&quot;</span>&gt;</span><br>        where id in<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;array&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>            #&#123;item&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--遍历泛型--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentsForeachList2&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.example.pojo.Student&quot;</span>&gt;</span><br>select * from student<br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;list != null and list.size &gt; 0&quot;</span>&gt;</span><br>    where id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        #&#123;item.id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h6><p>说明样例：<code>&lt;foreach collection=&quot;list&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot; item=&quot;item&quot;&gt;</code></p><ul><li>open，close，参数为简单的参数拼接</li><li>collection会利用ognl类库来实现参数的获取，array标识获取数组类型，list标识获取集合类型</li><li>separator会通过装饰着PrefixedContext来扩展实现DynamicContext的功能，来逐步为后续sqlNode拼接上述样例中的“，”</li><li>由于参数集是以map集合来实现的，item会用于设定索引，来存储遍历出的每个对象；儿后续子叶sqlNode中会通过DynamicContext获取到这个map并从中获取value值来拼接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForEachSqlNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlNode</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ITEM_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;__frch_&quot;</span>;<br>  <span class="hljs-comment">//表达式解析器</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ExpressionEvaluator evaluator;<br>  <span class="hljs-comment">//集合解析器：用于解析传参中的集合类型如list为集合，array为数组  </span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String collectionExpression;<br>  <span class="hljs-comment">//内部的子叶sqlNode  </span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SqlNode contents;<br>  <span class="hljs-comment">//封装传参&lt;foreach collection=&quot;list&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot; item=&quot;item&quot;&gt;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String open;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String close;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String separator;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String item;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String index;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Configuration configuration;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span> &#123;<br>    <span class="hljs-comment">//获取参数集合  </span><br>    Map&lt;String, Object&gt; bindings = context.getBindings();<br>    <span class="hljs-comment">//通过Ognl类库获取请求参数集合，根据collectionExpression表达式来判断集合和数组</span><br>    <span class="hljs-keyword">final</span> Iterable&lt;?&gt; iterable = evaluator.evaluateIterable(collectionExpression, bindings);<br>    <span class="hljs-keyword">if</span> (!iterable.iterator().hasNext()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//拼接open参数，这里的案例是拼接“(”</span><br>    applyOpen(context);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//遍历参数集合或数组中 </span><br>    <span class="hljs-keyword">for</span> (Object o : iterable) &#123;<br>      <span class="hljs-type">DynamicContext</span> <span class="hljs-variable">oldContext</span> <span class="hljs-operator">=</span> context;<br>      <span class="hljs-comment">//为 PrefixedContext工具类添加separator参数，样例中的separator是“，”，后续sqlNode中会继续利用PrefixedContext来辅助实现参数的拼接</span><br>      <span class="hljs-keyword">if</span> (first || separator == <span class="hljs-literal">null</span>) &#123;<br>        context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixedContext</span>(context, <span class="hljs-string">&quot;&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixedContext</span>(context, separator);<br>      &#125;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">uniqueNumber</span> <span class="hljs-operator">=</span> context.getUniqueNumber();<br>      <span class="hljs-comment">// Issue #709 </span><br>      <span class="hljs-comment">//根据请求参数类型来绑定参数集，参数集以map的形式存储在DynamicContext中，以便后续SqlNode通过$&#123;&#125;或#&#123;&#125;来从参数集中获取参数；mybatis的参数集是mybatis实现ognl语法的核销，以后的文档中会分析mybatis参数的获取传递以及ognl的利用实现</span><br>      <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> Map.Entry) &#123;<br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <br>        Map.Entry&lt;Object, Object&gt; mapEntry = (Map.Entry&lt;Object, Object&gt;) o;<br>        applyIndex(context, mapEntry.getKey(), uniqueNumber);<br>        applyItem(context, mapEntry.getValue(), uniqueNumber);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        applyIndex(context, i, uniqueNumber);<br>        applyItem(context, o, uniqueNumber);<br>      &#125;<br>      contents.apply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FilteredDynamicContext</span>(configuration, context, index, item, uniqueNumber));<br>      <span class="hljs-keyword">if</span> (first) &#123;<br>        first = !((PrefixedContext) context).isPrefixApplied();<br>      &#125;<br>      context = oldContext;<br>      i++;<br>    &#125;<br>    applyClose(context);<br>    context.getBindings().remove(item);<br>    context.getBindings().remove(index);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//DynamicContext的装饰者实现，以便扩展参数集功能</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrefixedContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DynamicContext</span> &#123;...&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>剩下的标签还有ChooseSqlNode,WhenSqlNode,OtherWiseSqlNode等，他们的原理与之前将的几个SqlNode相差无几,后面不多赘述;</p><h2 id="SqlNode组合构成实现"><a href="#SqlNode组合构成实现" class="headerlink" title="SqlNode组合构成实现"></a>SqlNode组合构成实现</h2><h3 id="启动类的初始化"><a href="#启动类的初始化" class="headerlink" title="启动类的初始化"></a>启动类的初始化</h3><ul><li>mybatis的sqlNode构成实现启动类为XMLScriptBuilder，XMLScriptBuilder在初始化时会分别为context(解析xml中的sql)<br>,parameterType(与动态sql无关)赋值,以及初始化initNodeHandlerMap()方法，该方法用于初始化形成SqlNode组合的工具内部类们；该方法如下图</li></ul><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\initNodeHandler.png" alt="image-20201210105834529"></p><h3 id="启动类启动"><a href="#启动类启动" class="headerlink" title="启动类启动"></a>启动类启动</h3><ul><li>parseScriptNode()方法是在初始化后被直接调用，也是启动类的启动方法，具体可查看XMLLanguageDriver类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> SqlSource <span class="hljs-title function_">parseScriptNode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//parseDynamicTags方法为具体sqlNode的封装方法，它返回封装后的sqlNode结果</span><br>        <span class="hljs-type">MixedSqlNode</span> <span class="hljs-variable">rootSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.parseDynamicTags(<span class="hljs-built_in">this</span>.context);<br>        <span class="hljs-type">SqlSource</span> <span class="hljs-variable">sqlSource</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//parseDynamicTags()在封装过程中判断是否有$&#123;&#125;符号（及参数是否有以动态sql的形式注入）  注意：$&#123;&#125;和#&#123;&#125;的区别</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isDynamic) &#123;<br>            <span class="hljs-comment">//如果有$&#123;&#125;或则存储到动态SQL源中，如下以DynamicSqlSource来封装</span><br>            <span class="hljs-comment">//将来在Executer执行器执行sql参数注入时会通过DynamicSqlSource的getBoundSql方法来封装参数</span><br>            sqlSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicSqlSource</span>(<span class="hljs-built_in">this</span>.configuration, rootSqlNode);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//如果有没有$&#123;&#125;则用RawSqlSource封装</span><br>            sqlSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RawSqlSource</span>(<span class="hljs-built_in">this</span>.configuration, rootSqlNode, <span class="hljs-built_in">this</span>.parameterType);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> (SqlSource)sqlSource;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="封装SqlNode"><a href="#封装SqlNode" class="headerlink" title="封装SqlNode"></a>封装SqlNode</h3><ol><li>启动方法的主要逻辑实现在parseDynamicTags()方法，如下</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*该方法核心逻辑为for循环中的if，else判断；</span><br><span class="hljs-comment">*前置步骤是从node节点中获取子节点，注意，子节点并不包括孙子节点</span><br><span class="hljs-comment">**/</span><br><span class="hljs-keyword">protected</span> MixedSqlNode <span class="hljs-title function_">parseDynamicTags</span><span class="hljs-params">(XNode node)</span> &#123;<br>    List&lt;SqlNode&gt; contents = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;SqlNode&gt;();<br>    <span class="hljs-type">NodeList</span> <span class="hljs-variable">children</span> <span class="hljs-operator">=</span> node.getNode().getChildNodes();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; children.getLength(); i++) &#123;<br>      <span class="hljs-type">XNode</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> node.newXNode(children.item(i));<br>      <span class="hljs-comment">//当子节点Node是Text文本时，新建TextSqlNode封装文本</span><br>      <span class="hljs-keyword">if</span> (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> child.getStringBody(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-type">TextSqlNode</span> <span class="hljs-variable">textSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextSqlNode</span>(data);<br>        <span class="hljs-comment">//根据text文本中是否有$&#123;&#125;来判断是否是动态sql，如#&#123;&#125;则不是动态sql</span><br>        <span class="hljs-keyword">if</span> (textSqlNode.isDynamic()) &#123;<br>          contents.add(textSqlNode);<br>          isDynamic = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          contents.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticTextSqlNode</span>(data));<br>        &#125;<br>      <span class="hljs-comment">//当子节点Node为Node时，调用HandleNode方法处理这个子节点</span><br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (child.getNode().getNodeType() == Node.ELEMENT_NODE) &#123; <span class="hljs-comment">// issue #628</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">nodeName</span> <span class="hljs-operator">=</span> child.getNode().getNodeName();<br>        <span class="hljs-comment">//根据节点名称获取特定的handler，这些handler在这个Builder类的构造函数中初始化  </span><br>        <span class="hljs-type">NodeHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> nodeHandlerMap.get(nodeName);<br>        <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Unknown element &lt;&quot;</span> + nodeName + <span class="hljs-string">&quot;&gt; in SQL statement.&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//传入集合容器contents,child子节点</span><br>        handler.handleNode(child, contents);<br>        isDynamic = <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//返回这个容器list</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MixedSqlNode</span>(contents);<br>  &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>不同handler会有特有的自定义封装初始化以及特定的handleNode(child, contents)方法的操作，但大体流程一致<ol><li>再次调用parseDynamicTags()方法封装这个子节点child内部子节点，递归的方式；并返回一个容器即MixedSqlNode，这个容器则是这个树状分支的分支即组合模式的component</li><li>解析Node标签中的属性如test等</li><li>新建特定的SqlNode(不同Handler处理不同的SqlNode)将获取的component分支以及Node标签属性传入它们的构造函数</li><li>将这个封装好的子叶SqlNode加入contents</li></ol></li></ol><h2 id="DynamicContext类"><a href="#DynamicContext类" class="headerlink" title="DynamicContext类"></a>DynamicContext类</h2><p>DynamicContext用于封装请求参数，即我们查询数据库的实体类或基本数据类型等，该参数会以Object类型以DefaultSqlSession-&gt;<br>Exector-&gt;DynamicContix的流程传入;</p><p>而它最终应用于先前的各种SqlNode的apply方法中，以达到各种参数的获取，表达式的实现等；</p><p>下面对DynamicContext进行解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicContext</span> &#123;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PARAMETER_OBJECT_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;_parameter&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DATABASE_ID_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;_databaseId&quot;</span>;<br>  <span class="hljs-comment">//注册存取器，这个一个OGNL类库的功能，如下案例，它注册了一个ContextAccessor存取器，当OGNL解析表达式解析出ContextMap类时，则会用存取器的get方法来获取数据，达到自定义的作用</span><br>  <span class="hljs-keyword">static</span> &#123;<br>    OgnlRuntime.setPropertyAccessor(ContextMap.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextAccessor</span>());<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ContextMap bindings;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sqlBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">uniqueNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DynamicContext</span><span class="hljs-params">(Configuration configuration, Object parameterObject)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *若参数类型不是map类型，则将参数存入ContextMap的MetaObject成员中</span><br><span class="hljs-comment">     *contextMap是存储参数的容器，它分别用继承自HashMap的map空间和自身的MetaObject成员来存储请求参数</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (parameterObject != <span class="hljs-literal">null</span> &amp;&amp; !(parameterObject <span class="hljs-keyword">instanceof</span> Map)) &#123;<br>      <span class="hljs-comment">//初始化metaObject</span><br>      <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaObject</span> <span class="hljs-operator">=</span> configuration.newMetaObject(parameterObject);<br>      bindings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextMap</span>(metaObject);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      bindings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextMap</span>(<span class="hljs-literal">null</span>);<br>    &#125;<br>    bindings.put(PARAMETER_OBJECT_KEY, parameterObject);<br>    bindings.put(DATABASE_ID_KEY, configuration.getDatabaseId());<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt; &#123;<br>    <span class="hljs-comment">//MetaObject是mybatis通过反射封装的实体工具类，</span><br>    <span class="hljs-comment">//它封装了请求参数对象的反射方法，类等信息以便后续通过反射获取get方法获取参数类的值</span><br>    <span class="hljs-keyword">private</span> MetaObject parameterMetaObject;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ContextMap</span><span class="hljs-params">(MetaObject parameterMetaObject)</span> &#123;<br>      <span class="hljs-built_in">this</span>.parameterMetaObject = parameterMetaObject;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">strKey</span> <span class="hljs-operator">=</span> (String) key;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">super</span>.containsKey(strKey)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.get(strKey);<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (parameterMetaObject != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// issue #61 do not modify the context when reading</span><br>        <span class="hljs-keyword">return</span> parameterMetaObject.getValue(strKey);<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextAccessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PropertyAccessor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProperty</span><span class="hljs-params">(Map context, Object target, Object name)</span><br>        <span class="hljs-keyword">throws</span> OgnlException &#123;<br>      <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> (Map) target;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> map.get(name);<br>      <span class="hljs-keyword">if</span> (map.containsKey(name) || result != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> result;<br>      &#125;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">parameterObject</span> <span class="hljs-operator">=</span> map.get(PARAMETER_OBJECT_KEY);<br>      <span class="hljs-keyword">if</span> (parameterObject <span class="hljs-keyword">instanceof</span> Map) &#123;<br>        <span class="hljs-keyword">return</span> ((Map)parameterObject).get(name);<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用流程：</p><ol><li>在映射参数之前，程序会初始化DynamicContext，并在构造函数中，为其成员ContextMap注入MetaObject；MetaObject封装请求参数param对象相关的反射信息</li><li>程序通过组合模式的树状结构，逐层向下调用apply方法，并传入DynamicContext</li><li>当有SqlNode需要映射<code>#&#123;&#125;</code>符号中的参数时，会调用对应的TokenParser方法从Ognl表达式中取值;</li><li>由于我们先前注册过ContextAccessor存取器，因此会Ognl表达式会优先通过存取器从ContextMap取值</li><li>最后通过DynamicContext的appendSql方法来拼接对应的#{}符号(这个符号会在特定方法中别替换，具体看GenericTokenParser.parse(<br>text)方法)，拼接替换的sql都会存在成员变量sqlBuilder中</li><li>此外DynamicContext也是实现动态sql的核心，实际上拼接映射参数和动态同时进行，例如TextSqlNode负责拼接#{}参数，而ifSqlNode负责动态sql根据不同的sqlNode实现不同的功能；</li></ol><h1 id="Sql封装"><a href="#Sql封装" class="headerlink" title="Sql封装"></a>Sql封装</h1><p>Sql封装分为两部分，分别为表达式封装，参数封装，以及Sql封装</p><ul><li>表达式封装，参考下一节“表达式#{}操作”</li><li>Sql封装，参考上一节“动态Mapper分析”以及”DynamicContext类“</li><li>封装容器为SqlSource</li></ul><p><strong>SqlSource最终返回BoundSql，而里面的成员数据也均赋值于BoundSql，BoundSql参与后续的Sql语句执行</strong></p><h2 id="SqlSource分析"><a href="#SqlSource分析" class="headerlink" title="SqlSource分析"></a>SqlSource分析</h2><p>实际上在XMLStatementBuilder篇章就讲了SqlSource的部分功能，它用于封装已成树状结构的SqlNode；</p><p>SqlSource分为三种DynamicSqlSource，RawSqlSource，StaticSqlSource，下面逐一分析</p><ul><li>*SqlSource有两个主要成员，初始化构造函数，和getBoundSql()方法<ul><li>以上三种sqlSource的<strong>初始化即是封装</strong>，封装过程在mapper配置加载阶段</li><li><u>getBoundSql()方法在执行sql操作时被调用</u></li></ul></li></ul><h3 id="DynamicSqlSource"><a href="#DynamicSqlSource" class="headerlink" title="DynamicSqlSource"></a>DynamicSqlSource</h3><p>顾名思义，当xml中的sql语句为动态sql时，默认用DynamicSqlSource封装数据，（sql中有${}也用该方案封装)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicSqlSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlSource</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Configuration configuration;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SqlNode rootSqlNode;<br><span class="hljs-comment">//在配置加载阶段执行</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DynamicSqlSource</span><span class="hljs-params">(Configuration configuration, SqlNode rootSqlNode)</span> &#123;<br>    <span class="hljs-built_in">this</span>.configuration = configuration;<br>    <span class="hljs-built_in">this</span>.rootSqlNode = rootSqlNode;<br>  &#125;<br><br>    <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> BoundSql <span class="hljs-title function_">getBoundSql</span><span class="hljs-params">(Object parameterObject)</span> &#123;<br>    <span class="hljs-type">DynamicContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicContext</span>(configuration, parameterObject);<br>      <span class="hljs-comment">//解析动态sql</span><br>    rootSqlNode.apply(context);<br>      <span class="hljs-comment">//表达式封装工具类初始化，用于表达式封装，将请求中的#&#123;&#125;标识替换为？，并生成parameterMapping</span><br>    <span class="hljs-type">SqlSourceBuilder</span> <span class="hljs-variable">sqlSourceParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSourceBuilder</span>(configuration);<br>    Class&lt;?&gt; parameterType = parameterObject == <span class="hljs-literal">null</span> ? Object.class : parameterObject.getClass();<br>      <span class="hljs-comment">//返回StaticSqlSource</span><br>    <span class="hljs-type">SqlSource</span> <span class="hljs-variable">sqlSource</span> <span class="hljs-operator">=</span> sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());<br>    <span class="hljs-type">BoundSql</span> <span class="hljs-variable">boundSql</span> <span class="hljs-operator">=</span> sqlSource.getBoundSql(parameterObject);<br>      <span class="hljs-comment">//为bondSql注入请求参数</span><br>    context.getBindings().forEach(boundSql::setAdditionalParameter);<br>    <span class="hljs-keyword">return</span> boundSql;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="RawSqlSource"><a href="#RawSqlSource" class="headerlink" title="RawSqlSource"></a>RawSqlSource</h3><p>当mapper文件里的sql语句时文本时则使用RawSqlSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RawSqlSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlSource</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SqlSource sqlSource;<br><span class="hljs-comment">//初始化步骤1</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">RawSqlSource</span><span class="hljs-params">(Configuration configuration, SqlNode rootSqlNode, Class&lt;?&gt; parameterType)</span> &#123;<br>    <span class="hljs-built_in">this</span>(configuration, getSql(configuration, rootSqlNode), parameterType);<br>  &#125;<br><span class="hljs-comment">//初始化步骤3</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">RawSqlSource</span><span class="hljs-params">(Configuration configuration, String sql, Class&lt;?&gt; parameterType)</span> &#123;<br>      <span class="hljs-comment">//调用SqlSourceBuilder表达式封装工具类封装默认配置</span><br>    <span class="hljs-type">SqlSourceBuilder</span> <span class="hljs-variable">sqlSourceParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSourceBuilder</span>(configuration);<br>    Class&lt;?&gt; clazz = parameterType == <span class="hljs-literal">null</span> ? Object.class : parameterType;<br>      <span class="hljs-comment">//此处返回的是staticSqlsource</span><br>    sqlSource = sqlSourceParser.parse(sql, clazz, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;());<br>  &#125;<br><span class="hljs-comment">//初始化步骤2 初始化DynamicContext执行动态sql拼接 </span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSql</span><span class="hljs-params">(Configuration configuration, SqlNode rootSqlNode)</span> &#123;<br>    <span class="hljs-type">DynamicContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicContext</span>(configuration, <span class="hljs-literal">null</span>);<br>    rootSqlNode.apply(context);<br>    <span class="hljs-keyword">return</span> context.getSql();<br>  &#125;<br><span class="hljs-comment">//调用staticSqlsource的getBoundSql新建boundSql并注入parameterObject</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> BoundSql <span class="hljs-title function_">getBoundSql</span><span class="hljs-params">(Object parameterObject)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSource.getBoundSql(parameterObject);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="StaticSqlSource"><a href="#StaticSqlSource" class="headerlink" title="StaticSqlSource"></a>StaticSqlSource</h3><p>已完成封装的sqlSource，以上两种最终都会封装到staticSqlSource中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticSqlSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlSource</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String sql;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;ParameterMapping&gt; parameterMappings;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Configuration configuration;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">StaticSqlSource</span><span class="hljs-params">(Configuration configuration, String sql)</span> &#123;<br>    <span class="hljs-built_in">this</span>(configuration, sql, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">StaticSqlSource</span><span class="hljs-params">(Configuration configuration, String sql, List&lt;ParameterMapping&gt; parameterMappings)</span> &#123;<br>    <span class="hljs-built_in">this</span>.sql = sql;<br>    <span class="hljs-built_in">this</span>.parameterMappings = parameterMappings;<br>    <span class="hljs-built_in">this</span>.configuration = configuration;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//注入请求参数</span><br>  <span class="hljs-keyword">public</span> BoundSql <span class="hljs-title function_">getBoundSql</span><span class="hljs-params">(Object parameterObject)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BoundSql</span>(configuration, sql, parameterMappings, parameterObject);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol><li>无论是DynamicSqlSource还是RawSqlSource，最终都会转化为StaticSqlSource执行getBoundSql方法获取boundSql；</li><li>DynamicSqlSource和RawSqlSource差异<ul><li>DynamicSqlSource动态sql部分在请求数据库时执行，而RawSqlSource的动态sql部分在mybatis组件加载时执行，因此DynamicSqlSource有性能损失</li></ul></li></ol><h1 id="表达式-操作"><a href="#表达式-操作" class="headerlink" title="表达式#{}操作"></a>表达式#{}操作</h1><ol><li>表达式封装位于SqlSourceBuilder类中，它会在Executor执行器执行时被调用</li><li>SqlSourceBuilder实际只是作为封装的启动类或初始化类，其主要操作通过成员内部类ParameterMappingTokenHandler执行</li><li>它返回一个StaticSqlSource</li></ol><h2 id="表达式解析（ParameterExpression）"><a href="#表达式解析（ParameterExpression）" class="headerlink" title="表达式解析（ParameterExpression）"></a>表达式解析（ParameterExpression）</h2><ul><li><p>已知Mybatis中通过#{表达式}来插入请求的参数，一般情况下我们仅仅插入单一的字符串值作为请求参数，但实际上mybatis还支持更多表达式功能；如下</p><ul><li><code>#&#123;age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler&#125;</code><br>：JavaType，JdbcType，和TypeHandle顾名思义用于指定java类型，jdbc类型和类型处理器（类型处理器需要自行实现）</li><li><code>#&#123;height,javaType=double,jdbcType=NUMERIC,numericScale=2&#125;</code>： numericScale用于指定小数点后面几位</li></ul></li><li><p>ParameterExpression时表达式的解析类同事也是解析后的数据封装类，它继承了HashMap以key-Value的形式存解析出来的表达式</p></li><li><p>表达式解析类通过ParameterExpression.java解析，具体分析如下</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.learn.mybatis;<span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2417552199605158680L</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ParameterExpression</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><span class="hljs-comment">//    public ParameterExpression(String expression) throws Exception &#123;</span><br><span class="hljs-comment">//        this.parse(expression);</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析表达式案例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testParamExpression</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; middleInitial, mode=OUT, jdbcType=STRUCT, jdbcTypeName=MY_TYPE, resultMap=departmentResultMap&quot;</span>;<br>        <span class="hljs-built_in">this</span>.parse(s);<br>        Set&lt;Entry&lt;String, String&gt;&gt; entries = <span class="hljs-built_in">this</span>.entrySet();<br>        Iterator&lt;Entry&lt;String, String&gt;&gt; iterator = entries.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Entry&lt;String, String&gt; next = iterator.next();<br>            System.out.println(<span class="hljs-string">&quot;key=&quot;</span> + next.getKey() + <span class="hljs-string">&quot;,value=&quot;</span> + next.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 表达式解析启动类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">(String expression)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.skipWS(expression, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (expression.charAt(p) == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>            <span class="hljs-built_in">this</span>.expression(expression, p + <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.property(expression, p);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">expression</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> left)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">match</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-type">int</span> right;<br>        <span class="hljs-keyword">for</span> (right = left + <span class="hljs-number">1</span>; match &gt; <span class="hljs-number">0</span>; ++right) &#123;<br>            <span class="hljs-keyword">if</span> (expression.charAt(right) == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                --match;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (expression.charAt(right) == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                ++match;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.put(<span class="hljs-string">&quot;expression&quot;</span>, expression.substring(left, right - <span class="hljs-number">1</span>));<br>        <span class="hljs-built_in">this</span>.jdbcTypeOpt(expression, right);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *从left左边界快开始，向</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expression 表达式</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left  左边界</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">property</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> left)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (left &lt; expression.length()) &#123;<br>            <span class="hljs-comment">//找到有边界</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.skipUntil(expression, left, <span class="hljs-string">&quot;,:&quot;</span>);<br>            <span class="hljs-comment">//截取propoty并插值</span><br>            <span class="hljs-built_in">this</span>.put(<span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-built_in">this</span>.trimmedStr(expression, left, right));<br>            <span class="hljs-built_in">this</span>.jdbcTypeOpt(expression, right);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 识别空格分开的表达式，当有一个空格时，</span><br><span class="hljs-comment">     * 返回这个空格位置，</span><br><span class="hljs-comment">     * 以便后续截取空格前的表达式</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expression</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">skipWS</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> p; i &lt; expression.length(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (expression.charAt(i) &gt; <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> expression.length();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 寻找endChars在表达式中的位置，</span><br><span class="hljs-comment">     * 用于找到一个表达式的右边界</span><br><span class="hljs-comment">     * 返回右边界位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expression 表达式</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p 查询起始位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> endChars 需要找的字符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">skipUntil</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> p, String endChars)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> p; i &lt; expression.length(); ++i) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> expression.charAt(i);<br>            <span class="hljs-keyword">if</span> (endChars.indexOf(c) &gt; -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> expression.length();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jdbcTypeOpt</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> p)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        p = <span class="hljs-built_in">this</span>.skipWS(expression, p);<br>        <span class="hljs-keyword">if</span> (p &lt; expression.length()) &#123;<br>                <span class="hljs-keyword">if</span> (expression.charAt(p) == <span class="hljs-string">&#x27;:&#x27;</span>) &#123;<br>                <span class="hljs-built_in">this</span>.jdbcType(expression, p + <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (expression.charAt(p) != <span class="hljs-string">&#x27;,&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;Parsing error in &#123;&quot;</span> + expression + <span class="hljs-string">&quot;&#125; in position &quot;</span> + p);<br>                &#125;<br><br>                <span class="hljs-built_in">this</span>.option(expression, p + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当有jdbcType属性时，插入这个属性</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expression</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jdbcType</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> p)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.skipWS(expression, p);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.skipUntil(expression, left, <span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-keyword">if</span> (right &gt; left) &#123;<br>            <span class="hljs-built_in">this</span>.put(<span class="hljs-string">&quot;jdbcType&quot;</span>, <span class="hljs-built_in">this</span>.trimmedStr(expression, left, right));<br>            <span class="hljs-built_in">this</span>.option(expression, right + <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;Parsing error in &#123;&quot;</span> + expression + <span class="hljs-string">&quot;&#125; in position &quot;</span> + p);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过递归的方式识别“=”两别的key和value，将表达式中的值插入map</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expression</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">option</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> p)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.skipWS(expression, p);<br>        <span class="hljs-keyword">if</span> (left &lt; expression.length()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.skipUntil(expression, left, <span class="hljs-string">&quot;=&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.trimmedStr(expression, left, right);<br>            left = right + <span class="hljs-number">1</span>;<br>            right = <span class="hljs-built_in">this</span>.skipUntil(expression, left, <span class="hljs-string">&quot;,&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.trimmedStr(expression, left, right);<br>            <span class="hljs-built_in">this</span>.put(name, value);<br>            <span class="hljs-built_in">this</span>.option(expression, right + <span class="hljs-number">1</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 截取字符串，从star到end</span><br><span class="hljs-comment">     * 倘若star或者end有空格，则向前或向后移一位</span><br><span class="hljs-comment">     * 便于保证截出来的值不带空格</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> start</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">trimmedStr</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-keyword">while</span> (str.charAt(start) &lt;= <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            ++start;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (str.charAt(end - <span class="hljs-number">1</span>) &lt;= <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            --end;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> start &gt;= end ? <span class="hljs-string">&quot;&quot;</span> : str.substring(start, end);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="表达式封装（ParameterMappingTokenHandler）"><a href="#表达式封装（ParameterMappingTokenHandler）" class="headerlink" title="表达式封装（ParameterMappingTokenHandler）"></a>表达式封装（ParameterMappingTokenHandler）</h2><h3 id="表达式识别"><a href="#表达式识别" class="headerlink" title="表达式识别"></a>表达式识别</h3><p>表达式识别通过工具类GenericTokenParser来实现，该工具类会根据参数识别需要的表达式，并自动调用handler中的handleToken()<br>方法处理表达式</p><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\ParameterMapping.png" alt="image-20210129144106148"></p><h3 id="表达式封装"><a href="#表达式封装" class="headerlink" title="表达式封装"></a>表达式封装</h3><p>该方法会将表达式替换为？以便后续sql注入，具体的封装在buildParameterMapping()中</p><p><img src="D:\Andrew_pro\blog\upload_image\mybatis\handleToken.png" alt="image-20210129145643124"></p><p>方法具体内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ParameterMapping <span class="hljs-title function_">buildParameterMapping</span><span class="hljs-params">(String content)</span> &#123;<br>  <span class="hljs-comment">//上一节已分析过，会返回表达式所有内容的map集合  </span><br>  Map&lt;String, String&gt; propertiesMap = parseParameterMapping(content);<br>    <span class="hljs-comment">//注意，这个property是表达式的值即#&#123;value&#125;，不是参数变量里面的值</span><br>  <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> propertiesMap.get(<span class="hljs-string">&quot;property&quot;</span>);<br>  Class&lt;?&gt; propertyType;<br>    <span class="hljs-comment">//该步骤尝试从各种方案中获取 参数的类型</span><br>  <span class="hljs-keyword">if</span> (metaParameters.hasGetter(property)) &#123; <span class="hljs-comment">// issue #448 get type from additional params</span><br>    propertyType = metaParameters.getGetterType(property);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterType)) &#123;<br>    propertyType = parameterType;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (JdbcType.CURSOR.name().equals(propertiesMap.get(<span class="hljs-string">&quot;jdbcType&quot;</span>))) &#123;<br>    propertyType = java.sql.ResultSet.class;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (property == <span class="hljs-literal">null</span> || Map.class.isAssignableFrom(parameterType)) &#123;<br>    propertyType = Object.class;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-type">MetaClass</span> <span class="hljs-variable">metaClass</span> <span class="hljs-operator">=</span> MetaClass.forClass(parameterType, configuration.getReflectorFactory());<br>    <span class="hljs-keyword">if</span> (metaClass.hasGetter(property)) &#123;<br>      propertyType = metaClass.getGetterType(property);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      propertyType = Object.class;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//初始化ParameterMapping，通过它的内部类构造者builder封装数据，这里的propertyType参数将用于指定“TypeHandler”</span><br>  <span class="hljs-comment">//从集合遍历通过if-else方法块逐步封装  </span><br>  ParameterMapping.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterMapping</span>.Builder(configuration, property, propertyType);<br>  Class&lt;?&gt; javaType = propertyType;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">typeHandlerAlias</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : propertiesMap.entrySet()) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> entry.getKey();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;javaType&quot;</span>.equals(name)) &#123;<br>      javaType = resolveClass(value);<br>      builder.javaType(javaType);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;jdbcType&quot;</span>.equals(name)) &#123;<br>      builder.jdbcType(resolveJdbcType(value));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;mode&quot;</span>.equals(name)) &#123;<br>      builder.mode(resolveParameterMode(value));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;numericScale&quot;</span>.equals(name)) &#123;<br>      builder.numericScale(Integer.valueOf(value));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;resultMap&quot;</span>.equals(name)) &#123;<br>      builder.resultMapId(value);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;typeHandler&quot;</span>.equals(name)) &#123;<br>      typeHandlerAlias = value;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;jdbcTypeName&quot;</span>.equals(name)) &#123;<br>      builder.jdbcTypeName(value);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;property&quot;</span>.equals(name)) &#123;<br>      <span class="hljs-comment">// Do Nothing</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;expression&quot;</span>.equals(name)) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Expression based parameters are not supported yet&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;An invalid property &#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27; was found in mapping #&#123;&quot;</span> + content + <span class="hljs-string">&quot;&#125;.  Valid properties are &quot;</span> + PARAMETER_PROPERTIES);<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//当我们实现类型转换器时，也从这里加入</span><br>  <span class="hljs-keyword">if</span> (typeHandlerAlias != <span class="hljs-literal">null</span>) &#123;<br>    builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));<br>  &#125;<br>  <span class="hljs-keyword">return</span> builder.build();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：ParameterMapping从始至终中只存放了查询表达式’#{value}‘，类型，类型转换器等特性，并未封装请求参数的值</strong></p><h1 id="Sql执行"><a href="#Sql执行" class="headerlink" title="Sql执行"></a>Sql执行</h1><p>通过mybatis主架构得知，mybatis的具体语句执行需要通过执行器Executor语句执行</p><p>以查询为例，以下是SimpleExecutor中调用查询方法的代码,可见已经传入了执行sql所需要的所有变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">doQuery</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> ms.getConfiguration();<br>      <span class="hljs-comment">//1.初始化StatementHandler</span><br>      <span class="hljs-type">StatementHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);<br>      <span class="hljs-comment">//2.生成jdbc的Statement对象</span><br>      stmt = prepareStatement(handler, ms.getStatementLog());<br>      <span class="hljs-comment">//5.执行statement</span><br>      <span class="hljs-keyword">return</span> handler.query(stmt, resultHandler);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      closeStatement(stmt);<br>    &#125;<br>  &#125;<br><span class="hljs-comment">//3.方法可见是通过StatementHandler利用Connection对象生成</span><br><span class="hljs-keyword">private</span> Statement <span class="hljs-title function_">prepareStatement</span><span class="hljs-params">(StatementHandler handler, Log statementLog)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    Statement stmt;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> getConnection(statementLog);<br>    stmt = handler.prepare(connection, transaction.getTimeout());<br>    <span class="hljs-comment">//4.此步骤为statement参数赋值，即通过jdbc函数，为sql中的？赋值</span><br>    handler.parameterize(stmt);<br>    <span class="hljs-keyword">return</span> stmt;<br>  &#125;<br></code></pre></td></tr></table></figure><p>可见sql的执行过程在handler类的辅助下变得简单，接下来具体分析这个handler类</p><h2 id="StatementHandler-statement辅助类"><a href="#StatementHandler-statement辅助类" class="headerlink" title="StatementHandler(statement辅助类)"></a>StatementHandler(statement辅助类)</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>StatementHandler<strong>初始化</strong>通过Configuration对象的newStatementHandler()实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> StatementHandler <span class="hljs-title function_">newStatementHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-comment">//初始化一个RoutingStatementHandler</span><br>    <span class="hljs-type">StatementHandler</span> <span class="hljs-variable">statementHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoutingStatementHandler</span>(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);<br>    <span class="hljs-comment">//拦截器相关逻辑</span><br>    statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);<br>    <span class="hljs-keyword">return</span> statementHandler;<br>  &#125;<br></code></pre></td></tr></table></figure><p>可见核心是RoutingStatementHandler类的初始化</p><h3 id="RoutingStatementHandler"><a href="#RoutingStatementHandler" class="headerlink" title="RoutingStatementHandler"></a>RoutingStatementHandler</h3><p>观察这个类不难发现其实他是一个任务委派者，而真正执行的是下述代码中的三种Handler。</p><ol><li>SimpleStatementHandler</li><li>PreparedStatementHandler</li><li>CallableStatementHandler</li></ol><p>委派模式的核心是成员变量delegate（delegete将指向具体的委派者），并且委派者同被委派者们都实现了StatementHandler接口，因此需要实现接口中的方法，而这些方法实际的实现都是通过delegate来调用对应的同名方法；具体参考下例中的委派案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//成员变量delegate</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StatementHandler delegate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">RoutingStatementHandler</span><span class="hljs-params">(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-comment">//通过StatementType判断需要实现的StatementHandler，mybatsi默认使用PreparedStatementHandler，可以在xml中自行定义各种Handler</span><br>    <span class="hljs-keyword">switch</span> (ms.getStatementType()) &#123;<br>      <span class="hljs-keyword">case</span> STATEMENT:<br>        delegate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> PREPARED:<br>        delegate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreparedStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> CALLABLE:<br>        delegate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CallableStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Unknown statement type: &quot;</span> + ms.getStatementType());<br>    &#125;<br>  &#125;<br><span class="hljs-comment">//委派案例</span><br><span class="hljs-keyword">public</span> ParameterHandler <span class="hljs-title function_">getParameterHandler</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.getParameterHandler();<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="PreparedStatementHandler"><a href="#PreparedStatementHandler" class="headerlink" title="PreparedStatementHandler"></a>PreparedStatementHandler</h3><p>根据上述SimpleExecutor的doQuary()方法及后续分析得知，jdbc的api调用分为一下几个阶段,通过以下代码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Clinton Begin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreparedStatementHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseStatementHandler</span> &#123;<br><span class="hljs-comment">//1.调用父类构造函数初始化</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PreparedStatementHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-built_in">super</span>(executor, mappedStatement, parameter, rowBounds, resultHandler, boundSql);<br>  &#125;<br><span class="hljs-comment">//4.调用statement执行sql语句，并通过resultSetHandler进行结果集映射</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(Statement statement, ResultHandler resultHandler)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> (PreparedStatement) statement;<br>    ps.execute();<br>    <span class="hljs-keyword">return</span> resultSetHandler.handleResultSets(ps);<br>  &#125;<br><span class="hljs-comment">//2.通过connector和sql初始化PreparedStatement对象</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> Statement <span class="hljs-title function_">instantiateStatement</span><span class="hljs-params">(Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>      <span class="hljs-comment">//sql可以从之前封装的boundSql中获取</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> boundSql.getSql();<br>    <span class="hljs-keyword">if</span> (mappedStatement.getKeyGenerator() <span class="hljs-keyword">instanceof</span> Jdbc3KeyGenerator) &#123;<br>      String[] keyColumnNames = mappedStatement.getKeyColumns();<br>      <span class="hljs-keyword">if</span> (keyColumnNames == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> connection.prepareStatement(sql, keyColumnNames);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mappedStatement.getResultSetType() == ResultSetType.DEFAULT) &#123;<br>      <span class="hljs-keyword">return</span> connection.prepareStatement(sql);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> connection.prepareStatement(sql, mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//3. 调用parameterHandler未statement中的？分别插入值</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterize</span><span class="hljs-params">(Statement statement)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    parameterHandler.setParameters((PreparedStatement) statement);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上述代码有两个疑问</p><p>parameterHandler和resultSetHandler这两个处理器来自何处？</p><p>它们在PreparedStatementHandler的父类BaseStatementHandler构造函数中处生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-title function_">BaseStatementHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-built_in">this</span>.configuration = mappedStatement.getConfiguration();<br>    <span class="hljs-built_in">this</span>.executor = executor;<br>    <span class="hljs-built_in">this</span>.mappedStatement = mappedStatement;<br>    <span class="hljs-built_in">this</span>.rowBounds = rowBounds;<br><br>    <span class="hljs-built_in">this</span>.typeHandlerRegistry = configuration.getTypeHandlerRegistry();<br>    <span class="hljs-built_in">this</span>.objectFactory = configuration.getObjectFactory();<br><br>    <span class="hljs-keyword">if</span> (boundSql == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// issue #435, get the key before calculating the statement</span><br>      generateKeys(parameterObject);<br>      boundSql = mappedStatement.getBoundSql(parameterObject);<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.boundSql = boundSql;<br><span class="hljs-comment">//初始化参数处理器 提供了boundSql(内涵parameterMapping)和parameterObject(请求参数对象)</span><br>    <span class="hljs-built_in">this</span>.parameterHandler = configuration.newParameterHandler(mappedStatement, parameterObject, boundSql);<br>    <span class="hljs-comment">//初始化结果集处理器</span><br>    <span class="hljs-built_in">this</span>.resultSetHandler = configuration.newResultSetHandler(executor, mappedStatement, rowBounds, parameterHandler, resultHandler, boundSql);<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="ParameterHandler"><a href="#ParameterHandler" class="headerlink" title="ParameterHandler"></a>ParameterHandler</h3><h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><p>ParameterHandler默认只有一种实现DefaultParameterHandler，它在configuration对象的方法中创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ParameterHandler <span class="hljs-title function_">newParameterHandler</span><span class="hljs-params">(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-type">ParameterHandler</span> <span class="hljs-variable">parameterHandler</span> <span class="hljs-operator">=</span> mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);<br>    <span class="hljs-comment">//拦截器</span><br>    parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);<br>    <span class="hljs-keyword">return</span> parameterHandler;<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="注入参数"><a href="#注入参数" class="headerlink" title="注入参数"></a>注入参数</h4><p>核心方法分析如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameters</span><span class="hljs-params">(PreparedStatement ps)</span> &#123;<br>    ErrorContext.instance().activity(<span class="hljs-string">&quot;setting parameters&quot;</span>).object(mappedStatement.getParameterMap().getId());<br>      <span class="hljs-comment">//1.获取parameterMappings</span><br>    List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();<br>    <span class="hljs-keyword">if</span> (parameterMappings != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//2.遍历parameterMappings然后解析parameterMapping，该类在ParameterMappingTokenHandler处已分析过</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameterMappings.size(); i++) &#123;<br>        <span class="hljs-type">ParameterMapping</span> <span class="hljs-variable">parameterMapping</span> <span class="hljs-operator">=</span> parameterMappings.get(i);<br>        <span class="hljs-keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;<br>          Object value;<br>          <span class="hljs-type">String</span> <span class="hljs-variable">propertyName</span> <span class="hljs-operator">=</span> parameterMapping.getProperty();<br>            <span class="hljs-comment">//3.通过xml中的#&#123;value&#125;表达式获取parameterObject中的对象</span><br>          <span class="hljs-keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123; <span class="hljs-comment">// issue #448 ask first for additional params</span><br>            value = boundSql.getAdditionalParameter(propertyName);<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parameterObject == <span class="hljs-literal">null</span>) &#123;<br>            value = <span class="hljs-literal">null</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;<br>            value = parameterObject;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-comment">//4.mybatis默认用自己实现的表达式解析类MetaObject来实现，它的实现目的类似OGNL的API，通过分析OGNL表达式来获取对象</span><br>            <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaObject</span> <span class="hljs-operator">=</span> configuration.newMetaObject(parameterObject);<br>            value = metaObject.getValue(propertyName);<br>          &#125;<br>            <span class="hljs-comment">//5.获取TypeHandler，TypeHandler通过</span><br>          <span class="hljs-type">TypeHandler</span> <span class="hljs-variable">typeHandler</span> <span class="hljs-operator">=</span> parameterMapping.getTypeHandler();<br>          <span class="hljs-type">JdbcType</span> <span class="hljs-variable">jdbcType</span> <span class="hljs-operator">=</span> parameterMapping.getJdbcType();<br>          <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span> &amp;&amp; jdbcType == <span class="hljs-literal">null</span>) &#123;<br>            jdbcType = configuration.getJdbcTypeForNull();<br>          &#125;<br>          <span class="hljs-keyword">try</span> &#123;<br>              <br>            typeHandler.setParameter(ps, i + <span class="hljs-number">1</span>, value, jdbcType);<br>          &#125; <span class="hljs-keyword">catch</span> (TypeException | SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;Could not set parameters for mapping: &quot;</span> + parameterMapping + <span class="hljs-string">&quot;. Cause: &quot;</span> + e, e);<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>可以看到ParameterHandler<strong>仅仅是通过#{value}表达式获取到了实际请求参数中的值，并解析了ParameterMapping中配置</strong><br>，如jdbc类型等；而实际为Statement插入请求参数则需要TypeHandler；</p><h2 id="TypeHandler"><a href="#TypeHandler" class="headerlink" title="TypeHandler"></a>TypeHandler</h2><p>mybatis默认为这个接口实现了N多种实现类（实现了大部分传统数据类型），并初始化了它们，但实际用哪种需要用户指定。例如在表达式中写入<br><code>#&#123;value,javaType=&quot;int&quot;&#125;</code>;<strong>当用户未指定时则默认使用实现类UnknownTypeHandler</strong>，指定流程在ParameterMapping对象构造时完成；</p><p>TypeHandler和它的子类基于模板方法模式实现</p><h3 id="BaseTypeHandler（模板方法类）"><a href="#BaseTypeHandler（模板方法类）" class="headerlink" title="BaseTypeHandler（模板方法类）"></a>BaseTypeHandler（模板方法类）</h3><p>TypeHandler有一个抽象类BaseTypeHandler，它实现了setParameter方法，该方法将作为模板成为TypeHandler的该方法的唯一实现；相应的模板方法中自然会调用元素方法（由具体的TypeHandler实现类实现，而这些元素方法根据不的实现类实现了不同的功能，如：本例中根据情况对不同类型的请求参数为Statement对象赋值）；以上是对模板方法模式的描述</p><p>模板方法代码如下，仅仅只有几个判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (parameter == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (jdbcType == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;JDBC requires that the JdbcType must be specified for all nullable parameters.&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">try</span> &#123;<br>        ps.setNull(i, jdbcType.TYPE_CODE);<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;Error setting null for parameter #&quot;</span> + i + <span class="hljs-string">&quot; with JdbcType &quot;</span> + jdbcType + <span class="hljs-string">&quot; . &quot;</span><br>              + <span class="hljs-string">&quot;Try setting a different JdbcType for this parameter or a different jdbcTypeForNull configuration property. &quot;</span><br>              + <span class="hljs-string">&quot;Cause: &quot;</span> + e, e);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">//参数部位null执行该方法</span><br>        setNonNullParameter(ps, i, parameter, jdbcType);<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;Error setting non null for parameter #&quot;</span> + i + <span class="hljs-string">&quot; with JdbcType &quot;</span> + jdbcType + <span class="hljs-string">&quot; . &quot;</span><br>              + <span class="hljs-string">&quot;Try setting a different JdbcType for this parameter or a different configuration property. &quot;</span><br>              + <span class="hljs-string">&quot;Cause: &quot;</span> + e, e);<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="UnknownTypeHandler-默认Handler"><a href="#UnknownTypeHandler-默认Handler" class="headerlink" title="UnknownTypeHandler(默认Handler)"></a>UnknownTypeHandler(默认Handler)</h3><p>作为默认实现，当不知道或没有请求参数类型时，使用该Handler；它实际是一个路由，用来动态发现传入的数据是什么类型</p><p>有一个核心变量<strong>typeHandlerRegistrySupplier 保存了所有基本类型Handler的map集合</strong>（实际这些集合存储在TypeHandlerRegistry类中）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnknownTypeHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTypeHandler</span>&lt;Object&gt; &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectTypeHandler</span> <span class="hljs-variable">OBJECT_TYPE_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectTypeHandler</span>();<br>  <span class="hljs-comment">// TODO Rename to &#x27;configuration&#x27; after removing the &#x27;configuration&#x27; property(deprecated property) on parent class</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Configuration config;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Supplier&lt;TypeHandlerRegistry&gt; typeHandlerRegistrySupplier;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnknownTypeHandler</span><span class="hljs-params">(Configuration configuration)</span> &#123;<br>    <span class="hljs-built_in">this</span>.config = configuration;<br>    <span class="hljs-built_in">this</span>.typeHandlerRegistrySupplier = configuration::getTypeHandlerRegistry;<br>  &#125;<br>    <span class="hljs-comment">//通过setNonNullParameter()启动查询</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, Object parameter, JdbcType jdbcType)</span><br>      <span class="hljs-keyword">throws</span> SQLException &#123;<br>      <span class="hljs-comment">//动态发现</span><br>    <span class="hljs-type">TypeHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> resolveTypeHandler(parameter, jdbcType);<br>      <span class="hljs-comment">//用发现的Handler的setParameter方法为statement插入参数和类型</span><br>    handler.setParameter(ps, i, parameter, jdbcType);<br>  &#125;<br>    <span class="hljs-comment">//动态发现方法</span><br> <span class="hljs-keyword">private</span> TypeHandler&lt;?&gt; resolveTypeHandler(Object parameter, JdbcType jdbcType) &#123;<br>    TypeHandler&lt;?&gt; handler;<br>    <span class="hljs-keyword">if</span> (parameter == <span class="hljs-literal">null</span>) &#123;<br>      handler = OBJECT_TYPE_HANDLER;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//获取TypeHandlerRegistry对象，并调用getTypeHandler获取handler</span><br>      handler = typeHandlerRegistrySupplier.get().getTypeHandler(parameter.getClass(), jdbcType);<br>      <span class="hljs-comment">// check if handler is null (issue #270)</span><br>      <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span> || handler <span class="hljs-keyword">instanceof</span> UnknownTypeHandler) &#123;<br>        handler = OBJECT_TYPE_HANDLER;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> handler;<br>  &#125;<br></code></pre></td></tr></table></figure><p>篇幅限制不介绍TypeHandlerRegistry类和getTypeHandler()方法了，简单说明一下</p><ul><li>TypeHandlerRegistry注册了所有的TypeHandler并通过Map集合管理，key为对象Type类型，value为</li><li>getTypeHandler（）具体操作分以下几步</li></ul><ol><li>根据要注入的parameter对象的反射类型，从集合中获取对应的jdbcTypeHandler的map（注意，是map）</li><li>如果有jdbc类型设置则从这个map中获取，如果没有则根据要注入的parameter对象的类型从map中获取</li></ol><p>下述代码是实际handler执行的statement参数的设置代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, String parameter, JdbcType jdbcType)</span><br>      <span class="hljs-keyword">throws</span> SQLException &#123;<br>    ps.setString(i, parameter);<br>  &#125;<br></code></pre></td></tr></table></figure><h1 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h1><h2 id="表达式识别-GenericTokenParser"><a href="#表达式识别-GenericTokenParser" class="headerlink" title="表达式识别(GenericTokenParser)"></a>表达式识别(GenericTokenParser)</h2><p>表达式工具类只有一个方法，大致逻辑有三步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericTokenParser</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String openToken;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String closeToken;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TokenHandler handler;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">GenericTokenParser</span><span class="hljs-params">(String openToken, String closeToken, TokenHandler handler)</span> &#123;<br>    <span class="hljs-built_in">this</span>.openToken = openToken;<br>    <span class="hljs-built_in">this</span>.closeToken = closeToken;<br>    <span class="hljs-built_in">this</span>.handler = handler;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">parse</span><span class="hljs-params">(String text)</span> &#123;<br>   <span class="hljs-comment">//通过openToken和closeToken识别text中所有的表达式 </span><br>   <span class="hljs-comment">//    for 识别出来的表达式</span><br>   <span class="hljs-comment">// 调用handler的handleToken(表达式)方法处理识别出来的表达式</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>表达式调用逻辑可参考<a href="ParameterMappingTokenHandler">ParameterMappingTokenHandler</a></p><h2 id="参数处理类（TypeHandler）"><a href="#参数处理类（TypeHandler）" class="headerlink" title="参数处理类（TypeHandler）"></a>参数处理类（TypeHandler）</h2><p>TypeHandler用于辅助注入请求参数并指定jdbc的type类型</p><h3 id="类型注册中心（TypeHandlerRegistry）"><a href="#类型注册中心（TypeHandlerRegistry）" class="headerlink" title="类型注册中心（TypeHandlerRegistry）"></a>类型注册中心（TypeHandlerRegistry）</h3><ul><li>初始化</li></ul><p>TypeHandlerRegistry跟随configuration对象生成，作为它的成员变量伴随configuration终生</p><ul><li>主要成员</li></ul><p><code>private final Map&lt;Type, Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt;&gt; typeHandlerMap = new ConcurrentHashMap&lt;&gt;();</code><br>：基于两个map实现，由于可能发生一个java类型对应多个jdbc类型，如在mybatis中字符串可以转化为varchar，clob，char…等类型，因此需要第二个map集合用来映射可能带jdbc类型</p><ul><li>主要方法：注册handler</li></ul><p>向typeHandlerMap集合放置数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Type javaType, JdbcType jdbcType, TypeHandler&lt;?&gt; handler)</span> &#123;<br>    <span class="hljs-keyword">if</span> (javaType != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//查询是否已有相关javatype对应map数据</span><br>      Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt; map = typeHandlerMap.get(javaType);<br>        <span class="hljs-comment">//没有则新建map</span><br>      <span class="hljs-keyword">if</span> (map == <span class="hljs-literal">null</span> || map == NULL_TYPE_HANDLER_MAP) &#123;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>      &#125;<br>        <span class="hljs-comment">//向子map存入jdbcType和handler</span><br>      map.put(jdbcType, handler);<br>        <span class="hljs-comment">//向父map存入javatype和子map</span><br>      typeHandlerMap.put(javaType, map);<br>    &#125;<br>    allTypeHandlersMap.put(handler.getClass(), handler);<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>[object Object]</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>orcal学习</title>
    <link href="/2019/10/24/Orcal/"/>
    <url>/2019/10/24/Orcal/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL语言类"><a href="#SQL语言类" class="headerlink" title="SQL语言类"></a>SQL语言类</h1><ol><li><p>DDL（数据定义语言）：  create（创建）    alter（修改）  drop（删除）————主要是对表操</p></li><li><p>DML（数据操作语言）：  insert(插入)    delete(删除)  update(更新)  select(查询) 、select……for update(查询更新)—-表中数据进行操作</p></li><li><p>DQL数据查询语言：基本语句、Order by 子句、Group by 分组语句</p></li><li><p>TCL（事务控制语言）：Commit(提交) 、Savepoint(保存) 、rollback(回滚)、</p></li><li><p>DCL（数据控制语言）：Grant(授权)、revoke(撤销)命令。</p></li></ol><h1 id="Orcal数据类型"><a href="#Orcal数据类型" class="headerlink" title="Orcal数据类型"></a>Orcal数据类型</h1><p>Char:  字符型（最大长度2000，定长、不足时以空格补充）rchar2:字符型 最大长度 4000，变长，实际长度由存储的数据长度决定（与存储的数据长度一致）</p><p>Number(x,y):既可以存储浮点型，也可以存储整形，x表示有效位数的最大位数，y表示小数位最大位数。</p><p>Date：存储时间类型。默认格式：dd–mm–yy:  天-月-年。</p><p>Clob:存储较大的文本，比如存储非结构化XML文档，最大为 4G</p><p>Blob:存储二进制对象，如图形、视频、声音等。</p><p>Long :存储较长字符串，最大长度为2G</p><h1 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h1><ol><li>创建表（同mysql）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">Creat talbe testTable(<br>字段名 类型 约束<br>)<br></code></pre></td></tr></table></figure><ol start="2"><li>修改表结构</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">添加字段<br><span class="hljs-keyword">Alter  table</span>  表名 <span class="hljs-keyword">add</span>( 字段名称  数据类型 )<br><span class="hljs-keyword">alter table</span> testTable(test_name varchar2(<span class="hljs-number">200</span>))<br>删除字段<br><span class="hljs-keyword">Alter table</span> 表名 <span class="hljs-keyword">set</span> unused <span class="hljs-keyword">column</span> 列名<br><span class="hljs-keyword">Alter table</span> testTable <span class="hljs-keyword">set</span> unused <span class="hljs-keyword">column</span> test_name<br>一般：不建议删除数据库中的列。<br>修改字段名<br><span class="hljs-keyword">Alter table</span> 表名 rename <span class="hljs-keyword">column</span> 旧列名 <span class="hljs-keyword">to</span> 新列名<br><span class="hljs-keyword">Alter table</span> testTable rename <span class="hljs-keyword">column</span> old_name <span class="hljs-keyword">to</span> new_name<br>修改字段属性<br><span class="hljs-keyword">Alter</span> talbe 表名 modify(字段名 要修改的字段属性)<br><span class="hljs-keyword">Alter table</span> testTable modify(test_name <span class="hljs-type">varchar</span>(<span class="hljs-number">3000</span>))<br>修改字段约束<br><span class="hljs-keyword">alter table</span> test_tb1 <span class="hljs-keyword">add constraint</span>  p_k <span class="hljs-keyword">primary key</span>(test_num)<span class="hljs-comment">-----主键约束</span><br><span class="hljs-keyword">alter table</span> test_tb1 <span class="hljs-keyword">add constraint</span> c_k <span class="hljs-keyword">check</span>(msg<span class="hljs-operator">=</span><span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">or</span> msg<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span>)<span class="hljs-comment">---检查约束</span><br><span class="hljs-keyword">Not null</span><span class="hljs-comment">----非空约束</span><br>修改表名<br>Rename  表名<span class="hljs-number">1</span> （旧名字）<span class="hljs-keyword">to</span> 表名<span class="hljs-number">2</span>（新名字）<br>例子：rename  test_tb <span class="hljs-keyword">to</span> test_tb1<br><br></code></pre></td></tr></table></figure><h1 id="DML操作"><a href="#DML操作" class="headerlink" title="DML操作"></a>DML操作</h1><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ul><li>简单案例</li></ul><p><code>Select *|列名|表达式 from 表名 where 条件 order by 列名 </code></p><p>1.* 表示所有列</p><p>2.列名可以选择若干个表中列名，各个表中列名用逗号分隔。</p><p>3.表达式可以是函数，列名，常数等组成表达式。</p><p>4.Where子句是查询的条件</p><p>5.Order by  要求在查询结果中排序，默认是升序。</p><p>查询方式类似mysql</p><ul><li><code>select * from emp order by sal desc（降序）</code></li><li><code>select * from emp order by sal （升序）</code></li><li><code>select * from emp order by sal asc(升序)</code></li></ul><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>插入：</p><p>Insert into 表名  values(所有字段对应值)；</p><p>Insert into 表名（字段名1,字段名称2….） values(对应字段值)</p><p>例子：<code>insert into test_tb1(test_num,msg) values(666,&#39;MSG values&#39;)</code></p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>Update 表名 set 字段名称 &#x3D;值 where 更新条件</p><p>例子：<code>update test_tb1 set msg=&#39;hello oracle&#39; where test_num=123</code></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul><li>Delete 表名 where 条件</li></ul><p>例子：<code>delete test_tb1 where msg=&#39;hello oracle&#39;</code></p><ul><li>Truncate–将表中数据一次性删除</li></ul><p>语法： truncate table 表名</p><p>Truncate和detele区别：</p><ol><li>truncate是DDL命令，删除数据不能回复；delete是DML命令，删除数据可以通过数据库的日志文件进行恢复。</li><li>如果一个表中记录很多，truncate相对delete速度快。</li></ol><p>警告：由于truncate命令比较危险，所有在实际开发中，truncate命令慎用。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>Oracle SQL 提供了用于执行特定操作的专用函数。这些函数大大增强了 SQL 语言的功能。函数可以接受零个或者多个输入参数，并返回一个输出结果。 Oracle 数据库中主要使用两种类型的函数： </p><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p>字符函数接受字符参数，这些参数可以是表中的列，也可以是一个字符串表达式。 </p><table><thead><tr><th>函数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>ASCII(X)</td><td><code>SELECT ASCII(&#39;a&#39;) FROM dual;</code></td><td>返回字符X的ASCII码</td></tr><tr><td>CONCAT(X,Y)</td><td><code>SELECT CONCAT(&#39;Hello&#39;,&#39;world&#39;) FROM dual;</code></td><td>连接字符串X和Y</td></tr><tr><td>INSTR(X,STR[,START][,N)</td><td><code>SELECT INSTR(&#39;Hello world&#39;,&#39;or&#39;) FROM dual;</code></td><td>从X中查找str，可以指定从start开始，也可以指定从n开始</td></tr><tr><td>LENGTH(X)</td><td><code>SELECT LENGTH(&#39;Hello&#39;) FROM dual;</code></td><td>返回X的长度</td></tr><tr><td>LOWER(X)</td><td><code>SELECT LOWER(&#39;Hello&#39;) FROM dual;</code></td><td>X转换成小写</td></tr><tr><td>UPPER(X)</td><td><code>SELECT UPPER(&#39;hello&#39;) FROM dual; </code></td><td>X转换成大写</td></tr><tr><td>LTRIM(X[,TRIM_STR])</td><td><code>SELECT LTRIM(&#39;=Hello=&#39;,&#39;=&#39;) FROM dual;</code></td><td>把X的左边截去trim_str字符串，缺省截去空格</td></tr><tr><td>RTRIM(X[,TRIM_STR])</td><td><code>SELECT RTRIM(&#39;=Hello=&#39;,&#39;=&#39;) FROM dual; </code></td><td>把X的右边截去trim_str字符串，缺省截去空格</td></tr><tr><td>TRIM([TRIM_STR  FROM]X)</td><td><code>SELECT TRIM(&#39;=&#39;FROM&#39;=Hello=&#39;) FROM dual; </code></td><td>把X的两边截去trim_str字符串，缺省截去空格</td></tr><tr><td>REPLACE(X,old,new)</td><td><code>SELECT REPLACE(&#39;ABCDE&#39;,&#39;CD&#39;,&#39;AAA&#39;)FROM dual;</code></td><td>在X中查找old，并替换成new</td></tr><tr><td>SUBSTR(X,start[,length])</td><td><code>SELECT SUBSTR(&#39;ABCDE&#39;,2,3) FROM dual; </code></td><td>返回X的字串，从start处开始，截取length个字符，缺省length，默认到结尾</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h2><p>数字函数接受数字参数，参数可以来自表中的一列，也可以是一个数字表达式。 </p><table><thead><tr><th>函数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>ABS(X)</td><td>X的绝对值</td><td>ABS(-3)&#x3D;3</td></tr><tr><td>ACOS(X)</td><td>X的反余弦</td><td>ACOS(1)&#x3D;0</td></tr><tr><td>COS(X)</td><td>余弦</td><td>COS(1)&#x3D;0.54030230586814</td></tr><tr><td>CEIL(X)</td><td>大于或等于X的最小值</td><td>CEIL(5.4)&#x3D;6</td></tr><tr><td>FLOOR(X)</td><td>小于或等于X的最大值</td><td>FLOOR(5.8)&#x3D;5</td></tr><tr><td>LOG(X,Y)</td><td>X为底Y的对数</td><td>LOG(2，4)&#x3D;2</td></tr><tr><td>MOD(X,Y)</td><td>X除以Y的余数</td><td>MOD(8，3)&#x3D;2</td></tr><tr><td>POWER(X,Y)</td><td>X的Y次幂</td><td>POWER(2，3)&#x3D;8</td></tr><tr><td>ROUND(X[,Y])</td><td>X在第Y位四舍五入</td><td>ROUND(3.456，2)&#x3D;3.46</td></tr><tr><td>SQRT(X)</td><td>X的平方根</td><td>SQRT(4)&#x3D;2</td></tr><tr><td>TRUNC(X[,Y])</td><td>X在第Y位截断</td><td>TRUNC(3.456，2)&#x3D;3.45</td></tr></tbody></table><ul><li>说明</li></ul><ol><li><strong>ROUND(X[,Y])</strong>，四舍五入。</li></ol><p>在缺省 y 时，默认 y&#x3D;0；比如：ROUND(3.56)&#x3D;4。</p><p>y 是正整数，就是四舍五入到小数点后 y 位。ROUND(5.654,2)&#x3D;5.65。</p><p>y 是负整数，四舍五入到小数点左边|y|位。ROUND(351.654,-2)&#x3D;400。</p><ol start="2"><li><strong>TRUNC(x[,y])</strong>，直接截取，不四舍五入</li></ol><p>在缺省 y 时，默认 y&#x3D;0；比如：TRUNC (3.56)&#x3D;3。</p><p>Y是正整数，就是四舍五入到小数点后 y 位。TRUNC (5.654,2)&#x3D;5.65。</p><p>y 是负整数，四舍五入到小数点左边|y|位。TRUNC (351.654,-2)&#x3D;300。、</p><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><p>日期函数对日期进行运算。常用的日期函数有： </p><ol><li><p><strong>ADD_MONTHS(d,n)</strong> ，在某一个日期 d 上，加上指定的月数 n，返回计算后的新日期。 </p><ul><li>d 表示日期，n 表示要加的月数。 </li><li>例：<code>SELECT SYSDATE,add_months(SYSDATE,5) FROM dual; </code></li></ul></li><li><p><strong>LAST_DAY(d)</strong>，返回指定日期当月的最后一天 </p><ul><li>例：<code>SELECT SYSDATE,last_day(SYSDATE) FROM dual; </code></li></ul></li><li><p><strong>ROUND(d[,fmt])</strong>，返回一个以 fmt 为格式的四舍五入日期值， d 是date， fmt 是格式</p><p>模型。默认 fmt 为 DDD，即月中的某一天。</p><ul><li>如果 fmt 为“YEAR”则舍入到某年的 1 月 1 日，即前半年舍去，后半年作为下一年。</li><li>如果 fmt 为“MONTH”则舍入到某月的 1 日，即前月舍去，后半月作为下一月。</li><li>默认为“DDD”，即月中的某一天，最靠近的天，前半天舍去，后半天作为第二天。</li><li>如果 fmt 为“DAY”则舍入到最近的周的周日，即上半周舍去，下半周作为下一周周日。<ul><li>例：<code>SELECT SYSDATE,ROUND(SYSDATE),ROUND(SYSDATE,&#39;day&#39;),ROUND(SYSDATE,&#39;month&#39;),ROUND(SYSDATE,&#39;year&#39;) FROM dual;</code></li></ul></li><li>与 ROUND 对应的函数时 TRUNC(d[,fmt])对日期的操作， TRUNC 与 ROUND 非常相似，只是不对日期进行舍入，直接截取到对应格式的第一天。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  trunc(sysdate,<span class="hljs-string">&#x27;yyyy&#x27;</span>) <span class="hljs-keyword">from</span> dual;<span class="hljs-comment">--返回当年第一天.</span><br><span class="hljs-keyword">select</span>  trunc(sysdate,<span class="hljs-string">&#x27;mm&#x27;</span>)   <span class="hljs-keyword">from</span> dual; <span class="hljs-comment">--返回当月第一天.</span><br><span class="hljs-keyword">select</span>  trunc(sysdate,<span class="hljs-string">&#x27;d&#x27;</span>)   <span class="hljs-keyword">from</span> dual;<span class="hljs-operator">-</span>返回当前星期的第一天.<br><span class="hljs-keyword">select</span>  trunc(sysdate,<span class="hljs-string">&#x27;dd&#x27;</span>)  <span class="hljs-keyword">from</span> dual;<span class="hljs-operator">-</span>返回当前年月日<br><span class="hljs-keyword">select</span>  trunc(sysdate, <span class="hljs-string">&#x27;hh&#x27;</span>)  <span class="hljs-keyword">from</span> dual;<span class="hljs-comment">--返回当前小时</span><br><span class="hljs-keyword">select</span>  trunc(SYSDATE, <span class="hljs-string">&#x27;mi&#x27;</span>)  <span class="hljs-keyword">from</span> dual;<span class="hljs-comment">--返回当前分钟</span><br></code></pre></td></tr></table></figure></li><li><p><strong>EXTRACT(fmt FROM d)</strong>，提取日期中的特定部分。 </p><ul><li>fmt 为：YEAR、MONTH、DAY、HOUR、MINUTE、SECOND。其中 YEAR、MONTH、DAY可以为 DATE 类型匹配，也可以与 TIMESTAMP 类型匹配；但是 HOUR、MINUTE、SECOND 必须与 TIMESTAMP 类型匹配。 </li><li>HOUR 匹配的结果中没有加上时区，因此在中国运行的结果小 8 小时。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> SYSDATE &quot;date&quot;,<br><br>       <span class="hljs-built_in">EXTRACT</span>(<span class="hljs-keyword">YEAR</span> <span class="hljs-keyword">FROM</span> SYSDATE)&quot;year&quot;,<br><br>       <span class="hljs-built_in">EXTRACT</span>(<span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">FROM</span> SYSDATE)&quot;month&quot;,<br><br>       <span class="hljs-built_in">EXTRACT</span>(<span class="hljs-keyword">DAY</span> <span class="hljs-keyword">FROM</span> SYSDATE)&quot;day&quot;,<br><br>       <span class="hljs-built_in">EXTRACT</span>(<span class="hljs-keyword">HOUR</span> <span class="hljs-keyword">FROM</span> SYSTIMESTAMP)&quot;hour&quot;,<br><br>       <span class="hljs-built_in">EXTRACT</span>(<span class="hljs-keyword">MINUTE</span> <span class="hljs-keyword">FROM</span> SYSTIMESTAMP)&quot;minute&quot;,<br><br>       <span class="hljs-built_in">EXTRACT</span>(<span class="hljs-keyword">SECOND</span> <span class="hljs-keyword">FROM</span> SYSTIMESTAMP)&quot;second&quot;<br>       <br>       <span class="hljs-keyword">FROM</span> dual;<br></code></pre></td></tr></table></figure></li></ol><h2 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h2><p>转换函数将值从一种数据类型转换为另外一种数据类型。常见的转换函数有 </p><ul><li><strong>TO_CHAR(d|n[,fmt])</strong></li></ul><p>把日期和数字转换为制定格式的字符串。Fmt是格式化字符串 </p><p>例：<code>SELECT TO_CHAR(SYSDATE,&#39;YYYY&quot;年&quot;MM&quot;月&quot;DD&quot;日&quot; HH24:MI:SS&#39;)&quot;date&quot; FROM dual; </code></p><p>针对数字的格式化，格式化字符有： </p><table><thead><tr><th>参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>9</td><td>999</td><td>指定位置处显示数字</td></tr><tr><td>,</td><td>99,99</td><td>指定位置返回一个逗号</td></tr><tr><td>$</td><td>$999</td><td>数字开头返回一个美元符号</td></tr><tr><td>EEEE</td><td>9.99EEEE</td><td>科学计数法表示</td></tr><tr><td>L</td><td>L999</td><td>数字前加一个本地货币符号</td></tr><tr><td>PR</td><td>999PR</td><td>如果数字式负数则用尖括号进行表示</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>代码演示：TO_CHAR对数字的处理 </p><p><code>SELECT TO_CHAR(-123123.45,&#39;L9.9EEEEPR&#39;)&quot;date&quot; FROM dual; </code></p><ul><li><strong>TO_NUMBER(X,[,fmt])</strong></li></ul><p>把一个字符串以fmt格式转换为一个数字 </p><p><code>SELECT TO_NUMBER(&#39;-$12,345.67&#39;,&#39;$99,999.99&#39;)&quot;num&quot; FROM dual; </code></p><h3 id="日期转化函数"><a href="#日期转化函数" class="headerlink" title="日期转化函数"></a>日期转化函数</h3><ul><li><strong>TO_DATE(X,[,fmt])</strong></li></ul><p>把一个字符串以fmt格式转换成一个日期类型 </p><p>在使用Oracle的to_date函数来做日期转换时，很多Java程序员也许会直接的采用“yyyy-MM-dd HH:mm:ss”的格式作为格式进行转换，但是在Oracle中会引起错误：<strong>“ORA 01810 格式代码出现两次”</strong>。 </p><p><code>to_date(&#39;2005-01-01 13:14:20&#39;,&#39;yyyy-MM-dd HH24:mm:ss&#39;)  </code></p><p>原因是SQL中不区分大小写，MM和mm被认为是相同的格式代码，所以Oracle的SQL采用了<strong>mi</strong>代替分钟。 </p><p><code>to_date(&#39;2005-01-01 13:14:20&#39;,&#39;yyyy-MM-dd HH24:mi:ss&#39;) </code></p><p>另要以24小时的形式显示出来要用HH24 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql">to_date(sysdate,<span class="hljs-string">&#x27;yyyy-MM-dd HH24:mi:ss&#x27;</span>) <span class="hljs-operator">/</span><span class="hljs-operator">/</span>mi是分钟<br>to_date(sysdate,<span class="hljs-string">&#x27;yyyy-MM-dd HH24:mm:ss&#x27;</span>) <span class="hljs-keyword">from</span> dual;<span class="hljs-operator">/</span><span class="hljs-operator">/</span>mm会显示月份  oracle中的to_date参数含义<br><br>D 一周中的星期几  <br><span class="hljs-keyword">DAY</span> 天的名字，使用空格填充到<span class="hljs-number">9</span>个字符  <br>DD 月中的第几天  <br>DDD 年中的第几天  <br>DY 天的简写名  <br>IW ISO标准的年中的第几周  <br>IYYY ISO标准的四位年份  <br>YYYY 四位年份  <br>YYY,YY,Y 年份的最后三位，两位，一位  <br>HH 小时，按<span class="hljs-number">12</span>小时计  <br>HH24 小时，按<span class="hljs-number">24</span>小时计  <br>MI 分  <br>SS 秒  <br>MM 月  <br>Mon 月份的简写  <br><span class="hljs-keyword">Month</span> 月份的全名  <br>W 该月的第几个星期  <br>WW 年中的第几个星期  <span class="hljs-number">1.</span>日期时间间隔操作 <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>当前时间减去<span class="hljs-number">7</span>分钟的时间 <br><span class="hljs-keyword">select</span> sysdate,sysdate <span class="hljs-operator">-</span> <span class="hljs-type">interval</span> ’<span class="hljs-number">7</span>’ <span class="hljs-keyword">MINUTE</span> <span class="hljs-keyword">from</span> dual <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>当前时间减去<span class="hljs-number">7</span>小时的时间 <br><span class="hljs-keyword">select</span> sysdate <span class="hljs-operator">-</span> <span class="hljs-type">interval</span> ’<span class="hljs-number">7</span>’ <span class="hljs-keyword">hour</span> <span class="hljs-keyword">from</span> dual <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>当前时间减去<span class="hljs-number">7</span>天的时间 <br><span class="hljs-keyword">select</span> sysdate <span class="hljs-operator">-</span> <span class="hljs-type">interval</span> ’<span class="hljs-number">7</span>’ <span class="hljs-keyword">day</span> <span class="hljs-keyword">from</span> dual <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>当前时间减去<span class="hljs-number">7</span>月的时间 <br><span class="hljs-keyword">select</span> sysdate,sysdate <span class="hljs-operator">-</span> <span class="hljs-type">interval</span> ’<span class="hljs-number">7</span>’ <span class="hljs-keyword">month</span> <span class="hljs-keyword">from</span> dual <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>当前时间减去<span class="hljs-number">7</span>年的时间 <br><span class="hljs-keyword">select</span> sysdate,sysdate <span class="hljs-operator">-</span> <span class="hljs-type">interval</span> ’<span class="hljs-number">7</span>’ <span class="hljs-keyword">year</span> <span class="hljs-keyword">from</span> dual <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>时间间隔乘以一个数字 <br><span class="hljs-keyword">select</span> sysdate,sysdate <span class="hljs-operator">-</span> <span class="hljs-number">8</span> <span class="hljs-operator">*</span><span class="hljs-type">interval</span> ’<span class="hljs-number">2</span>’ <span class="hljs-keyword">hour</span> <span class="hljs-keyword">from</span> dual<br></code></pre></td></tr></table></figure><p><strong>oracle有毫秒级的数据类型</strong></p><ul><li><p>–返回当前时间 年月日小时分秒毫秒 </p><p><code>select to_char(current_timestamp(5),’DD-MON-YYYY HH24:MI:SSxFF’) from dual;  </code></p></li><li><p>–返回当前 时间的秒毫秒，可以指定秒后面的精度(最大&#x3D;9) </p><p><code>select to_char(current_timestamp(9),’MI:SSxFF’) from dual; </code></p></li></ul><h2 id="其它单行函数"><a href="#其它单行函数" class="headerlink" title="其它单行函数"></a>其它单行函数</h2><ul><li><strong>NVL(X,VALUE)</strong></li></ul><p>如果X为空，返回value，否则返回X </p><p>例：对工资是2000元以下的员工，如果没发奖金，每人奖金100元 (已有奖金则不发)</p><p><code>SELECT ENAME,JOB,SAL,NVL(COMM,100) FROM EMP WHERE SAL&lt;2000; </code></p><ul><li><strong>NVL2(x,value1,value2)</strong></li></ul><p>如果x非空，返回value1，否则返回value2 </p><p>例：对EMP表中工资为2000元以下的员工，如果没有奖金，则奖金为200元，如果有奖金，则在原来的奖金基础上加100元 </p><p><code>SELECT ENAME,JOB,SAL,NVL2(COMM,comm+100,200) &quot;comm&quot; </code></p><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>聚合函数同时对一组数据进行操作，返回一行结果，比如计算一组数据的总和，平均值 </p><table><thead><tr><th>名称</th><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>AVG</td><td>平均值</td><td>AVG（表达式）</td></tr><tr><td>SUM</td><td>求和</td><td>SUM(表达式)</td></tr><tr><td>MIN、MAX</td><td>最小值、最大值</td><td>MIN(表达式)、MAX(表达式)</td></tr><tr><td>COUNT</td><td>数据统计</td><td>COUNT（表达式）</td></tr></tbody></table><h1 id="查询增强"><a href="#查询增强" class="headerlink" title="查询增强"></a>查询增强</h1><h2 id="查询所有列资料或特定列资料"><a href="#查询所有列资料或特定列资料" class="headerlink" title="查询所有列资料或特定列资料"></a>查询所有列资料或特定列资料</h2><p>–查询订单产品,产品品名资料</p><p><code>SELECT oeb04,oeb06 FROM oeb_file;</code></p><h2 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h2><p>消除查询结果的重复行</p><p>–查询订单产品,产品品名资料，且结果消除重复行(请对比SQL示例1)</p><p><code>SELECT DISTINCT oeb04,oeb06 FROM oeb_file;</code></p><h2 id="别名及算术表达式"><a href="#别名及算术表达式" class="headerlink" title="别名及算术表达式"></a>别名及算术表达式</h2><p>在SELECT查询资料列上使用算术表达式(+、-、*、&#x2F;)及as应用使用列别名</p><p>–as指定列别名(列别名也可以不使用as,直接在查询列后面指定即可)，及SQL中使用乘法运算*</p><p><code>SELECT oeb01 as &quot;订单单号&quot;, oeb04 as &quot;订单产品&quot;,oeb06 as &quot;产品品名&quot;,oeb12*oeb13 as &quot;订单金额&quot; FROM oeb_file</code></p><p><strong>注意：如果取了别名,此别名是不能在WHERE 子句中引用的,必须使用原运算式或内嵌表解决</strong> </p><h2 id="nvl函数"><a href="#nvl函数" class="headerlink" title="nvl函数"></a>nvl函数</h2><p>nvl函数或nvl2函数 处理算术表达式运算中栏位空值问题</p><p>如果查询的栏位参与+ - &#x2F; *算术运算，只要参与运算的栏位有一个为空值，则会导致整个运算结果为空值</p><ul><li>**nvl(expr1,expr2)**如果expr1不为空，则返回expr1，否则返回expr2；expr1与expr2可以是任意数据类型,但是expr1与expr2需是相同的数据类型</li><li>**nvl(expr1,expr2,expr3)**如果expr1不为空，则返回expr2，否则返回expr3；expr1可以是任意数据类型,但是expr2与expr3需是相同的数据类型</li></ul><p>–冲销数量ta_oeb013栏位有空值现象 ，ta_oeb013为本公司客制栏位(冲销数量)</p><p><code>SELECT oeb01 as &quot;订单单号&quot;, oeb04 as &quot;订单产品&quot;,oeb06  as &quot;品名&quot;,oeb12-oeb24-ta_oeb013  as &quot;订单未交量&quot;  FROM oeb_file</code></p><h2 id="where-条件子句"><a href="#where-条件子句" class="headerlink" title="where 条件子句"></a>where 条件子句</h2><ul><li><p><strong>常用的WHERE条件如下：</strong> </p><p>  等于：&#x3D;                   不等于：&lt;&gt;，!&#x3D;            大于：&gt;</p></li></ul><p>​          大于或等于：&gt;&#x3D;       小于或等于：&lt;&#x3D;            小于：&lt;</p><p>​          匹配于列表值：IN( )  </p><p>​          在两值之间：BETWEEN .. AND ..</p><p>​          测试是否为NULL：IS NULL (注意：”没有空格”、”一个或多个空格” 与 IS NULL 是不同的)</p><p>​          匹配于字符样式：LIKE，执行模糊查询需要使用LIKE,常用LIKE通配符如下：</p><p>​               %：匹配0个或多个字符</p><p>​                _ ：匹配单个字符</p><p>​               如果模糊查询本身要查的栏位资料里面包含有’%’或’_’字符时，则需要使用转义字符ESCAPE</p><p>​          <strong>注意：如果某值是空则并不能用LIKE “%”匹配的到，写SQL查异常这点经常出错</strong></p><ul><li><strong>常用的WHERE条件逻辑操作符如下：</strong></li></ul><p>​          逻辑与：AND，逻辑或：OR，取反：NOT</p><h2 id="升降序"><a href="#升降序" class="headerlink" title="升降序"></a>升降序</h2><p>ORDER BY desc (升序排序:默认)，ORDER BY asc (降序排序)  将查询出来的资料排序</p><p>排序时也可以指定多列排序、非选择资料栏位排序、别名排序、列位置编号排序 </p><p>例：</p><p><code>SELECT zx01,zx02 as &quot;姓名&quot;,zx03,zx04 FROM zx_file  WHERE zx03 = &#39;2G69&#39; or zx03 = &#39;2G60&#39; ORDER BY zx01 asc,&quot;姓名&quot;,3 asc,zx09 desc</code>  –不同列排序必须分别指定排序规则</p><h3 id="排序优化"><a href="#排序优化" class="headerlink" title="排序优化"></a>排序优化</h3><p>通常我们会为排序添加rownum让整个查询结果从1开始列出名次，但在排序查询结果中并没有按名次排名,原因是rownum赋值是在排序之前。</p><p>sql：<code>select q.QUEUEID,q.&quot;NAME&quot;,q.&quot;OWNER&quot;,ROWNUM from QUEUES q ORDER BY QUEUEID;</code></p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/orcal/selectRownum.png"></p><ul><li>rownum并不是一个真实存在的数据列，而是一个随数据集生成而生成的伪数据列。rownum是oracle系统顺序分配为从查询返回的行的编号，oracle在select出一条记录后便加上一个rownum，而不等所有的结果都select出来后再加上rownum。</li></ul><p><strong>解决方法：</strong></p><ol><li>可以使用嵌套子查询</li></ol><p>sql:<code>select q1.queueid,Q1.&quot;NAME&quot; ,ROWNUM FROM (select q.QUEUEID,q.&quot;NAME&quot;,q.&quot;OWNER&quot;,ROWNUM from QUEUES q) q1 ORDER BY Q1.QUEUEID</code></p><p>结果正确，不过在官方文档中，Oracle推荐使用分析函数来解决序号问题，根据不同的实际需求，可以使用row_number()、rank()和dense_rank()几个选择。 </p><ol start="2"><li><p>row_number() 根据order by顺序排出一个名次，不会出现并列排名 1 2 3 4 5</p><p>rank() 根据order by排序，会出现并列排名，下一个值会跳过并列值 比如 1 2 2 4 5</p><p>DENSE_RANK() 根据order by排序，出现并列排名以后，下一个值不跳过并列值 1 2 2 3 4</p></li></ol><p><strong>分析函数使用：</strong></p><p>分析函数最大的一个功能是可以使用partition可选参数，用来在其中分组，这三个分析函数都可以在各个分组内从1开始排序 </p><p><strong>语法：ROW_NUMBER()|RANK()|DENSE_RANK() OVER(PARTITION BY COLUMN ORDER BY COLUMN ASC|DESC)</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>q.QUEUEID,<br>q.&quot;NAME&quot;,<br>q.&quot;OWNER&quot;,<br><span class="hljs-built_in">ROW_NUMBER</span> () <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> q.QUEUEID),<br><span class="hljs-built_in">RANK</span> () <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> q.queueid),<br><span class="hljs-built_in">DENSE_RANK</span> () <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> q.queueid)<br><span class="hljs-keyword">FROM</span><br>QUEUES q<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>QUEUEID;<br></code></pre></td></tr></table></figure><h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><p>基于2个或2个以上的视图或表的查询</p><p><strong>说明：</strong></p><ol><li>必须在FROM子句后接上2个或2个以上的表或视图</li><li>查询的资料列如果在FROM子句后面所捷的表或视图有多个,则必须在查询的资料栏位前面加上表或视图名作为首码,否则会引起意性错误</li><li>当使用连接查询时必须在WHERE子句中指定连接的条件,否则会产生笛卡尔积(X*Y)</li><li>使用别名可以简化SQL的编写,别名必须跟在表或视图的后面</li></ol><h3 id="简单链接查询"><a href="#简单链接查询" class="headerlink" title="简单链接查询"></a>简单链接查询</h3><p>FROM子句接 表或视图，WHERE子句指定连接条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">----查询tiptop GP系统用户帐号和部门信息</span><br><span class="hljs-keyword">SELECT</span> zx_file.zx01,zx_file.zx02,zx_file.zx03,gem_file.gem02   <br>  <span class="hljs-keyword">FROM</span> zx_file,gem_file  <br> <span class="hljs-keyword">WHERE</span> zx_file.zx03 <span class="hljs-operator">=</span> gem_file.gem01  <br><span class="hljs-comment">--等同于</span><br><span class="hljs-comment">----查询tiptop GP系统用户帐号和部门信息</span><br><span class="hljs-keyword">SELECT</span> zx01,zx02,zx03,gem02   <br>  <span class="hljs-keyword">FROM</span> zx_file,gem_file  <br> <span class="hljs-keyword">WHERE</span> zx03 <span class="hljs-operator">=</span> gem01<br>ZX01      ZX02     ZX03     GEM02<br><br><span class="hljs-comment">-------    -------     -----           ---------</span><br>terry       李帅        <span class="hljs-number">2</span>G69       海外资讯<br>zhanna      詹妹        <span class="hljs-number">2</span>G89   会计部<br></code></pre></td></tr></table></figure><h3 id="内连接INNER-JOIN"><a href="#内连接INNER-JOIN" class="headerlink" title="内连接INNER JOIN"></a>内连接INNER JOIN</h3><p>相关链接：<a href="https://www.cnblogs.com/misswjr/p/9437170.html">https://www.cnblogs.com/misswjr/p/9437170.html</a></p><p>相关链接：<a href="https://blog.csdn.net/u011955534/article/details/14168913">https://blog.csdn.net/u011955534/article/details/14168913</a></p><p>参考链接：<a href="https://blog.csdn.net/idomyway/article/details/78785112">https://blog.csdn.net/idomyway/article/details/78785112</a></p>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>orcal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>钢琴五线谱学习</title>
    <link href="/2019/10/15/other/%E9%92%A2%E7%90%B4%E4%BA%94%E7%BA%BF%E8%B0%B1%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/10/15/other/%E9%92%A2%E7%90%B4%E4%BA%94%E7%BA%BF%E8%B0%B1%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="五线谱示意图对照表"><a href="#五线谱示意图对照表" class="headerlink" title="五线谱示意图对照表"></a>五线谱示意图对照表</h1><ul><li><p>高低音示意图</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/piano/gaodiying.jpg" alt="asdq"></p></li><li><p>五线谱、简谱音阶对照示意图 </p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/piano/wuxianpu.jpg"></p></li><li><p>简谱唱法与五线谱的音名唱法对照表</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/piano/CDEFGAB.jpg"></p></li><li><p>简谱与钢琴（电子琴）键盘位置对照图</p></li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/piano/jianpan.jpg"></p><h1 id="口诀"><a href="#口诀" class="headerlink" title="口诀"></a>口诀</h1><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/piano/koujue.png"></p><ul><li>五线谱高低口诀</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">高音谱号：<br>下加一线你唱<span class="hljs-number">1</span>(do)，下加一间你唱<span class="hljs-number">2</span>(rei)<br>一二三线，<span class="hljs-number">3</span>(mi) <span class="hljs-number">5</span>(so) <span class="hljs-number">7</span>(xi)，四线五线唱<span class="hljs-number">2</span>(rei) <span class="hljs-number">4</span>(fa)，一二三间，<span class="hljs-number">4</span>(fa) <span class="hljs-number">6</span>(la) <span class="hljs-number">1</span>(do)，，到了四间请唱 <span class="hljs-number">3</span>(mi)<br>上加一二三线<span class="hljs-number">6</span>(la) <span class="hljs-number">1</span>(do) <span class="hljs-number">3</span>(mi)，四线五线唱<span class="hljs-number">5</span>(fa) <span class="hljs-number">7</span>(xi)，上加一二三间<span class="hljs-number">5</span>(so) <span class="hljs-number">7</span>(xi) <span class="hljs-number">2</span>(rei)，四间五间唱<span class="hljs-number">4</span>(fa) <span class="hljs-number">6</span>(la)<br>低音谱号：<br>上加一线还唱<span class="hljs-number">1</span>(do)，上加一间就唱 <span class="hljs-number">7</span>(xi)<br>一二三线，<span class="hljs-number">5</span>(so) <span class="hljs-number">7</span>(xi) <span class="hljs-number">2</span>(rei)，四线五线唱<span class="hljs-number">4</span>(fa) <span class="hljs-number">6</span>(la)，一二三间，<span class="hljs-number">6</span>(la) <span class="hljs-number">1</span>(do) <span class="hljs-number">3</span>(mi)，四间唱<span class="hljs-number">5</span>(fa)，<br>下加一二三线<span class="hljs-number">3</span>(mi) <span class="hljs-number">1</span>(do) <span class="hljs-number">6</span>(la)，四线五线唱<span class="hljs-number">4</span>(fa) <span class="hljs-number">2</span>(rei)，下加一二三间<span class="hljs-number">4</span>(fa) <span class="hljs-number">2</span>(rei) <span class="hljs-number">7</span>(xi)，四间五间唱<span class="hljs-number">5</span>(so) <span class="hljs-number">3</span>(mi)<br><br></code></pre></td></tr></table></figure><ul><li>中央C在简谱中唱1，即Do，D唱2，即re,以此类推。 一般情况下，高音谱号的曲谱用右手弹，低音谱号的曲谱用左手弹，至于手指怎么摆放、弹奏这里就不再赘述。</li></ul><h1 id="音符"><a href="#音符" class="headerlink" title="音符"></a>音符</h1><ul><li>通常来说，音符由符头、符干、符尾三部分组成；符头可以是空心的，也可以是实心的（详见下图），两者拍数相差一半；除了全音符之外，其它的音符都有符干，增加符干原来时值也减一半。 （注：根据符头所在的线或间唱相应的音 ）</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/piano/yingfu.png"></p><ul><li>如下图所示，全音符唱４拍，二分音符唱两拍，四分音符唱１拍，八分音符为半拍，十六分音符唱1&#x2F;4拍，三十二分音符唱1&#x2F;8拍，以此类推，每增加一个符尾拍数是变成原来的1&#x2F;2。</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/piano/jiepai.png"></p><ul><li>符点音符是标在音符符头右边的小圆点儿，用以增加音符的拍值。若一个音符的右边带有一个符点，那么表示该音符的拍值在原来的基础上还要再增加1&#x2F;2拍。</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/piano/zengfu.png"></p><h2 id="变音记号"><a href="#变音记号" class="headerlink" title="变音记号"></a>变音记号</h2><ul><li>降记号（b）表示将基本音级的音高降低半音，根据该记号所在的线或间而降音 </li><li>还原记号（无法打出符号）表示把已经升高或降低的音还原。 </li><li>升记号（#）表示将基本音级的音高升高半音，根据该记号所在的线或间而降音。</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/piano/bianying.png"></p><ul><li>案例<ul><li>如下图所示记号为升fa，升do，降si</li></ul></li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/piano/bianyinganli.png"></p><h2 id="休止符"><a href="#休止符" class="headerlink" title="休止符"></a>休止符</h2><ul><li>休止符表示不同长短音的间断符号,根据不同的拍值表示如下图所示。</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/piano/xiuzhifu.png"></p><h2 id="延音线"><a href="#延音线" class="headerlink" title="延音线"></a>延音线</h2><ul><li>下图红色框线中向上弯曲的曲线叫延音线，它可以将两个或两个以上相同音高的音符相连，在钢琴演奏时作为一个音符，它的拍值等于这些音符的拍值总和。当然延音线也可以用向下弯曲的曲线表示。</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/piano/yanyingxian.png"></p><h2 id="连音"><a href="#连音" class="headerlink" title="连音"></a>连音</h2><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/piano/lianyingxian.png"></p><ol><li>音符的符杆用横线连起来意思就是连在一起弹，中间不要断，在以<a href="https://www.baidu.com/s?wd=%E5%9B%9B%E5%88%86%E9%9F%B3%E7%AC%A6&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">四分音符</a>为一拍的曲谱中，全音符，<a href="https://www.baidu.com/s?wd=%E4%BA%8C%E5%88%86%E9%9F%B3%E7%AC%A6&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">二分音符</a>，<a href="https://www.baidu.com/s?wd=%E5%9B%9B%E5%88%86%E9%9F%B3%E7%AC%A6&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">四分音符</a>没有符尾，也就不用连，两个<a href="https://www.baidu.com/s?wd=%E5%85%AB%E5%88%86%E9%9F%B3%E7%AC%A6&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">八分音符</a>相连，去掉原来的符尾,，用一根横线相连，这根横线叫符梁。</li><li>如果是十六分音符，则用两根符梁相连。三十<a href="https://www.baidu.com/s?wd=%E4%BA%8C%E5%88%86%E9%9F%B3%E7%AC%A6&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">二分音符</a>用三根，以此类推。一般以一拍为一个组合，也有以两拍这一介组合的。如果一拍中即有一个八分，还有两个十六分音符的，在上端先用一根连三个，再把两个十六分连起 。</li></ol>]]></content>
    
    
    <categories>
      
      <category>other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven使用</title>
    <link href="/2019/08/14/Maven%E5%8F%91%E5%B8%83%E5%8F%8A%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/08/14/Maven%E5%8F%91%E5%B8%83%E5%8F%8A%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven插件简述"><a href="#Maven插件简述" class="headerlink" title="Maven插件简述"></a>Maven插件简述</h1><p>Maven中有两种类型的插件</p><ul><li><strong>Build plugins</strong> 是在项目创建时执行的插件，位于<code>&lt;build/&gt;</code>标签内</li><li><strong>Reporting plugins</strong>是在网站发布时执行的插件，位于<code>&lt;reporting/&gt;</code>标签内</li></ul><h1 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h1><p>所有的Maven插件的配置都来自于<code>&lt;configuration&gt;</code>标签，每个<code>&lt;configuration&gt;</code>都会映射到Mojo类(Mojo类有插件具体执行工作的类)中你所指定的变量或set方法，具体案例如下</p><p>创建一个插件用于访问特定的url，并需要配置url和超时时间等配置，创建步骤如下</p><ol><li><p>创建Maven工程，可使用quickstar快速创建</p></li><li><p>修改pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 以往我们这里都是控制打包类型如，jar或者war，这里我们要生成插件因此需要修改为如下配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 添加插件依赖以便我们实现AbstractMojo抽象类来开发我们自己的插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-plugin-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>实现AbstractMojo接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@goal</span> query</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyQueryMojo</span><br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMojo</span><br>&#123;<br>    <span class="hljs-comment">//配置获取</span><br>    <span class="hljs-meta">@Parameter(property = &quot;query.url&quot;, required = true)</span><br>    <span class="hljs-keyword">private</span> String url;<br> <br>    <span class="hljs-meta">@Parameter(property = &quot;timeout&quot;, required = false, defaultValue = &quot;50&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> timeout;<br> <br>    <span class="hljs-meta">@Parameter(property = &quot;options&quot;)</span><br>    <span class="hljs-keyword">private</span> String[] options;<br> <span class="hljs-comment">//具体插件执行的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> MojoExecutionException<br>    &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>执行<code>mvn clean install</code>将会在本地.m2库中生成你的插件</p></li><li><p>具体如何使用插件如下，可对应步骤3了解插件配置如何映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">oject&gt;<br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-myquery-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.foobar.com/query<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">timeout</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">timeout</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">options</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>one<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>two<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>three<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">options</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>有时，我们想通过命令行界面来控制url参数以便我们不去修改pom.xml的<code>configuration</code>配置</p><ul><li>pom配置中的url修改为<code>$&#123;query.url&#125;</code></li><li>执行命令<code>mvn myquery:query -Dquery.url=http://maven.apache.org</code></li></ul><p>6.当有复杂参数时，需要定义实体类封装参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">person</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;com.mycompany.mojo.query.SuperPerson&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">firstName</span>&gt;</span>Jason<span class="hljs-tag">&lt;/<span class="hljs-name">firstName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">lastName</span>&gt;</span>van Zyl<span class="hljs-tag">&lt;/<span class="hljs-name">lastName</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">person</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h1><p>关于Maven插件的原理参考</p><p><a href="https://blog.csdn.net/jerry010101/article/details/93601563">https://blog.csdn.net/jerry010101/article/details/93601563</a></p><p>插件文档：</p><ol><li><a href="http://maven.apache.org/plugins/index.html">http://maven.apache.org/plugins/index.html</a></li><li><a href="http://mojo.codehaus.org/plugins.html">http://mojo.codehaus.org/plugins.html</a></li></ol><h2 id="maven内置配置"><a href="#maven内置配置" class="headerlink" title="maven内置配置"></a>maven内置配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml">$&#123;basedir&#125;表示项目根目录,即包含pom.xml文件的目录;<br><br>$&#123;version&#125;表示项目版本;<br><br>$&#123;project.basedir&#125;同$&#123;basedir&#125;;<br><br>$&#123;project.baseUri&#125;表示项目文件地址;<br><br>$&#123;maven.build.timestamp&#125;表示项目构件开始时间;<br><br>$&#123;maven.build.timestamp.format&#125;表示属性$&#123;maven.build.timestamp&#125;的展示格式,默认值为yyyyMMdd-HHmm,可自定义其格式,其类型可参考java.text.SimpleDateFormat。<br>　$&#123;project.build.directory&#125;表示主源码路径;<br><br>　$&#123;project.build.sourceEncoding&#125;表示主源码的编码格式;<br><br>　$&#123;project.build.sourceDirectory&#125;表示主源码路径;<br><br>　$&#123;project.build.finalName&#125;表示输出文件名称;<br><br>  $&#123;project.version&#125;表示项目版本,与$&#123;version&#125;相同;<br><br>$&#123;project.xxx&#125; 当前pom文件的任意节点的内容<br>$&#123;env.xxx&#125; 获取系统环境变量。<br>$&#123;settings.xxx&#125; 指代了settings.xml中对应元素的值。<br></code></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="maven-compiler-plugin"><a href="#maven-compiler-plugin" class="headerlink" title="maven-compiler-plugin"></a>maven-compiler-plugin</h3><p>设置maven编译的jdk版本，maven3默认用jdk1.5，maven2默认用jdk1.3</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                         <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                             <br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>                                      <br>        <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span> <span class="hljs-comment">&lt;!-- 源代码使用的JDK版本 --&gt;</span>                              <br>        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span> <span class="hljs-comment">&lt;!-- 需要生成的目标class文件的编译版本 --&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><span class="hljs-comment">&lt;!-- 字符集编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipTests</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipTests</span>&gt;</span><span class="hljs-comment">&lt;!-- 跳过测试 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>                                         <br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><h3 id="Maven-Archiver"><a href="#Maven-Archiver" class="headerlink" title="Maven Archiver"></a>Maven Archiver</h3><p>Maven Archiver是主要的控制打包功能的配置</p><ul><li>打包配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 是否包含pom.xml和pom.properties文件：默认是true --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">addMavenDescriptor</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">addMavenDescriptor</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 是否激活压缩：默认是true --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">compress</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">compress</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 是否强制创建存档（会对比新旧时间戳，若新建存档时间较晚则更新jar包，反之亦然）：默认为true --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">forced</span>/&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 是否包含INDEX.LIST文件：默认为true --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">index</span>/&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 将定义的pom.properties文件用于覆盖自动生成的pom.properties文件（只有在addMavenDescriptor 设置为true时有效） --&gt;</span><br>                        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                            自动生成的pom。properties默认包含以下属性</span><br><span class="hljs-comment">                            artifactId=$&#123;project.artifactId&#125;</span><br><span class="hljs-comment">                            groupId=$&#123;project.groupId&#125;</span><br><span class="hljs-comment">                            version=$&#123;project.version&#125;</span><br><span class="hljs-comment">                         --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">pomPropertiesFile</span>/&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 设置MANIFEST.MF文件路径 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifestFile</span>&gt;</span>$&#123;project.build.outputDirectory&#125;/META-INF/MANIFEST.MF<span class="hljs-tag">&lt;/<span class="hljs-name">manifestFile</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 是否要把第三方jar放到manifest的classpath中：默认false --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                                用于为mainfest添加如下信息</span><br><span class="hljs-comment">                                Created-By: Maven Archiver $&#123;maven-archiver.version&#125;</span><br><span class="hljs-comment">                                Build-Jdk-Spec: $&#123;java.specification.version&#125;</span><br><span class="hljs-comment">                            --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">addDefaultEntries</span>/&gt;</span><br>                            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                                用于为mainfest添加如下信息</span><br><span class="hljs-comment">                                Implementation-Title: $&#123;project.name&#125;</span><br><span class="hljs-comment">                                Implementation-Version: $&#123;project.version&#125;</span><br><span class="hljs-comment">                                Implementation-Vendor: $&#123;project.organization.name&#125;</span><br><span class="hljs-comment">                            --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">addDefaultImplementationEntries</span>/&gt;</span><br>                            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                                Specification-Title: $&#123;project.name&#125;</span><br><span class="hljs-comment">                                Specification-Version: $&#123;project.artifact.selectedVersion.majorVersion&#125;.$&#123;project.artifact.selectedVersion.minorVersion&#125;</span><br><span class="hljs-comment">                                Specification-Vendor: $&#123;project.organization.name&#125;</span><br><span class="hljs-comment">                            --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">addDefaultSpecificationEntries</span>/&gt;</span><br>                            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                                Build-Tool: $&#123;maven.build.version&#125;</span><br><span class="hljs-comment">                                Build-Jdk: $&#123;java.version&#125; ($&#123;java.vendor&#125;)</span><br><span class="hljs-comment">                                Build-Os:  $&#123;os.name&#125; ($&#123;os.version&#125;; ($&#123;os.arch&#125;)</span><br><span class="hljs-comment">                            --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">addBuildEnvironmentEntries</span>/&gt;</span><br><span class="hljs-comment">&lt;!--                            是否开启扩展清单--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">addExtensions</span>/&gt;</span><br>                                <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                                    设置classPath的布局类型</span><br><span class="hljs-comment">                                    simple：（默认）</span><br><span class="hljs-comment">                                    repository：与maven的classPath一致</span><br><span class="hljs-comment">                                    custom：与customClasspathLayout配置有关</span><br><span class="hljs-comment">                                --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">classpathLayoutType</span>/&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 生成的manifest中classpath的前缀，</span><br><span class="hljs-comment">                                 因为要把第三方jar放到lib目录下，</span><br><span class="hljs-comment">                                 所以classpath的前缀是lib/，默认为空 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">classpathPrefix</span>&gt;</span>lib/.<span class="hljs-tag">&lt;/<span class="hljs-name">classpathPrefix</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 所传的表达式会被classPath关联的对象清单所识别 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">customClasspathLayout</span>/&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 设置主类 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>/&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 包的入口 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">packageName</span>/&gt;</span><br>                            <span class="hljs-comment">&lt;!--是否使用唯一时间戳快照版本，而不是-快照版本：默认为true--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">useUniqueVersions</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>value<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifestSections</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">manifestSection</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>/&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>value<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">manifestSection</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifestSections</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="maven-jar-plugin"><a href="#maven-jar-plugin" class="headerlink" title="maven-jar-plugin"></a>maven-jar-plugin</h3><ul><li>普通jar包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 是否包含pom.xml和pom.properties文件：默认是true --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">addMavenDescriptor</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">addMavenDescriptor</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 是否要把第三方jar放到manifest的classpath中：默认false --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 生成的manifest中classpath的前缀，</span><br><span class="hljs-comment">                                 因为要把第三方jar放到lib目录下，</span><br><span class="hljs-comment">                                 所以classpath的前缀是lib/，默认为空 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">classpathPrefix</span>&gt;</span>lib/.<span class="hljs-tag">&lt;/<span class="hljs-name">classpathPrefix</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**/bookFlight/<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**/database/<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**/debug/<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**/IBE/<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="maven-assembly-plugin"><a href="#maven-assembly-plugin" class="headerlink" title="maven-assembly-plugin"></a>maven-assembly-plugin</h3><ul><li>maven-assembly-plugin的用途是制作项目分发包，该分发包可能包含了项目的可执行文件、源代码、readme、平台脚本等等。 maven-assembly-plugin支持各种主流的格式如zip、tar.gz、jar和war等，具体打包哪些文件是高度可控的，例如用户可以 按文件级别的粒度、文件集级别的粒度、模块级别的粒度、以及依赖级别的粒度控制打包，此外，包含和排除配置也是支持的。maven-assembly- plugin要求用户使用一个名为assembly.xml的元数据文件来表述打包，它的single目标可以直接在命令行调用，也可以被绑定至生命周期。</li><li>assembly插件打压缩包（jar）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--使用默认assembly组件--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--使用自定义assembly组件--&gt;</span><br>                    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                    &lt;descriptors&gt;</span><br><span class="hljs-comment">                        &lt;descriptor&gt;src/main/resources/assembly/*.xml&lt;/descriptor&gt;</span><br><span class="hljs-comment">                    &lt;/descriptors&gt;</span><br><span class="hljs-comment">                    --&gt;</span><br>                    <span class="hljs-comment">&lt;!--assembly插件可支持archive配置用于指定可执行jar包的主类--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>org.sample.App<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <span class="hljs-comment">&lt;!-- this is used for inheritance merges --&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 将组装绑定到maven生命周期的哪一阶段 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span> <span class="hljs-comment">&lt;!-- bind to the packaging phase --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!-- 指定assembly插件的打包方式--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>当有个性化配置时可参考Assembly，，改方案需要该插件支持<code>&lt;descriptor/&gt;</code></li></ul><h3 id="Assembly配置"><a href="#Assembly配置" class="headerlink" title="Assembly配置"></a>Assembly配置</h3><ul><li>assembly文件是插件的配置，通过配置的变更来实现不同的自定义打包方式和类型等</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/ASSEMBLY/2.1.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/ASSEMBLY/2.1.0</span></span><br><span class="hljs-string"><span class="hljs-tag">          http://maven.apache.org/xsd/assembly-2.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--用于表示打包后的包名，且还可以在发布时座位组件的标识--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--打包类型</span><br><span class="hljs-comment">        &quot;zip&quot; - Creates a ZIP file format</span><br><span class="hljs-comment">        &quot;tar&quot; - Creates a TAR format</span><br><span class="hljs-comment">        &quot;tar.gz&quot; or &quot;tgz&quot; - Creates a gzip&#x27;d TAR format</span><br><span class="hljs-comment">        &quot;tar.bz2&quot; or &quot;tbz2&quot; - Creates a bzip&#x27;d TAR format</span><br><span class="hljs-comment">        &quot;tar.snappy&quot; - Creates a snappy&#x27;d TAR format</span><br><span class="hljs-comment">        &quot;tar.xz&quot; or &quot;txz&quot; - Creates a xz&#x27;d TAR format</span><br><span class="hljs-comment">        &quot;jar&quot; - Creates a JAR format</span><br><span class="hljs-comment">        &quot;dir&quot; - Creates an exploded directory format</span><br><span class="hljs-comment">        &quot;war&quot; - Creates a WAR format</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">formats</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--是否将包含根目录，若设为false则压缩包中只包含目录中的内容，而不是从根目录开始：默认true--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">includeBaseDirectory</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--当includeBaseDirectory标签设为true时，需要为根目录命名，若未命名则默认用项目名称为之命名$&#123;project.build.finalName&#125; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">baseDirectory</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!----&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">includeSiteDirectory</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--用于将多个文件内容定义在同一个标识下，例如将几个文件的内容合并到一个文件中去或为特殊的文件自定义内容--&gt;</span><br>    <span class="hljs-comment">&lt;!--有以下几种配置可参考：http://maven.apache.org/plugins/maven-assembly-plugin/examples/single/using-container-descriptor-handlers.html--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">containerDescriptorHandlers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">containerDescriptorHandler</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">handlerName</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">containerDescriptorHandler</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">containerDescriptorHandlers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--允许将多个Module和项目加入到一个pom.xml中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">moduleSets</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">moduleSet</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--如果设置为true插件将会集中处理包含在内的所有项目工程--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">useAllReactorProjects</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--是否包含子工程--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includeSubModules</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--项目坐标--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--除外的项目坐标--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--包含的source文件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">sources</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">useDefaultExcludes</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">fileMode</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directoryMode</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">fileSets</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">useDefaultExcludes</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">fileMode</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">directoryMode</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">lineEnding</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">filtered</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">nonFilteredFileExtensions</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">fileSets</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includeModuleDirectory</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludeSubModuleDirectories</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectoryMapping</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">sources</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--包含的二进制文件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">binaries</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">fileMode</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directoryMode</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">attachmentClassifier</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includeDependencies</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependencySets</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dependencySet</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">fileMode</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">directoryMode</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">useStrictFiltering</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">outputFileNameMapping</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">unpack</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">unpackOptions</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">filtered</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">nonFilteredFileExtensions</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">lineEnding</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">useDefaultExcludes</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">unpackOptions</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">useProjectArtifact</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">useProjectAttachments</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">useTransitiveDependencies</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">useTransitiveFiltering</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencySet</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependencySets</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">unpack</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">unpackOptions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">filtered</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">nonFilteredFileExtensions</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">lineEnding</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">useDefaultExcludes</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">unpackOptions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">outputFileNameMapping</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">binaries</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">moduleSet</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">moduleSets</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--文件设置，将制定的文件或集合写入压缩包内--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fileSets</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--是否使用默认排查设置，如匹配CVS或Subversion元数据文件时排除：默认为true--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">useDefaultExcludes</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--输出路径，这个路径从压缩包的根目录开始--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--设置匹配的包含文件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--设置排除文件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--类似linux系统的权限设置，如：Read = 4, Write = 2, and Execute = 1；默认为0644--&gt;</span><br>            <span class="hljs-comment">&lt;!--更多权限可查看http://www.onlamp.com/pub/a/bsd/2000/09/06/FreeBSD_Basics.html--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileMode</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--和fileMode类似--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directoryMode</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--限定要选取的目录，可填绝对路径或相对路径--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--设置换行符类型--&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                &quot;keep&quot; - Preserve all line endings</span><br><span class="hljs-comment">                &quot;unix&quot; - Use Unix-style line endings (i.e. &quot;\n&quot;)</span><br><span class="hljs-comment">                &quot;lf&quot; - Use a single line-feed line endings (i.e. &quot;\n&quot;)</span><br><span class="hljs-comment">                &quot;dos&quot; - Use DOS-/Windows-style line endings (i.e. &quot;\r\n&quot;)</span><br><span class="hljs-comment">                &quot;windows&quot; - Use DOS-/Windows-style line endings (i.e. &quot;\r\n&quot;)</span><br><span class="hljs-comment">                &quot;crlf&quot; - Use carriage-return, line-feed line endings (i.e. &quot;\r\n&quot;)</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">lineEnding</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--是否用配置中的属性来过滤选中的文件，默认为：false--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtered</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--附加文件扩展名不应用过滤--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">nonFilteredFileExtensions</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fileSets</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--允许操作fileset除外的一些单个文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">files</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">source</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">sources</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">destName</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileMode</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">lineEnding</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtered</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">files</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--可将项目之外的依赖文件加入到assembly插件压缩包中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencySets</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencySet</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--输出保存路径--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileMode</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directoryMode</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">useStrictFiltering</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--为所有依赖设置映射符号，默认为：$&#123;artifact.artifactId&#125;-$&#123;artifact.version&#125;$&#123;dashClassifier?&#125;.$&#123;artifact.extension&#125;--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputFileNameMapping</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--若设为true则可以解压压缩包中的内容到新的压缩包中，目前支持解压jar, zip, tar.gz, 和 tar.bz 默认：false--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">unpack</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">unpackOptions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtered</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">nonFilteredFileExtensions</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">lineEnding</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">useDefaultExcludes</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">unpackOptions</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--依赖的范围 默认：runtime--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--定义这个依赖项目构建过程中生产的组件是否要包含在此依赖集中 默认：true--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">useProjectArtifact</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--同上，定义一些附加组件的设置 默认：false--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">useProjectAttachments</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--当有依赖传递时，是否将传递的依赖也接入到压缩包中；--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">useTransitiveDependencies</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--依赖传递过滤设置 默认：false--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">useTransitiveFiltering</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencySet</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencySets</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--为assembly插件配置maven仓库组件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileMode</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directoryMode</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includeMetadata</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupVersionAlignments</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupVersionAlignment</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">groupVersionAlignment</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">groupVersionAlignments</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">componentDescriptors</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="container–file-aggregator"><a href="#container–file-aggregator" class="headerlink" title="container–file-aggregator"></a>container–file-aggregator</h4><ul><li>该组件负责将读取<code>&lt;filePattern/&gt;</code>中的表达式对应的文件，将其内容合并，最终输出到<code>&lt;outputPath/&gt;</code>中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/ASSEMBLY/2.1.0&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/ASSEMBLY/2.1.0 http://maven.apache.org/xsd/assembly-2.1.0.xsd&quot;</span>&gt;</span><br>  ....<br>  <span class="hljs-tag">&lt;<span class="hljs-name">containerDescriptorHandlers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">containerDescriptorHandler</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">handlerName</span>&gt;</span>file-aggregator<span class="hljs-tag">&lt;/<span class="hljs-name">handlerName</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filePattern</span>&gt;</span>.*/file.txt<span class="hljs-tag">&lt;/<span class="hljs-name">filePattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">outputPath</span>&gt;</span>file.txt<span class="hljs-tag">&lt;/<span class="hljs-name">outputPath</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">containerDescriptorHandler</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">containerDescriptorHandlers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="container–metaInf-services"><a href="#container–metaInf-services" class="headerlink" title="container–metaInf-services"></a>container–metaInf-services</h4><ul><li>这个组件会匹配所有的<code>META-INF/services</code>目录中的文件并将它们合并到一个<code>META-INF/services</code>目录下的文件中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/ASSEMBLY/2.1.0&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/ASSEMBLY/2.1.0 http://maven.apache.org/xsd/assembly-2.1.0.xsd&quot;</span>&gt;</span><br>  ....<br>  <span class="hljs-tag">&lt;<span class="hljs-name">containerDescriptorHandlers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">containerDescriptorHandler</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">handlerName</span>&gt;</span>metaInf-services<span class="hljs-tag">&lt;/<span class="hljs-name">handlerName</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">containerDescriptorHandler</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">containerDescriptorHandlers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="container–metaInf-spring"><a href="#container–metaInf-spring" class="headerlink" title="container–metaInf-spring"></a>container–metaInf-spring</h4><ul><li>该组件类似metaInf-services会将文件名为<code>META-INF/spring.</code>开头的文件合并</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/ASSEMBLY/2.1.0&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/ASSEMBLY/2.1.0 http://maven.apache.org/xsd/assembly-2.1.0.xsd&quot;</span>&gt;</span><br>  ....<br>  <span class="hljs-tag">&lt;<span class="hljs-name">containerDescriptorHandlers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">containerDescriptorHandler</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">handlerName</span>&gt;</span>metaInf-spring<span class="hljs-tag">&lt;/<span class="hljs-name">handlerName</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">containerDescriptorHandler</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">containerDescriptorHandlers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="container–plexus"><a href="#container–plexus" class="headerlink" title="container–plexus"></a>container–plexus</h4><ul><li>该组件会同上，将所有<code>META-INF/plexus/components.xml</code>文件内容合并，并输出到一个有效的<code>META-INF/plexus/components.xml</code>文件中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/ASSEMBLY/2.1.0&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/ASSEMBLY/2.1.0 http://maven.apache.org/xsd/assembly-2.1.0.xsd&quot;</span>&gt;</span><br>  ....<br>  <span class="hljs-tag">&lt;<span class="hljs-name">containerDescriptorHandlers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">containerDescriptorHandler</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">handlerName</span>&gt;</span>plexus<span class="hljs-tag">&lt;/<span class="hljs-name">handlerName</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">containerDescriptorHandler</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">containerDescriptorHandlers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Assembly样例"><a href="#Assembly样例" class="headerlink" title="Assembly样例"></a>Assembly样例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>full<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 最终打包成一个用于发布的zip文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">formats</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">format</span>&gt;</span>zip<span class="hljs-tag">&lt;/<span class="hljs-name">format</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">formats</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 把依赖jar包打包进Zip压缩文件的lib目录下 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencySets</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencySet</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--不使用项目的artifact，第三方jar不要解压，打包进zip文件的lib目录--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">useProjectArtifact</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">useProjectArtifact</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 第三方jar打包进Zip文件的lib目录下， --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 注意此目录要与maven-jar-plugin中classpathPrefix指定的目录相同, --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 不然这些依赖的jar包加载到ClassPath的时候会找不到--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>lib<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 第三方jar不要解压--&gt;</span><br>            <span class="hljs-comment">&lt;!--&lt;unpack&gt;false&lt;/unpack&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencySet</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencySets</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 文件设置，你想把哪些文件包含进去，或者把某些文件排除掉，都是在这里配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fileSets</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 把项目自己编译出来的可执行jar，打包进zip文件的根目录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        把项目readme说明文档，打包进zip文件根目录下</span><br><span class="hljs-comment">        (这里针对目录document/readme.txt文件)</span><br><span class="hljs-comment">        $&#123;projet.document.directory&#125;是pom.xml中自己配置的</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directoryl</span>&gt;</span>$&#123;projet.document.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directoryl</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>readme.*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        把项目相关的说明文档(除了readme文档)，</span><br><span class="hljs-comment">        打包进zip文件根目录下的document目录</span><br><span class="hljs-comment">        (这里针对document/exclode.txt文件)</span><br><span class="hljs-comment">        $&#123;project.document.directory&#125;是在pom.xml中自己配置的</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.document.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>readme.*<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        把项目的脚本文件目录(src/main/scripts )中的启动脚本文件，</span><br><span class="hljs-comment">        打包进zip文件的根目录</span><br><span class="hljs-comment">        (这里针对的是src/scripts/execute/include-file.sh文件)</span><br><span class="hljs-comment">        $&#123;project.script.execute.directory&#125;</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.script.execute.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fileSets</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="maven-shade-plugin"><a href="#maven-shade-plugin" class="headerlink" title="maven-shade-plugin"></a>maven-shade-plugin</h3><p>使用maven-assembly-plugin容易产生一个错误，就是在多个依赖冲突的时候无法解决。不过使用 maven-shade-plugin 生成一个 uber-jar，可以解决依赖间的冲突,适用于Spring Framework。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-comment">&lt;!-- put your configurations here --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>该插件有以下几个默认的配置功能可供选择,命名空间都为<code>org.apache.maven.plugins.shade.resource</code></li></ul><h4 id="ApacheLicenseResourceTransformer"><a href="#ApacheLicenseResourceTransformer" class="headerlink" title="ApacheLicenseResourceTransformer"></a>ApacheLicenseResourceTransformer</h4><p>一些服务提供者或jar包产商在提供的jar包中都会提供他们的权限在<code>META-IN</code>文件夹中，它们都会被习惯性的被命名为<code>LICENSE</code>或<code>LICENSE.txt</code>，当合并这些依赖时，添加这些资源时就会产生冲突而报错;<code>ApacheLicenseResourceTransformer</code>配置则可以忽视掉这些名字的证书</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">transformers</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">transformers</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="AppendingTransformer"><a href="#AppendingTransformer" class="headerlink" title="AppendingTransformer"></a>AppendingTransformer</h4><p>一些jar包包含一些同名资源文件例如（propertes文件），你可以合并输出它以避免冲突</p><ul><li>如下案例将<code>spring-context</code>和<code>plexus-spring</code> 这两个jar包的<code>META-INF/spring.handlers</code>文件，该文件是用于处理XML schema的命名空间的</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">transformers</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>META-INF/spring.handlers<span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>META-INF/spring.schemas<span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">transformers</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="其它插件"><a href="#其它插件" class="headerlink" title="其它插件"></a>其它插件</h1><h3 id="maven-archetype-plugin"><a href="#maven-archetype-plugin" class="headerlink" title="maven-archetype-plugin"></a>maven-archetype-plugin</h3><p><a href="http://maven.apache.org/archetype/maven-archetype-plugin/">http://maven.apache.org/archetype/maven-archetype-plugin/</a></p><p>Archtype指项目的骨架，Maven初学者最开始执行的Maven命令可能就是mvn archetype:generate，这实际上就是让maven-archetype-plugin生成一个很简单的项目骨架，帮助开发者快速上手。可能也有人看到一些文档写了mvn archetype:create， 但实际上create目标已经被弃用了，取而代之的是generate目标，该目标使用交互式的方式提示用户输入必要的信息以创建项目，体验更好。 maven-archetype-plugin还有一些其他目标帮助用户自己定义项目原型，例如你由一个产品需要交付给很多客户进行二次开发，你就可以为 他们提供一个Archtype，帮助他们快速上手。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-archetype-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="maven-resource-plugin"><a href="#maven-resource-plugin" class="headerlink" title="maven-resource-plugin"></a>maven-resource-plugin</h3><p>该插件处理项目的资源文件拷贝到输出目录。可以分别处理main resources 和 test resources。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>参考文档：</p><ol><li><a href="https://blog.csdn.net/daerzei/java/article/details/82883472">https://blog.csdn.net/daerzei/java/article/details/82883472</a></li><li><a href="https://blog.csdn.net/jerry010101/java/article/details/93601563">https://blog.csdn.net/jerry010101/java/article/details/93601563</a></li><li><a href="https://blog.csdn.net/liuzhuojava/article/details/86691218">https://blog.csdn.net/liuzhuojava/article/details/86691218</a></li><li><a href="https://maven.apache.org/plugins">https://maven.apache.org/plugins</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springBoot小练习（增删改查）</title>
    <link href="/2019/07/26/springBoot%E9%A1%B9%E7%9B%AE%E7%BB%83%E4%B9%A0/"/>
    <url>/2019/07/26/springBoot%E9%A1%B9%E7%9B%AE%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="练习增删改查业务"><a href="#练习增删改查业务" class="headerlink" title="练习增删改查业务"></a>练习增删改查业务</h1><p>创建一个用户表，对表中的内容实现增删改查业务，限时30分钟</p><h1 id="相关配置文件"><a href="#相关配置文件" class="headerlink" title="相关配置文件"></a>相关配置文件</h1><p>建表语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE IF EXISTS `user`;<br><br>CREATE TABLE `user` (<br>  `ID` INT(11) NOT NULL AUTO_INCREMENT,<br>  `NAME` VARCHAR(30) DEFAULT NULL,<br>  `BIRTHDAY` DATETIME DEFAULT NULL,<br>  `ADDRESS` VARCHAR(200) DEFAULT NULL,<br>  PRIMARY KEY (`ID`)<br>) ENGINE=INNODB DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert  into `user`(`ID`,`NAME`,`BIRTHDAY`,`ADDRESS`) values (1,&#x27;夏言&#x27;,&#x27;1573-01-01 00:00:00&#x27;,&#x27;桂州村&#x27;),(2,&#x27;严嵩&#x27;,&#x27;1587-01-01 00:00:00&#x27;,&#x27;分宜县城介桥村&#x27;),(3,&#x27;徐阶&#x27;,&#x27;1580-01-01 00:00:00&#x27;,&#x27;明松江府华亭县&#x27;),(4,&#x27;高拱&#x27;,&#x27;1566-01-01 00:00:00&#x27;,&#x27;河南省新郑市高老庄村&#x27;),(5,&#x27;张居正&#x27;,&#x27;1558-01-01 00:00:00&#x27;,&#x27;江陵&#x27;);<br></code></pre></td></tr></table></figure><p>配置文件</p><p>注意修改数据库配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">port</span>: <span class="hljs-string">8070</span><br><br><span class="hljs-attr">spring</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">datasource</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">type</span>: <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">driver-class-name</span>: <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url</span>: <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/andrewdb</span><br>    <span class="hljs-attr">username</span>: <span class="hljs-string">root</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">123456</span><br><br><span class="hljs-attr">mybatis</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">typeAliasesPackage</span>: <span class="hljs-string">com.ypjiao.pojo </span><br>  <span class="hljs-attr">mapperLocations</span>: <span class="hljs-string">classpath:mappers/*.xml</span><br><br><span class="hljs-attr">logging</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">level</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">cn.tedu.mapper</span>: <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><ul><li>相关依赖包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.ypjiao<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sc-mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>sc-mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.apache.org<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h1><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.pojo;<br><span class="hljs-keyword">import</span> org.springframework.format.annotation.DateTimeFormat;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br><span class="hljs-comment">//用于限定识别传入的字符串日期格式</span><br>    <span class="hljs-meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)</span><br>  <span class="hljs-comment">//用于格式化Date类型时间输出的格式</span><br>  <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getBirthday</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirthday</span><span class="hljs-params">(Date birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAddress</span><span class="hljs-params">(String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday +<br>                <span class="hljs-string">&quot;, id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Mapper接口"><a href="#Mapper接口" class="headerlink" title="Mapper接口"></a>Mapper接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.mapper;<br><br><span class="hljs-keyword">import</span> com.ypjiao.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    List&lt;User&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>;<br>    <span class="hljs-meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span><br>    User <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span>Integer id)</span>;<br>    <span class="hljs-meta">@Insert(&quot;insert into user(name,birthday,address) &quot; +</span><br><span class="hljs-meta">            &quot;values(#&#123;user.name&#125;,#&#123;user.birthday&#125;,#&#123;user.address&#125;)&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;user&quot;)</span> User user)</span>;<br>    <span class="hljs-meta">@Update(&quot;update user set name=#&#123;user.name&#125;,birthday=#&#123;user.birthday&#125;,address=#&#123;user.birthday&#125;&quot; + &quot;where id=#&#123;user.id&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;user&quot;)</span> User user)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果只有一个参数值则可以不需要<span class="hljs-doctag">@Param</span>注解</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span><br>    User <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="servic接口"><a href="#servic接口" class="headerlink" title="servic接口"></a>servic接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.service;<br><br><span class="hljs-keyword">import</span> com.ypjiao.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>;<br>    User <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>;<br>    User <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(Integer id)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="service实现类"><a href="#service实现类" class="headerlink" title="service实现类"></a>service实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.service;<br><br><span class="hljs-keyword">import</span> com.ypjiao.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.ypjiao.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    UserMapper mapper;<br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; list = mapper.getAll();<br>        System.out.println(list);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> mapper.getById(id);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>&#123;<br>        mapper.insertUser(user);<br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>&#123;<br>        mapper.updateUser(user);<br>    &#125;<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> mapper.delete(id);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Controller实现类"><a href="#Controller实现类" class="headerlink" title="Controller实现类"></a>Controller实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.Controller;<br><br><span class="hljs-keyword">import</span> com.ypjiao.pojo.User;<br><span class="hljs-keyword">import</span> com.ypjiao.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/User/&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> UserService userService;<br>    <span class="hljs-meta">@RequestMapping(&quot;getAll&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.getAll();<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;getById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.getById(id);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *springMVC支持restful风格封装对象，可以不需要<span class="hljs-doctag">@PathVariable</span>注解</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;insert/&#123;name&#125;/&#123;birthday&#125;/&#123;address&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            userService.insertUser(user);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;insert success&quot;</span>;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;insert error&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;update/&#123;name&#125;/&#123;birthday&#125;/&#123;address&#125;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            userService.updateUser(user);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;update success&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;delete success&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;deleteUser/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span>  Integer id)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> userService.deleteUser(id);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Application启动类"><a href="#Application启动类" class="headerlink" title="Application启动类"></a>Application启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao;<br><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.ypjiao.mapper&quot;)</span> <span class="hljs-comment">//扫描Mapper包路径获取mapper对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RunApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springBoot</title>
    <link href="/2019/07/24/springBoot/"/>
    <url>/2019/07/24/springBoot/</url>
    
    <content type="html"><![CDATA[<h1 id="生成初始项目"><a href="#生成初始项目" class="headerlink" title="生成初始项目"></a>生成初始项目</h1><p>spring初始项目可在<a href="https://start.spring.io/">官方网站</a>生成</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/springBoot/springBootCreate.png"></p><p>需要分别填写Project类型、Language、Spring Boot版本、和项目相关信息如组ID、项目名称以及一些可能需要依赖的jar包</p><p>点击创建则可以创建成功并下载相关项目</p><h1 id="创建第一个例子"><a href="#创建第一个例子" class="headerlink" title="创建第一个例子"></a>创建第一个例子</h1><p>正常创建springMaven项目后在pom文件中添加以下依赖(该依赖可以从上述方法创建springBoot工程后压缩包中的pom文件)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.tedu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sc-hello<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编辑controller"><a href="#编辑controller" class="headerlink" title="编辑controller"></a>编辑controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello/&#123;value&#125;&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">Hello</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String value)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello &quot;</span>+value;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="编辑启动项"><a href="#编辑启动项" class="headerlink" title="编辑启动项"></a>编辑启动项</h2><p>springBoot支持通过Main方法调用特殊的jar包类启动服务（这种方式很适合以后的微服务启动）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ypjiao;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunHello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RunHello.class,args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><ul><li>idea编辑工具中启动</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">//这种启动方式需要先装有插件<br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>直接启动jar包</li></ul><p>需要依次启动123执行打包</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/springBoot/ideaRunMaven.png"></p><p>执行命令启动<code>java -jar jar包名称</code></p><h2 id="打war包手动部署"><a href="#打war包手动部署" class="headerlink" title="打war包手动部署"></a>打war包手动部署</h2><h3 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h3><p>修改包类型为war，增加依赖spring-boot-starter-tomcat，<scope>的provided表示使用外部的tomcat，而不使用集成微缩版的tomcat。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 如果有spring-boot-starter-tomcat依赖，为其添加适用于，避免打包到tomcat容器 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 还需要添加servlet包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 添加打war包的maven插件和设置打包的时候跳过单元测试代码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--如果想在没有web.xml文件的情况下构建WAR，请设置为false--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">failOnMissingWebXml</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">failOnMissingWebXml</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--设置war包的名字--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">warName</span>&gt;</span>checkroom<span class="hljs-tag">&lt;/<span class="hljs-name">warName</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br> <span class="hljs-comment">&lt;!-- 让打包的时候跳过测试代码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skip</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skip</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="修改启动方法"><a href="#修改启动方法" class="headerlink" title="修改启动方法"></a>修改启动方法</h3><p>继承SpringBootServletInitializer覆盖基类的configure方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunHello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SpringBootServletInitializer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title function_">configure</span><span class="hljs-params">(SpringApplicationBuilder builder)</span> &#123;<br>        <span class="hljs-keyword">return</span> builder.sources(RunHello.class);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RunHello.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不能RunApplication，只能执行maven命令打包，手动把war考入到tomcat下。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装应用</title>
    <link href="/2019/07/14/docker%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8/"/>
    <url>/2019/07/14/docker%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="拉取已有镜像启动容器"><a href="#拉取已有镜像启动容器" class="headerlink" title="拉取已有镜像启动容器"></a>拉取已有镜像启动容器</h1><p>以下以Redis的部署为例</p><h2 id="获取Redis镜像"><a href="#获取Redis镜像" class="headerlink" title="获取Redis镜像"></a>获取Redis镜像</h2><p>关于镜像的获取建议使用代理，因为有些镜像在国内仓库中没有回到外网节点中获取</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker search redis<span class="hljs-comment">#镜像库提供的多个镜像</span><br>docker pull redis<span class="hljs-comment">#拉取最新版本的docker-redis镜像</span><br>docker pull redis:3.2.8<span class="hljs-comment">#拉取指定版本的redis镜像</span><br></code></pre></td></tr></table></figure><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/dockerPull.png" alt="s"></p><p>上图表示拉取成功并完成，可用<code>docker images</code>查看本地是否有镜像</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/dockerImages.png"></p><p>注意：拉取速度会很慢，因为docker中央仓库在国外，中国虽然有镜像仓库，如阿里、网易蜂巢等，但速度也不理想。好在，docker文件可以反复拉取，拉取失败，重新拉取即可。</p><h2 id="使用Redis镜像启动实例"><a href="#使用Redis镜像启动实例" class="headerlink" title="使用Redis镜像启动实例"></a>使用Redis镜像启动实例</h2><p>启动docker容器以及内部的redis服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name redis7000 -p 7000:6379 redis<span class="hljs-comment">#最高版本</span><br>docker run -d --name redis7000 -p 7000:6379 redis:3.2.8<span class="hljs-comment">#执行版本</span><br></code></pre></td></tr></table></figure><ul><li>参数说明：<ul><li>-d，则containter将会运行在后台模式(Detached mode)</li><li>–name 实例名称</li><li>-p 对外程序访问端口7000，宿主机映射的redis端口6379</li><li>最后的redis为镜像的名称</li></ul></li></ul><h3 id="一些特殊参数"><a href="#一些特殊参数" class="headerlink" title="一些特殊参数"></a>一些特殊参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name <span class="hljs-variable">$&#123;app_name&#125;</span> app_name --net=host --restart=always\<br>-e 环境变量A =<span class="hljs-variable">$&#123;环境变量B&#125;</span> <span class="hljs-comment">#将宿主机环境变量B复制给容器的环境变量A</span><br></code></pre></td></tr></table></figure><ul><li>–net&#x3D;host：容器内暴露多少端口，宿主集器也暴露对应端口</li><li>–restart&#x3D;always：开启容器重启</li><li>-e：设置容器环境变量</li></ul><h2 id="进入Docker内部"><a href="#进入Docker内部" class="headerlink" title="进入Docker内部"></a>进入Docker内部</h2><p>有必要则可以进入容器内部操作服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看docker的容器ID，以方便根据容器ID进入容器</span><br>docker ps<br>docker <span class="hljs-built_in">exec</span> -it 0cfc4932b9a0(容器ID) bash<br><span class="hljs-comment">#进入docker内部，-it输入输出，展示信息在控制台，-t让docker分配一个伪终端，并绑定到容器的标准输入上</span><br><br><span class="hljs-comment">#如果容器中执行ps命令出错，说明镜像中未有ps命令，执行下面命令安装</span><br>apt-get update &amp;&amp; apt-get install procps<br><span class="hljs-comment"># 退出docker容器内部</span><br>在容器内部执行<span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>进入redis客户端<code>redis-cli</code></p><p>退出docker中的redis环境<code>exit</code></p><h2 id="端口映射关系"><a href="#端口映射关系" class="headerlink" title="端口映射关系"></a>端口映射关系</h2><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/portMapping.png"></p><h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><p><code>systemctlstop firewalld.service</code>    关闭防火墙服务</p><p><code>systemctldisable firewalld.service</code>  禁止防火墙开启启动</p><p><code>systemctlrestart iptables.service</code>  重启防火墙使配置生效</p><p><code>systemctlenable iptables.service </code>   设置防火墙开机启动</p><h2 id="测试单个Redis"><a href="#测试单个Redis" class="headerlink" title="测试单个Redis"></a>测试单个Redis</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSingle</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.163.101&quot;</span>, <span class="hljs-number">7000</span>);<br><span class="hljs-comment">//设置访问密码</span><br><span class="hljs-comment">//jedis.auth(&quot;123456&quot;);</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;jedis_name=&quot;</span>+name);<br><span class="hljs-comment">//调用redis命令set</span><br>jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Andrew&quot;</span>);<br>jedis.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>以上案例中我们先获取了redis中的那么键值并打印，随后又为这个name设新的值，进入容器中的redis客户端查看这个值是否有变动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看容器id</span><br>docker ps<br><span class="hljs-comment"># 进入容器</span><br>docker exet -it 容器ID bash<br><span class="hljs-comment"># 进入redis</span><br>redis-cli<br><span class="hljs-comment"># 查看值</span><br>get name<br></code></pre></td></tr></table></figure><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/dockerSingleTest.png" alt="s"></p><h2 id="测试分片的Redis"><a href="#测试分片的Redis" class="headerlink" title="测试分片的Redis"></a>测试分片的Redis</h2><p>启动多个redis，这里基于上一步的单个redis继续启动两个容器</p><p>以类似的方式启动，注意修改暴露的端口</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/dockerShardTest.png" alt="s"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testShard</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br><span class="hljs-comment">//设置连接池数量</span><br>config.setMaxTotal(<span class="hljs-number">200</span>);<br>List&lt;JedisShardInfo&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;JedisShardInfo&gt;();<br><span class="hljs-comment">//构造各个分片</span><br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisShardInfo</span>(<span class="hljs-string">&quot;192.168.163.101&quot;</span>, <span class="hljs-number">7000</span>));<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisShardInfo</span>(<span class="hljs-string">&quot;192.168.163.101&quot;</span>, <span class="hljs-number">7001</span>));<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisShardInfo</span>(<span class="hljs-string">&quot;192.168.163.101&quot;</span>, <span class="hljs-number">7002</span>));<br><span class="hljs-comment">//jedis分片</span><br><span class="hljs-type">ShardedJedisPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShardedJedisPool</span>(config, list);<br><span class="hljs-type">ShardedJedis</span> <span class="hljs-variable">shardJedis</span> <span class="hljs-operator">=</span> pool.getResource();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br>shardJedis.set(<span class="hljs-string">&quot;n&quot;</span>+i, Integer.toString(i));<br>&#125;<br>shardJedis.close();<br>pool.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>上述java类是一个循环20次写值的过程，理论上分片后所有容器均会分担存储部分键值，查看结果如下</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/shardRedisCheck.png"></p><h1 id="创建自定义镜像"><a href="#创建自定义镜像" class="headerlink" title="创建自定义镜像"></a>创建自定义镜像</h1><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><ul><li><p>Dockerfile通过逐层layer叠加，使资源得到重复利用，同时变化无穷。</p><p>注意：FROM指定的镜像，本地如果有直接使用，无需网上下载。</p></li></ul><h3 id="关键字含义"><a href="#关键字含义" class="headerlink" title="关键字含义"></a>关键字含义</h3><table><thead><tr><th align="center"><strong>序号</strong></th><th align="center"><strong>关键字</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>FROM</strong></td><td align="center"><strong>指定基础镜像的来源</strong></td></tr><tr><td align="center">2</td><td align="center"><strong>MAINTAINER</strong></td><td align="center"><strong>作者</strong></td></tr><tr><td align="center">3</td><td align="center"><strong>ADD</strong></td><td align="center"><strong>复制文件，会自动解压</strong></td></tr><tr><td align="center">4</td><td align="center"><strong>WORKDIR</strong></td><td align="center"><strong>设置当前工作目录 cd</strong></td></tr><tr><td align="center">5</td><td align="center"><strong>VOLUME</strong></td><td align="center"><strong>设置数据卷，挂载主机目录</strong></td></tr><tr><td align="center">6</td><td align="center"><strong>EXPOSE</strong></td><td align="center"><strong>指定对外暴漏的端口</strong></td></tr><tr><td align="center">7</td><td align="center"><strong>RUN</strong></td><td align="center"><strong>执行命令 sh</strong></td></tr><tr><td align="center">8</td><td align="center"><strong>CMD</strong></td><td align="center"><strong>执行命令 exec，一个Dockerfile只能一个</strong></td></tr><tr><td align="center">9</td><td align="center"><strong>COPY</strong></td><td align="center"><strong>复制文件</strong></td></tr><tr><td align="center">10</td><td align="center"><strong>ENTRYPOINT</strong></td><td align="center"><strong>docker run时参数可以覆盖，指定参数值</strong></td></tr></tbody></table><h2 id="简单镜像操作"><a href="#简单镜像操作" class="headerlink" title="简单镜像操作"></a>简单镜像操作</h2><p>在你所选的目录下创建一个Dockerfile文件</p><h3 id="配置Dockerfile"><a href="#配置Dockerfile" class="headerlink" title="配置Dockerfile"></a>配置Dockerfile</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 配置基础镜像</span><br>FROM index.alauda.cn/tutum/centos:6.5<br><span class="hljs-comment"># 或者</span><br>FROM registry.cn-hangzhou.aliyuncs.com/repos_zyl/centos:0.0.1<br></code></pre></td></tr></table></figure><ul><li>tips：实际上如果只写FROM就相当于对镜像重命名</li></ul><h3 id="基于Dockerfile创建镜像"><a href="#基于Dockerfile创建镜像" class="headerlink" title="基于Dockerfile创建镜像"></a>基于Dockerfile创建镜像</h3><p><code>docker build -t 镜像名称 Dockerfile路径</code></p><p>参数-t标识TAG名称，注意最后有一个.代表当前路径。此命令会自动调用所选目录下的Dockerfile文件并执行其中的命令。</p><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p><code>docker images</code></p><h3 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h3><p>镜像导出会导出在当前目录下</p><ul><li>按镜像名称导出<ul><li><code>docker save -o 包名称.tar 镜像名称</code></li></ul></li><li>按镜像ID导出（按镜像id导出，但导入时没名称）<ul><li><code>docker save 镜像ID&gt; 包名称.tar </code></li></ul></li></ul><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><ul><li>根据镜像名称和版本号删除镜像<ul><li><code>docker rmi 镜像名称:版本号</code></li></ul></li><li>根据镜像ID删除（强制删除会删除父类镜像）<ul><li><code>docker rmi -f 镜像ID</code></li></ul></li></ul><h3 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h3><p><code>docker load -i 镜像tar包名称</code></p><ul><li>如果导入完成时docker images<none><none>没有名称，没有版本。可是它会有imageId</li></ul><h2 id="配置含有JDK的镜像"><a href="#配置含有JDK的镜像" class="headerlink" title="配置含有JDK的镜像"></a>配置含有JDK的镜像</h2><p>以上可以看出一个目录只能有一个Dockerfile文件，而这个目录则是配置生成这个镜像文件的专属目录，资源包竟可能放到这个目录以便Dockerfile配置方便</p><ol><li><p>创建目录</p><ul><li><code>mkdir /usr/local/src/docker</code>创建目录</li><li><code>vi Dockerfile</code>创建Dockerfile文件并编辑</li></ul></li><li><p>编辑Dockerfile文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM 镜像名称<br><span class="hljs-comment">#解压并安装jdk</span><br>ADD jdk-8u211-linux-x64.tar.gz /usr/local/src<br><span class="hljs-comment">#设置环境变量</span><br>ENV JAVA_HOME=/usr/local/src/jdk1.8.0_211<br>ENV PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br>ENV CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar<br></code></pre></td></tr></table></figure></li><li><p>镜像制作</p><ul><li><code>docker build --no-cache -t 镜像名称 Dockerfile目录</code></li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/buildImageJDK.png"></p></li><li><p>运行镜像</p><ul><li><code>docker run -d -it </code>镜像名称:版本号</li><li><code>docker ps</code>：查看是否启动成功</li></ul></li><li><p>检查JDK是否安装成功</p><ul><li><code>docker exec -it </code>：容器ID bash</li><li>java</li><li><code>java -version</code></li></ul></li><li></li></ol><ul><li><code>exit</code>：退出容器</li></ul><h2 id="配置TOMCAT"><a href="#配置TOMCAT" class="headerlink" title="配置TOMCAT"></a>配置TOMCAT</h2><p>在有jdk的基础上配置tomcat</p><ol><li><p>重新编辑Dockerfile</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM 镜像名称<br><span class="hljs-comment">#解压并安装jdk</span><br>ADD jdk-8u211-linux-x64.tar.gz /usr/local/src<br><span class="hljs-comment">#设置环境变量</span><br>ENV JAVA_HOME=/usr/local/src/jdk1.8.0_211<br>ENV PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br>ENV CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar<br><span class="hljs-comment"># install tomcat7</span><br>ADD apache-tomcat-7.0.55.tar.gz /usr/local/src<br>ENV CATALINA_HOME /usr/local/src/apache-tomcat-7.0.55<br>ENV PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$CATALINA_HOME</span>/bin<br><span class="hljs-comment">#对外访问的端口</span><br>EXPOSE 8080<br><span class="hljs-comment">#执行命令</span><br>CMD [<span class="hljs-string">&quot;/usr/local/src/apache-tomcat-7.0.55/bin/catalina.sh&quot;</span>,<span class="hljs-string">&quot;run&quot;</span>]<br></code></pre></td></tr></table></figure></li><li><p>创建镜像</p><ul><li><code>docker build -t 镜像名称:镜像版本 Dockerfile目录</code>：创建镜像</li></ul></li><li><p>启动镜像</p><ul><li>&#96;docker run -d –name 容器别名 -p 8001:8080 镜像名称:镜像版本</li></ul></li><li><p>访问tomcat</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/buildSuccessTomcat.png"></p></li></ol><h2 id="部署war包"><a href="#部署war包" class="headerlink" title="部署war包"></a>部署war包</h2><ol><li><p>重新编辑Dockerfile文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM 镜像名称<br><span class="hljs-comment">#解压并安装jdk</span><br>ADD jdk-8u211-linux-x64.tar.gz /usr/local/src<br><span class="hljs-comment">#设置环境变量</span><br>ENV JAVA_HOME=/usr/local/src/jdk1.8.0_211<br>ENV PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br>ENV CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar<br><span class="hljs-comment"># install tomcat7</span><br>ADD apache-tomcat-7.0.55.tar.gz /usr/local/src<br>ENV CATALINA_HOME /usr/local/src/apache-tomcat-7.0.55<br>ENV PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$CATALINA_HOME</span>/bin<br>RUN <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$CATALINA_HOME</span>/webapps/*<br><br><span class="hljs-comment">#deploy the war</span><br>COPY ROOT.war <span class="hljs-variable">$CATALINA_HOME</span>/webapps/ROOT/ROOT.war<br>WORKDIR <span class="hljs-variable">$CATALINA_HOME</span>/webapps/ROOT<br>RUN jar xvf ROOT.war<br>RUN <span class="hljs-built_in">rm</span> -rf ROOT.war<br><br><span class="hljs-comment">#对外访问的端口</span><br>EXPOSE 8080<br><span class="hljs-comment">#执行命令</span><br>CMD [<span class="hljs-string">&quot;/usr/local/src/apache-tomcat-7.0.55/bin/catalina.sh&quot;</span>,<span class="hljs-string">&quot;run&quot;</span>]<br></code></pre></td></tr></table></figure></li><li><p>上传文件到虚拟机中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 上传文件到虚拟机中/user/local/src/docker/EasyMall.war</span><br><span class="hljs-comment"># 修改文件名文ROOT.war</span><br><span class="hljs-built_in">mv</span> EasyMall.war ROOT.war<br></code></pre></td></tr></table></figure></li><li><p>制作镜像</p><ul><li><code>docker build -t 镜像名称:镜像版本</code></li></ul></li><li><p>启动镜像</p><ul><li><code>docker run -d --name 镜像别名 -p 8000:8080 镜像名称:镜像版本</code></li></ul></li><li><p>访问这个项目</p></li></ol><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/dockerWebSuccess.png"></p><h1 id="Docker数据卷"><a href="#Docker数据卷" class="headerlink" title="Docker数据卷"></a>Docker数据卷</h1><p>有状态容器都有数据持久化需求。Docker 采用 AFUS 分层文件系统时，文件系统的改动都是发生在最上面的容器层。在容器的生命周期内，它是持续的，包括容器在被停止后。但是，当容器被删除后，该数据层也随之被删除了。因此，Docker 采用 volume （卷）的形式来向容器提供持久化存储。</p><p><code>docker run -p 53306:3306 -v $PWD/msyql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql5719 -d bf1219a0a00d</code></p><p>一个 data volume是容器中绕过文件系统的一个特定的目录。它被设计用来保存数据，而不管容器的生命周期。因此，当你删除一个容器时，Docker 肯定不会自动地删除一个volume。</p><p><strong>注意</strong>，在容器被删除后，&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;xxx&#x2F;_data目录及其中的内容都还会保留下来，但是，新启动的容器无法再使用这个目录，也就是说，已有的数据不能自动地被重复使用了。</p><h2 id="配置具有mysql的镜像"><a href="#配置具有mysql的镜像" class="headerlink" title="配置具有mysql的镜像"></a>配置具有mysql的镜像</h2><ol><li><p>下载镜像</p><ul><li><code>docker pull mysql:5.7.19</code></li></ul></li><li><p>启动并设置数据卷</p><ul><li><code>docker run -p 53306:3306 -v $PWD/msyql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql_test -d  bf1219a0a00d</code></li><li>参数说明：<ul><li><code>-v $PWD/mysql:/var/lib/mysql</code>：将当前目录下的&#x2F;mysql挂载到容器的&#x2F;var&#x2F;lib&#x2F;mysql；当容器被关闭或删除时，&#x2F;var&#x2F;lib&#x2F;mysql目录中的实例化文件会被记录到当前目录下新建的&#x2F;mysql文件夹中</li><li><code>-e MYSQL_ROOT_PASSWORD=root</code>：初始root账号的密码root</li></ul></li></ul></li><li><p>进入容器</p><ul><li><code>docker exec -it mysql_test bash</code></li></ul></li><li><p>进入mysql</p><ul><li><code>mysql -u root -p</code>：root账号登录</li><li><code>grant all privileges on *.* to root@&quot;%&quot; identified by &quot;root&quot; with grant option;</code>：赋予权限</li><li><code>flush privileges;</code>：刷新权限配置</li></ul></li><li><p>添加mysql数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE IF EXISTS `user`;<br><br>CREATE TABLE `user` (<br>  `ID` INT(11) NOT NULL AUTO_INCREMENT,<br>  `NAME` VARCHAR(30) DEFAULT NULL,<br>  `BIRTHDAY` DATETIME DEFAULT NULL,<br>  `ADDRESS` VARCHAR(200) DEFAULT NULL,<br>  PRIMARY KEY (`ID`)<br>) ENGINE=INNODB DEFAULT CHARSET=utf8;<br><br>#插入数据<br>insert  into `user`(`ID`,`NAME`,`BIRTHDAY`,`ADDRESS`) values (1,&#x27;夏言&#x27;,&#x27;1573-01-01 00:00:00&#x27;,&#x27;桂州村&#x27;),(2,&#x27;严嵩&#x27;,&#x27;1587-01-01 00:00:00&#x27;,&#x27;分宜县城介桥村&#x27;),(3,&#x27;徐阶&#x27;,&#x27;1580-01-01 00:00:00&#x27;,&#x27;明松江府华亭县&#x27;),(4,&#x27;高拱&#x27;,&#x27;1566-01-01 00:00:00&#x27;,&#x27;河南省新郑市高老庄村&#x27;),(5,&#x27;张居正&#x27;,&#x27;1558-01-01 00:00:00&#x27;,&#x27;江陵&#x27;);<br></code></pre></td></tr></table></figure></li><li><p>停止容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker ps<span class="hljs-comment">#查看开启的容器</span><br>docker stop 4f1dd82095c1<span class="hljs-comment">#停止指定的容器</span><br>docker ps<br>docker ps -a<br></code></pre></td></tr></table></figure></li><li><p>再次打开容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker start 4f1dd82095c1<span class="hljs-comment">#开启停止的容器</span><br>docker ps<span class="hljs-comment">#查看容器</span><br>docker <span class="hljs-built_in">exec</span> -it 71621b64efc8 bash<span class="hljs-comment">#进入容器</span><br>mysql -uroot –proot<span class="hljs-comment">#登录</span><br>mysql&gt; use test_db;<span class="hljs-comment">#打开数据库</span><br>mysql&gt; <span class="hljs-keyword">select</span> * from user;<span class="hljs-comment">#查看user表</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装配置</title>
    <link href="/2019/07/13/dockerInstall/"/>
    <url>/2019/07/13/dockerInstall/</url>
    
    <content type="html"><![CDATA[<h1 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h1><p>docker官方文档要求必须运行在Linux kernel 3.8以上，所以需要安装在Centos7或者Ubantu系统上。</p><h2 id="安装必要linux组件"><a href="#安装必要linux组件" class="headerlink" title="安装必要linux组件"></a>安装必要linux组件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install lrzsz <span class="hljs-comment">#安装上传下载组件</span><br><span class="hljs-built_in">uname</span> –a<span class="hljs-comment">#检查当前Linux内核版本</span><br><span class="hljs-built_in">sudo</span> yum makecache fast <span class="hljs-comment">#更新yum软件包索引</span><br></code></pre></td></tr></table></figure><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop firewalld.service<span class="hljs-comment">#关闭防火墙服务</span><br>systemctl <span class="hljs-built_in">disable</span> firewalld.service  <span class="hljs-comment">#禁止防火墙开启启动</span><br></code></pre></td></tr></table></figure><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><h2 id="进入docker官网"><a href="#进入docker官网" class="headerlink" title="进入docker官网"></a>进入docker官网</h2><p><a href="https://docs.docker.com/">官网地址</a></p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/dockerNet1.png"></p><ul><li>Docker安装主要分三种<ol><li>大多数用户设置Docker的仓库并从中安装，以简化安装和升级任务。这是推荐的方法。（本例主将这种方法，其他方法均可在docker官网中学习查看）</li><li>部分用户通过下载RPM压缩包安装，这样后续的优化和更新均手动实现，主要是用在在一些不能连接外网的内部系统中</li><li>如果是一些测试或开发环境中，一些用户会使用自动化便捷式安装</li></ol></li></ul><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><p>下载需要的依赖包组件，安装的<code>yum-utils</code>提供<code>yum-config-manager</code>工具用于操作设置远程仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">sudo</span> yum makecache fast <span class="hljs-comment">#更新yum软件包索引</span><br>$ <span class="hljs-built_in">sudo</span> yum install -y yum-utils <span class="hljs-comment">#安装工具包，缺少这些依赖将无法完成</span><br></code></pre></td></tr></table></figure><p>需要先用以下命令添加一个远程仓库，docker会从这个仓库拉去所需的镜像或安装包</p><p><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code></p><h3 id="远程仓库默认设置"><a href="#远程仓库默认设置" class="headerlink" title="远程仓库默认设置"></a>远程仓库默认设置</h3><p>部分设置默认是关闭的可以用以下命令去打开</p><ul><li>启动<strong>nightly repository</strong></li></ul><p><code>sudo yum-config-manager --enable docker-ce-nightly</code></p><ul><li>允许测试渠道</li></ul><p><code>sudo yum-config-manager --enable docker-ce-test</code></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>执行以下指令下载安装最新版的docker CE客户端和docker容器，并决定是否到下一步安装特殊版本</li></ul><p><code>sudo yum install docker-ce docker-ce-cli containerd.io</code></p><p>如果系统尝试让你验证GPGkey，如果显示的key是<code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code>则接受它</p><p>docker已安装完毕但是还没有启动，docker组已被创建但是还没有用户被添加到这个组中</p><ul><li><p>如果安装特殊版的Docker CE则需要先列表出可安装的版本，并选择你需要的版本进行安装</p><ol><li><p>yum list docker-ce –showduplicates | sort -r<code>查看可安装的Docker CE版本</code></p></li><li><p>选择好版本后用<code>sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</code>安装你需要的版本</p></li></ol></li></ul><h1 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h1><ul><li>启动</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> systemctl start docker<br>或者<br><span class="hljs-built_in">sudo</span> service docker start<br>service docker start        <span class="hljs-comment">#启动docker</span><br>chkconfig docker on         <span class="hljs-comment">#加入开机启动</span><br></code></pre></td></tr></table></figure><ul><li>查看版本</li></ul><p><code>sudo docker version</code></p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>可以用<code>docker images</code>查看本地镜像，可发现刚安装后docker是没有本地镜像的，因此我们需要拉取镜像</p><ol><li><p>下载最新版本的hello-world镜像</p><p>$ docker pull hello-world        </p></li><li><p>启动运行镜像</p><p>$ sudo docker run hello-world  </p></li><li><p>也可以直接执行步骤2，当docker发现没有这个镜像时，也会自动远程拉取hello-world镜像</p></li></ol><h1 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h1><ul><li>Docker安装是从国外网站下载安装，包很大，网络很差，很容易断，出现异常。当出现异常，很简单，再次尝试。如果还不行，就深夜或者清晨再试。往往就好了</li><li>有时也会因为本地的yum混乱，可以清除更新下：<ul><li><code>sudoyum makecache fast            #更新yum软件包索引</code></li></ul></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker --<span class="hljs-built_in">help</span><span class="hljs-comment">#帮助</span><br>docker –v<span class="hljs-comment">#简单查看版本</span><br>docker version<span class="hljs-comment">#查看版本</span><br>docker info<span class="hljs-comment">#查看信息</span><br></code></pre></td></tr></table></figure><h2 id="组成结构"><a href="#组成结构" class="headerlink" title="组成结构"></a>组成结构</h2><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/dockerConsistem.png"></p><p>docker会自动给docker容器配置一个vip虚拟ip地址</p><p>bash-4.1#提示符就代表进入docker容器内部</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker容器技术</title>
    <link href="/2019/07/12/Docker/"/>
    <url>/2019/07/12/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h1><p>阿里2016年的双十一，数万台服务器支持，所有的交易系统全部都跑在了Docker容器中，撑起来每秒钟17.5万笔的交易峰值。4小时26分31秒交易362亿，超过2013年双十一全体交易，最终双十一交易额1207亿，全球之最。</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/supplierCount.png"></p><p>要支持这么的大的访问量，就需要提升系统的并发量，要提升系统的并发量，最直接的办法就是提升服务器的数量。阿里为支持双十一，提前准备万台服务器，万兆带宽。直播也是如此事先要准备大量服务器，百万级粉丝需要准备上千台服务器。</p><p>但准备多少够呢？预计多了，成本就白支出了，预计少了，洪峰来了，系统倒了，现场砸了，饭碗丢了。<u>能否动态感知快速响应呢？这就是云所做的，而云背后就是docker。</u></p><h1 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h1><p>Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于2013年3月赠与 Apache。Docker 提供了一个可以运行你的应用程序的封套(envelope)，或者说容器。它开源立刻吸引了大量的关注和讨论，导致 dotCloud 公司都改名为 Docker Inc。</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/dockerCloud.png"></p><p>它最初是用 Go 语言编写的，基于Linux内核的cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于LXC（LinuXContainers，linux 容器），从 0.7 以后开始去除 LXC，转而使用自行开发的libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。它就相当于是加在 LXC上的管道，允许开发者在更高层次的概念上工作。</p><p><u><strong>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</strong></u></p><p><a href="https://www.docker.com/">官网</a></p><p>2017年3月2日，Docker官方宣布企业版到来。版本也从1.13.x一跃到17.03。分成两个版本CE和EE。CE针对免费用户（开源），EE针对企业用户（收费）。</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/DockerEE.png"></p><h1 id="Docker组成"><a href="#Docker组成" class="headerlink" title="Docker组成"></a>Docker组成</h1><p>Docker 使用客户端-服务器 (C&#x2F;S) 架构模式。Docker 客户端会与 Docker 守护进程进行通信。Docker 守护进程会处理复杂繁重的任务，例如建立、运行、发布你的 Docker 容器。Docker 客户端和守护进程可以运行在同一个系统上，<strong>当然你也可以使用 Docker 客户端去连接一个远程的 Docker 守护进程。Docker 客户端和守护进程之间通过socket 或者 RESTful API 进行通信。</strong></p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/dockerClient.png"></p><h1 id="Docker概念"><a href="#Docker概念" class="headerlink" title="Docker概念"></a>Docker概念</h1><p>VM虚拟机的出现可以让服务器资源可以充分利用，一台服务器上可以安装多个VM，而每个VM又形成资源隔离，使不同的VM可以使用同一台服务器，却互相不干扰。Docker同理，它也是将硬件资源抽象。</p><p>Docker两个最重要的概念是镜像和容器。镜像类似虚拟机的快照，但更轻量，非常非常轻量。举例来说，VM相当于绿皮火车，Docker就相当于劳斯莱斯小汽车。VM的快照通常2<del>3G，而Docker只有100</del>300M。</p><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>简单说，镜像就是一个只读模板。</p><p>创建Docker镜像有几种方式，多数是在一个现有镜像基础上创建新镜像，因为几乎你需要的任何东西都有了公共镜像，包括所有主流Linux发行版，你应该不会找不到你需要的镜像。不过就算你想从头构建一个镜像也有好几种方式。</p><p>实现的方式有两种：在一个文件Dockerfile中指定一个基础镜像及需要完成的修改；或通过“运行”一个镜像，对其进行修改并提交。不同方式各有优点，不过一般会使用文件Dockerfile来指定所做的变化。</p><p>镜像拥有唯一ID，以及一个供人阅读的名字和标签对。镜像可以命名为类似ubuntu:latest、ubuntu:precise、django:1.6、django:1.7等等。</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p><p>可以从镜像中创建容器，这等同于从快照中创建虚拟机，不过更轻量。应用是由容器运行的。容器与虚拟机一样，是隔离的。它们也拥有一个唯一ID和唯一的供人阅读的名字。容器有必要对外暴露服务，因此Docker允许暴露容器的特定端口。</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/dockerPort.png"></p><p>容器启动时，将被分配一个随机的私有IP，其它容器可以使用这个IP地址与其进行通讯。这点非常重要，原因有二：一是它提供了容器间相互通信的渠道，二是容器将共享一个本地网络。</p><p>要开启容器间通讯，Docker允许你在创建一个新容器时引用其它现存容器，在你刚创建的容器里被引用的容器将获得一个（你指定的）别名。我们就说，这两个容器链接在了一起。</p><p>因此，如果DB容器已经在运行，我可以创建web服务器容器，并在创建时引用这个DB容器，给它一个别名，比如dbapp。在这个新建的web服务器容器里，我可以在任何时候使用主机名dbapp与DB容器进行通讯。</p><h2 id="数据卷volume"><a href="#数据卷volume" class="headerlink" title="数据卷volume"></a>数据卷volume</h2><p>Docker是只读的，那就产生一个问题，例如mysql，用户有自己的数据，那这部分数据怎么保存呢？Docker提供了数据卷就用来保存持久的数据。</p><p>卷是针对容器的，你可以使用同一个镜像创建多个容器并定义不同的卷。卷保存在运行Docker的宿主文件系统上，你可以指定卷存放的目录，或让Docker保存在默认位置。</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/dockerContaner.png"></p><p>注意：定义了数据卷，Docker迁移就可能失败，可能新的机器没有对应目录。另外，如果数据量非常大，Tb级别的，docker镜像才几百兆。所以并不推荐使用数据卷方式，最好就是只读的，运行时只产生临时数据，不产生业务数据，退出、删除无需额外处理。</p><h2 id="仓库repository"><a href="#仓库repository" class="headerlink" title="仓库repository"></a>仓库repository</h2><p>Docker有一个类似版本管理仓库（Repository）的东西，有docker.io提供的官方仓库（index.docker.io，相当于github），也可以自建（叫docker-registry，相当于自己搭建一个小型github）。</p><table><thead><tr><th><strong>Git</strong></th><th><strong>Docker</strong></th></tr></thead><tbody><tr><td>GitHub</td><td>DockerHub</td></tr><tr><td>用户 User  Account</td><td>用户 User Account</td></tr><tr><td>仓库  Repository</td><td>仓库 Repository</td></tr><tr><td>分支 Branch</td><td>镜像 Image</td></tr><tr><td>标签 Tag</td><td>标签 Tag</td></tr><tr><td>Push 推送，上传</td><td>Push 推送，上传</td></tr><tr><td>Pull&#x2F;Clone 拉取&#x2F;克隆</td><td>Pull 拉取</td></tr><tr><td>Commit 提交</td><td>Commit 提交</td></tr><tr><td>Merge 合并</td><td>N&#x2F;A</td></tr></tbody></table><h1 id="剥洋葱"><a href="#剥洋葱" class="headerlink" title="剥洋葱"></a>剥洋葱</h1><p>简单来说docker是利用AUFS文件系统的支持，反复包裹形成无数的镜像，公用相同的部分（Image），又可以形成自己独有的内容（Container）。镜像支持使之可以站在巨人的肩膀上（已经实现的内容），又变化无穷（独有的内容）。</p><p>Container和Image 在Docker的世界里，Image是指一个只读的层（Layer），这里的层是AUFS里的概念，最直观的方式就是看一下docker官方给出的图：</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Docker/dockerAUFS.jpg"></p><p>AUFS的文件系统可以让你一层一层地叠加修改你的文件，最底下的文件系统是只读的，如果需要修改文件，AUFS会增加一个可写的层（Layer），这样有很多好处。例如，不同的Container可以共享底层的只读文件系统（同一个Kernel），使得你可以跑N多个Container而不至于你的硬盘被挤爆了，复用了相同的内容（本地镜像库中的镜像），大大减小了存储空间。</p><h1 id="Docker的特点"><a href="#Docker的特点" class="headerlink" title="Docker的特点"></a>Docker的特点</h1><table><thead><tr><th><strong>序号</strong></th><th><strong>特征</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td><strong>更高效的利用系统资源</strong></td><td>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</td></tr><tr><td><strong>2</strong></td><td><strong>更快速的启动时间</strong></td><td>传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</td></tr><tr><td><strong>3</strong></td><td><strong>一致的运行环境</strong></td><td>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现“这段代码在我机器上没问题啊”这类问题。</td></tr><tr><td><strong>4</strong></td><td><strong>持续交付和部署</strong></td><td>对开发和运维（DevOps）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过  Dockerfile 来进行镜像构建，并结合持续集成(Continuous  Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合持续部署(Continuous  Delivery&#x2F;Deployment)系统进行自动部署。而且使用 Dockerfile 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</td></tr><tr><td><strong>5</strong></td><td><strong>更轻松的迁移</strong></td><td>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker  可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</td></tr><tr><td><strong>6</strong></td><td><strong>更轻松的维护和扩展</strong></td><td>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker  团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</td></tr><tr><td><strong>7</strong></td><td><strong>敏捷开发</strong></td><td>有了Docker***的支持，部署速度快捷，三大环境的统一（开发、测试、生产环境），支持敏捷开发。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2019/07/01/Redis/"/>
    <url>/2019/07/01/Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis介绍（缓存）"><a href="#Redis介绍（缓存）" class="headerlink" title="Redis介绍（缓存）"></a>Redis介绍（缓存）</h1><ul><li><p>Redis是一个开源的使用ANSIC语言编写、支持网络、可基于内存亦可<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=10894095&ss_c=ssc.citiao.link">持久化</a>的日志型、Key-Value数据库</p></li><li><p>为什么需要Redis？</p><ul><li>CRUD操作中，80%是业务查询，20%是业务新增、删除、修改操作</li><li>数据不会频繁变更</li><li>支持当前主流分布式架构</li></ul></li></ul><h1 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h1><h2 id="编译工具安装"><a href="#编译工具安装" class="headerlink" title="编译工具安装"></a>编译工具安装</h2><ul><li>安装redis运行环境（基于C语言）</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">yum -y install gcc automake autoconf libtool make#gcc编译环境<br>yum -y install lrzsz    #文件上传组件<br></code></pre></td></tr></table></figure><ul><li>关于yum命令<ul><li>yum（ Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。</li><li>基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装</li><li><a href="https://www.runoob.com/linux/linux-yum.html">相关链接</a></li></ul></li></ul><h2 id="linux安装Redis"><a href="#linux安装Redis" class="headerlink" title="linux安装Redis"></a>linux安装Redis</h2><ul><li><a href="https://redis.io/">获取Redis安装包</a></li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/redis/redis_loading.png"></p><ul><li>执行linux命令下载并安装Redis</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> –p /usr/local/src/redis<br><span class="hljs-built_in">cd</span> /usr/local/src/redis<br>wget http://download.redis.io/releases/redis-5.0.0.tar.gz<br>tar xzf redis-5.0.0.tar.gz <span class="hljs-comment">#解压tar xvf redis-3.0.7.tar.gz</span><br><span class="hljs-built_in">cd</span> redis-5.0.0<br>make<span class="hljs-comment">#下载后编译，过程稍长</span><br>make install<span class="hljs-comment">#进行安装</span><br>make PREFIX=/usr/local/src/redis install<span class="hljs-comment">#指定安装目录</span><br><br></code></pre></td></tr></table></figure><ul><li>启动配置</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-server <span class="hljs-comment">#默认找redis.conf配置文件</span><br>redis-server &amp;<span class="hljs-comment">#上面ctrl+c中断reis会退出，这个不会</span><br>redis-server redis6380.conf<span class="hljs-comment">#指定配置文件，这样可以启动多个实例</span><br><span class="hljs-comment">#注意两种启动方式的差异</span><br>ps -ef|grep redis  <span class="hljs-comment">#查看是否有后台服务</span><br>root      3511     1  0 16:29 ?   00:00:01 redis-server *:6379<br>root      3515     1  0 16:29 ?   00:00:01 redis-server 127.0.0.1:6380<br>注释掉redis.conf配置文件中的48行；# <span class="hljs-built_in">bind</span> 127.0.0.1 ::1即可<br><br></code></pre></td></tr></table></figure><ul><li>查看版本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-server –v<br>Redis server v=3.2.5 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=e6c4c3113548f6b0<br>redis-cli –v<br></code></pre></td></tr></table></figure><ul><li>详细信息</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli<span class="hljs-comment">#需要进入redis客户端查看</span><br>127.0.0.1:6379&gt; info<span class="hljs-comment">#查看当前redis节点的详细配置信息</span><br></code></pre></td></tr></table></figure><h1 id="redis常用命令"><a href="#redis常用命令" class="headerlink" title="redis常用命令"></a>redis常用命令</h1><h2 id="测试服务是否正常"><a href="#测试服务是否正常" class="headerlink" title="测试服务是否正常"></a>测试服务是否正常</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#默认连接：IP 127.0.0.1 端口 6379</span><br>redis-cli<br><span class="hljs-comment">#指定IP端口：</span><br>redis-cli –h 127.0.0.1 –p 6379<br><span class="hljs-comment">#Redis提供了PING-PONG机制，测试与客户端和服务器链接是否正常</span><br>redis-cli ping<br><span class="hljs-comment">#或</span><br>redis-cli<br>redis 127.0.0.1:6379&gt;ping<br>PONG<br><br></code></pre></td></tr></table></figure><h2 id="redis场景命令回复"><a href="#redis场景命令回复" class="headerlink" title="redis场景命令回复"></a>redis场景命令回复</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#状态回复（最简单的回复-redis提供的测试命令）</span><br>redis&gt;PING<br>PONG<br>127.0.0.1:6379&gt;SET <span class="hljs-built_in">test</span> 123<br>OK<br><span class="hljs-comment">#错误回复（以error开头，后面跟着错误信息）</span><br>127.0.0.1:6379&gt;TEST<br>(error) ERR unknown <span class="hljs-built_in">command</span> <span class="hljs-string">&#x27;TEST&#x27;</span><br><span class="hljs-comment">#整数回复</span><br>127.0.0.1:6379&gt;INCR test_incr<br>(<span class="hljs-built_in">integer</span>) 1<br><span class="hljs-comment">#字符串回复（最长久的一种回复，双引号包裹）</span><br>127.0.0.1:6379&gt;get <span class="hljs-built_in">test</span><br>“123”<br><span class="hljs-comment">#多行字符串回复</span><br>127.0.0.1:6379&gt;KEYS *<br>1) <span class="hljs-string">&quot;test_incr&quot;</span><br>2) <span class="hljs-string">&quot;test&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="Redis退出"><a href="#Redis退出" class="headerlink" title="Redis退出"></a>Redis退出</h2><ul><li>exit</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#退出--只会退出客户端</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">exit</span><br><span class="hljs-comment">#关闭--将关闭整个Redis服务</span><br>127.0.0.1:6379&gt; shutdown<br></code></pre></td></tr></table></figure><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h3><ul><li>字符串类型是redis中最基本的数据类型，它能存储任何形式的字符串，包括二进制数据。可以存储JSON化的对象、字节数组等。一个字符串类型键允许存储的数据最大容量是512MB。</li><li>赋值与取值：<ul><li><code>SET key value</code></li><li><code>GET key</code></li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">127.0.0.1:6379&gt; keys *<br>(empty list or <span class="hljs-built_in">set</span>)<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> <span class="hljs-built_in">test</span> 123<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> test1 ab<br>OK<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;test1&quot;</span><br>2) <span class="hljs-string">&quot;test&quot;</span><br>127.0.0.1:6379&gt; get <span class="hljs-built_in">test</span><br><span class="hljs-string">&quot;123&quot;</span><br>127.0.0.1:6379&gt; get test1<br><span class="hljs-string">&quot;abc&quot;</span><br>127.0.0.1:6379&gt; get test2<br>(nil)<br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure><h3 id="keys通配符"><a href="#keys通配符" class="headerlink" title="keys通配符"></a>keys通配符</h3><ul><li>获取符合规则的建名列表。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">KEYS *<br>keys <span class="hljs-built_in">test</span>[_]*<br>keys t[a-d]<br>说明：<br>？匹配一个字符<br>*   匹配任意个（包括0个）字符<br>[]  匹配括号间的任一字符，可以使用“-“表示范围。如a[a-d]匹配ab/ac/ad<br>\x匹配字符x，用于转义符合，如果要匹配“？“就需要使用\?<br></code></pre></td></tr></table></figure><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><ul><li>redis默认支持16个数据库，对外都是以一个从0开始的递增数字命名，可以通过参数database来修改默认数据库个数。客户端连接redis服务后会自动选择0号数据库，可以通过select命令更换数据库，例如选择1号数据库：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">127.0.0.1:6379&gt;SELECT 1<br>OK<br>127.0.0.1:6379&gt;GET <span class="hljs-built_in">test</span><br>(nil)<br></code></pre></td></tr></table></figure><ul><li>注意<ul><li>Redis不支持自定义数据库名称。</li><li>Redis不支持为每个数据库设置访问密码。</li><li>Redis的多个数据库之间不是安全隔离的，FLUSHALL命令会清空所有数据库的数据。</li></ul></li></ul><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><ul><li>清除屏幕中的内容</li></ul><h3 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h3><ul><li>判断Redis中的某个键是否存在<ul><li>如果存在返回1</li><li>不存在返回0</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">1) <span class="hljs-string">&quot;name&quot;</span><br>2) <span class="hljs-string">&quot;num&quot;</span><br>127.0.0.1:6379&gt; exists name<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; exists name2<br>(<span class="hljs-built_in">integer</span>) 0<br></code></pre></td></tr></table></figure><h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><ul><li>删除一个或多个键，用空格隔开表示多个键</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;name&quot;</span><br>2) <span class="hljs-string">&quot;num&quot;</span><br>127.0.0.1:6379&gt; del name num<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; keys *<br>(empty list or <span class="hljs-built_in">set</span>)<br></code></pre></td></tr></table></figure><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><ul><li>获得键值的数据类型，返回值可能是string（字符串）、hash（散列类型）、list（列表类型）、set（集合类型）、zset（有序集合类型）。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;test1&quot;</span><br>2) <span class="hljs-string">&quot;test&quot;</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">type</span> <span class="hljs-built_in">test</span><br>string<br>127.0.0.1:6379&gt; <span class="hljs-built_in">type</span> test1<br>string<br></code></pre></td></tr></table></figure><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><ul><li>获取命令帮助</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">127.0.0.1:6379&gt; <span class="hljs-built_in">help</span> <span class="hljs-built_in">type</span><br><br>  TYPE key<br>  summary: Determine the <span class="hljs-built_in">type</span> stored at key<br>  since: 1.0.0<br>  group: generic<br></code></pre></td></tr></table></figure><ul><li>也可在<a href="http://www.redis.io/">Redis官网</a>直接获取帮助</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/redis/redis_help.png" alt="redis_help"></p><h3 id="flushall-flushdb"><a href="#flushall-flushdb" class="headerlink" title="flushall&#x2F;flushdb"></a>flushall&#x2F;flushdb</h3><ul><li>清除数据库<ol><li>flushall清除所有数据库</li><li>flushdb清除当前数据库</li></ol></li></ul><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><ul><li><p>设置num为key</p></li><li><p>递增递减</p><ul><li><code>incr num</code>  为num递增1</li><li><code>incrby num 3</code> 为num递增3</li><li>如果num不存在，则自动会创建，如果存在自动+1</li><li><code>decr num</code> 为num递减1</li><li><code>decrby num 3</code> 为num递减3</li></ul></li><li><p>浮点递增</p><ul><li>浮点递增会有精度问题，2.8.7注意在新版本中已经修正了这个浮点精度问题。3.0.7</li><li><code>incrbyfloat num 0.3</code> 为num递增0.3</li></ul></li><li><p>字符串拼接</p><ul><li>向尾部追加值。如果键不存在则创建该键，其值为写的value，即相当于SET key<br>value。返回值是追加后字符串的总长度。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; keys *<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;num&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;test1&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get test<br><span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; append test <span class="hljs-string">&quot;abc&quot;</span><br>(integer) <span class="hljs-number">6</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get test<br><span class="hljs-string">&quot;123abc&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>返回键值字符串长度</p><ul><li>如果键不存在则返回0。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; set name dsfjawoeijfoaewjf;aijefj<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; strlen <span class="hljs-title function_">name</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">24</span><br><span class="hljs-comment">//注意，如果键值为空串，返回也是0。</span><br></code></pre></td></tr></table></figure></li><li><p>多key赋值</p><ul><li>同时设置&#x2F;获取多个键值</li><li>语法：<ul><li><code>MSET keyvalue [key value …]</code></li><li><code>MGET key [key …]</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; mset a <span class="hljs-number">1</span> b <span class="hljs-number">2</span> c <span class="hljs-number">3</span><br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; mget a b c<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt;<br></code></pre></td></tr></table></figure></li></ul><hr><h1 id="Redis生存时间"><a href="#Redis生存时间" class="headerlink" title="Redis生存时间"></a>Redis生存时间</h1><ul><li><p>expire</p><ul><li>Redis在实际使用过程中更多的用作缓存，然而缓存的数据一般都是需要设置生存时间的，即到期后数据自动销毁</li><li>语法：<code>EXPIRE key seconds</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; flushall<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; set bomb tnt<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; expire bomb <span class="hljs-number">10</span><br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl <span class="hljs-title function_">bomb</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">5</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl <span class="hljs-title function_">bomb</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">3</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl <span class="hljs-title function_">bomb</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">3</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl <span class="hljs-title function_">bomb</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">2</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl <span class="hljs-title function_">bomb</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl <span class="hljs-title function_">bomb</span><br><span class="hljs-params">(integer)</span> -<span class="hljs-number">2</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl <span class="hljs-title function_">bomb</span><br><span class="hljs-params">(integer)</span> -<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li>TTL查看key的剩余时间，当返回值为-2时，表示键被删除。</li><li>当 key 不存在时，返回 -2 。当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以毫秒为单位，返回<br>key 的剩余生存时间。</li><li>注意：在 Redis 2.8以前，当 key 不存在，或者 key 没有设置剩余生存时间时，命令都返回 -1 。</li></ul></li><li><p>persist</p><ul><li>语法：persist key</li><li>重新将键值持久化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; set bomb tnt<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; expire bomb <span class="hljs-number">60</span><br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl <span class="hljs-title function_">bomb</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">49</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; persist <span class="hljs-title function_">bomb</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl <span class="hljs-title function_">bomb</span><br><span class="hljs-params">(integer)</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>pexpire</p><ul><li>语法：<code>pexpire key milliseconds</code></li><li>设置生存时间为毫秒，可以做到更精确的控制。</li><li>可用于秒杀业务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; set bomb tnt<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; pexpire bomb <span class="hljs-number">10000</span><br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl <span class="hljs-title function_">bomb</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">6</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl <span class="hljs-title function_">bomb</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">3</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl <span class="hljs-title function_">bomb</span><br><span class="hljs-params">(integer)</span> -<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="Redis的hash使用"><a href="#Redis的hash使用" class="headerlink" title="Redis的hash使用"></a>Redis的hash使用</h1><ul><li>假设有User对象以JSON序列化的形式存储到redis中，User对象有id、username、password、age、name等属性，存储的过程如下：<ul><li>User对象-&gt;json(string)-&gt;redis</li></ul></li><li>如果在业务上只是更新age属性，则需要Redis数据类型的散列类型hash</li><li>散列类型存储了字段（field）和字段值的映射，<strong>但字段值只能是字符串</strong>，不支持其他类型，也就是说，散列类型不能嵌套其他的数据类型。一个散列类型可以包含最多232-1个字段。</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/redis/person_value.png"></p><h2 id="hash基础命令"><a href="#hash基础命令" class="headerlink" title="hash基础命令"></a>hash基础命令</h2><ul><li>hget、hset、hincrby、hmset、hmget、hexists、hdel增删改查字符串操作等与普通字符串类型一致，但取值或操作时需考虑字段值的添加<ul><li>语法：基础命令 键 字段 （值）</li><li>案例：<code>hincrby person age 2 或 hlen person name</code></li></ul></li><li>hgetall<ul><li>获取所有字段和值</li></ul></li><li>hlen<ul><li>获取字段数量</li></ul></li><li>hkeys&#x2F;hvals<ul><li>只获属性或只获取属性值</li></ul></li></ul><h2 id="Jedis演示"><a href="#Jedis演示" class="headerlink" title="Jedis演示"></a>Jedis演示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.redis;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPool;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPoolConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisPoolDemoCMD</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 构建连接池配置信息</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">jedisPoolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        <span class="hljs-comment">// 设置最大连接数</span><br>        jedisPoolConfig.setMaxTotal(<span class="hljs-number">50</span>);<br><br>        <span class="hljs-comment">// 构建连接池</span><br>        <span class="hljs-type">JedisPool</span> <span class="hljs-variable">jedisPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(jedisPoolConfig, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>);<br><br>        <span class="hljs-comment">// 从连接池中获取连接</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> jedisPool.getResource();<br><br>        jedis.hset(<span class="hljs-string">&quot;USER_1&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        jedis.hset(<span class="hljs-string">&quot;USER_1&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        <br>        Map&lt;String, String&gt; val = jedis.hgetAll(<span class="hljs-string">&quot;USER_1&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : val.entrySet()) &#123;<br>            System.out.println(entry.getKey() + <span class="hljs-string">&quot;  &quot;</span> + entry.getValue());<br>        &#125;<br><br>        <span class="hljs-comment">// 将连接还回到连接池中</span><br>        jedisPool.returnResource(jedis);<br><br>        <span class="hljs-comment">// 释放连接池</span><br>        jedisPool.close();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//redis中测试</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; hgetall USER_1<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;username&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;zhangsan&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;password&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; hgetall <span class="hljs-title function_">user_1</span><br><span class="hljs-params">(empty list or set)</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt;<br><span class="hljs-comment">//注意：key值的大小写是区分的。</span><br></code></pre></td></tr></table></figure><h1 id="Redis的List使用"><a href="#Redis的List使用" class="headerlink" title="Redis的List使用"></a>Redis的List使用</h1><ul><li>一个列表最多可以包含232-1个元素（4294967295，每个表超过近43亿个元素）</li><li>Redis的list类型其实就是一个每个子元素都是string类型的双向链表。可以通过push,pop操作从链表的头部或者尾部添加删除元素。这使得list既可以用作栈，也可以用作队列。</li><li>有意思的是list的pop操作还有阻塞版本的，<strong>当我们[lr]pop一个list对象时，如果list是空，或者不存在，会立即返回nil。但是阻塞版本的b[lr]pop则可以阻塞，当然可以加超时时间，超时后也会返回nil。</strong><u>为什么要阻塞版本的pop呢，主要是为了避免轮询</u>。举个简单的例子如果我们用list来实现一个工作队列。执行任务的thread可以调用阻塞版本的pop去获取任务这样就可以避免轮询去检查是否有任务存在。当任务来时候工作线程可以立即返回，也可以避免轮询带来的延迟。</li></ul><h2 id="List的基本命令"><a href="#List的基本命令" class="headerlink" title="List的基本命令"></a>List的基本命令</h2><ul><li>lpush</li><li>在key对应list的头部添加字符串元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lpush career <span class="hljs-title function_">teacher</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lpush career <span class="hljs-title function_">doctor</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">2</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lpush career <span class="hljs-title function_">student</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">3</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lrange career <span class="hljs-number">0</span> -<span class="hljs-number">1</span><span class="hljs-comment">//0 -1可以输出全部</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;student&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;doctor&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;teacher&quot;</span><br></code></pre></td></tr></table></figure><ul><li>rpush</li><li>在key对应list的尾部添加字符串元素（r是右边l是左边）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; rpush career <span class="hljs-title function_">worker</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">4</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; rpush career <span class="hljs-title function_">engnieer</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">5</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lrange career <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;student&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;doctor&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;teacher&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;worker&quot;</span><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;engnieer&quot;</span><br></code></pre></td></tr></table></figure><ul><li>lrange</li><li>查看list(start end)   – 0到-1可以查看所有内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lrange career <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;student&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;doctor&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;teacher&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;worker&quot;</span><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;engnieer&quot;</span><br></code></pre></td></tr></table></figure><ul><li>del</li><li>同基本String类型操作删除这个list</li><li>linsert</li><li>在key对应list的特定位置之前或之后添加字符串元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; LINSERT career after worker <span class="hljs-title function_">worker1</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">6</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lrange career <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;student&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;doctor&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;teacher&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;worker&quot;</span><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;worker1&quot;</span><br><span class="hljs-number">6</span>) <span class="hljs-string">&quot;engnieer&quot;</span><br></code></pre></td></tr></table></figure><ul><li>lset</li><li>设置list中指定下标的元素值<ul><li>当下标中有元素则会替换</li><li>负数从尾部计数，第一个数为-1</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lrange career <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;student&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;doctor&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;teacher&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;worker&quot;</span><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;worker1&quot;</span><br><span class="hljs-number">6</span>) <span class="hljs-string">&quot;engnieer&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lset career <span class="hljs-number">4</span> worker(set)<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lrange career <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;student&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;doctor&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;teacher&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;worker&quot;</span><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;worker(set)&quot;</span><br><span class="hljs-number">6</span>) <span class="hljs-string">&quot;engnieer&quot;</span><br></code></pre></td></tr></table></figure><ul><li>lrem</li><li>根据count参数按顺序从删除与参数value相同的值<ul><li>count&gt;0顺序删除</li><li>count&lt;0逆序删除</li><li>count&#x3D;0删除所有</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lrange career <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br> <span class="hljs-number">1</span>) <span class="hljs-string">&quot;student&quot;</span><br> <span class="hljs-number">2</span>) <span class="hljs-string">&quot;doctor&quot;</span><br> <span class="hljs-number">3</span>) <span class="hljs-string">&quot;teacher&quot;</span><br> <span class="hljs-number">4</span>) <span class="hljs-string">&quot;worker&quot;</span><br> <span class="hljs-number">5</span>) <span class="hljs-string">&quot;salier&quot;</span><br> <span class="hljs-number">6</span>) <span class="hljs-string">&quot;engnieer&quot;</span><br> <span class="hljs-number">7</span>) <span class="hljs-string">&quot;worker&quot;</span><br> <span class="hljs-number">8</span>) <span class="hljs-string">&quot;worker&quot;</span><br> <span class="hljs-number">9</span>) <span class="hljs-string">&quot;worker&quot;</span><br><span class="hljs-number">10</span>) <span class="hljs-string">&quot;worker&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lrem career -<span class="hljs-number">4</span> worker<br>(integer) <span class="hljs-number">4</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lrange career <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;student&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;doctor&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;teacher&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;worker&quot;</span><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;salier&quot;</span><br><span class="hljs-number">6</span>) <span class="hljs-string">&quot;engnieer&quot;</span><br></code></pre></td></tr></table></figure><ul><li>ltrim</li><li>根据参数范围，参数范围以外的值全删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; rpush mylist8 <span class="hljs-string">&quot;one&quot;</span><br>(integer) <span class="hljs-number">1</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; rpush mylist8 <span class="hljs-string">&quot;two&quot;</span><br>(integer) <span class="hljs-number">2</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; rpush mylist8 <span class="hljs-string">&quot;three&quot;</span><br>(integer) <span class="hljs-number">3</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; rpush mylist8 <span class="hljs-string">&quot;four&quot;</span><br>(integer) <span class="hljs-number">4</span><br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ltrim mylist8 <span class="hljs-number">1</span> -<span class="hljs-number">1</span><br>OK<br>redis <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lrange mylist8 <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;two&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;three&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;four&quot;</span><br></code></pre></td></tr></table></figure><ul><li>lpop</li><li>从list的头部（左边）删除元素并返回删除的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lrange career <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;student&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;doctor&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;teacher&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;worker&quot;</span><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;salier&quot;</span><br><span class="hljs-number">6</span>) <span class="hljs-string">&quot;engnieer&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lpop career<br><span class="hljs-string">&quot;student&quot;</span><br></code></pre></td></tr></table></figure><ul><li>rpop</li><li>从list的尾部（右边）删除元素，并返回删除元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lrange career <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;student2&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;student&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;doctor&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;teacher&quot;</span><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;worker&quot;</span><br><span class="hljs-number">6</span>) <span class="hljs-string">&quot;salier&quot;</span><br><span class="hljs-number">7</span>) <span class="hljs-string">&quot;engnieer&quot;</span><br><span class="hljs-number">8</span>) <span class="hljs-string">&quot;student3&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; rpop career<br><span class="hljs-string">&quot;student3&quot;</span><br></code></pre></td></tr></table></figure><ul><li>llen</li><li>返回List的长度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; llen <span class="hljs-title function_">career</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><ul><li>lindex</li><li>返回指定下标的元素（不删除元素）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lindex career <span class="hljs-number">3</span><br><span class="hljs-string">&quot;teacher&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; llen <span class="hljs-title function_">career</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><ul><li>rpoplpush</li><li>从第一个list尾部取出数据从头放到第二个list中，并返回删除的数据值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; RPOPLPUSH career newcareer<br><span class="hljs-string">&quot;engnieer&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; lrange newcareer <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;engnieer&quot;</span><br></code></pre></td></tr></table></figure><ul><li><strong>利用链表形成安全的消息队列</strong></li><li>RPOPLPUSH命令实现安全消息队列。Redis链表经常会被用于消息队列的服务，以完成多程序之间的消息交换。假设一个应用程序正在执行LPUSH操作向链表中添加新的元素，我们通常将这样的程序称之为”生产者(Producer)”，而另外一个应用程序正在执行RPOP操作从链表中取出元素，我们称这样的程序为”消费者(Consumer)”。如果此时，消费者程序在取出消息元素后立刻崩溃，由于该消息已经被取出且没有被正常处理，那么我们就可以认为该消息已经丢失，由此可能会导致业务数据丢失，或业务状态的不一致等现象的发生。然而通过使用RPOPLPUSH命令，消费者程序在从主消息队列中取出消息之后再将其插入到备份队列中，直到消费者程序完成正常的处理逻辑后再将该消息从备份队列中删除。同时我们还可以提供一个守护进程，当发现备份队列中的消息过期时，可以重新将其再放回到主消息队列中，以便其它的消费者程序继续处理。</li></ul><h1 id="Redis的set使用"><a href="#Redis的set使用" class="headerlink" title="Redis的set使用"></a>Redis的set使用</h1><ul><li><p>Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。Redis中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。集合中最大的成员数为232 - 1 (4294967295每个集合可存储40多亿个成员)</p><h2 id="sadd"><a href="#sadd" class="headerlink" title="sadd"></a>sadd</h2><ul><li>添加元素，重复元素添加失败，返回0</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; sadd family <span class="hljs-title function_">sister</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; sass family <span class="hljs-title function_">sister</span><br><span class="hljs-params">(error)</span> ERR unknown command `sass`, with args beginning with: `family`, `sister`, <br></code></pre></td></tr></table></figure><h2 id="smember"><a href="#smember" class="headerlink" title="smember"></a>smember</h2><ul><li>获取set集合中的所有内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; SMEMBERS family<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;father&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;sister&quot;</span><br></code></pre></td></tr></table></figure><h2 id="spop"><a href="#spop" class="headerlink" title="spop"></a>spop</h2><ul><li>移除并返回set集合中指定count数的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; spop family <span class="hljs-number">2</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;father&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;sister&quot;</span><br></code></pre></td></tr></table></figure><h2 id="scard"><a href="#scard" class="headerlink" title="scard"></a>scard</h2><ul><li>获取成员个数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; scard <span class="hljs-title function_">family</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="smove"><a href="#smove" class="headerlink" title="smove"></a>smove</h2><ul><li>移动一个元素到另外一个set集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; SMEMBERS family<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;daughter&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;father&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;mother&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;syster&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; smove family family2 <span class="hljs-title function_">syster</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; SMEMBERS family2<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;syster&quot;</span><br></code></pre></td></tr></table></figure><h2 id="sunion"><a href="#sunion" class="headerlink" title="sunion"></a>sunion</h2><ul><li>将两个set集合并集</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; sunion family family2<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;father&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;daughter&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;syster&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;mother&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="Redis灾难恢复模式"><a href="#Redis灾难恢复模式" class="headerlink" title="Redis灾难恢复模式"></a>Redis灾难恢复模式</h1><h2 id="rdb和aof比较"><a href="#rdb和aof比较" class="headerlink" title="rdb和aof比较"></a>rdb和aof比较</h2><table><thead><tr><th align="center">RDB</th><th align="center">AOF</th></tr></thead><tbody><tr><td align="center">fork一个进程，遍历hashtable，利用copy onwrite，把整个db dump保存下来。save,shutdown, slave 命令会触发这个操作。</td><td align="center">把写操作指令，持续的写到一个类似日志文件里。（类似于从postgresql等数据库导出sql一样，只记录写操作）</td></tr><tr><td align="center">粒度比较大，如果save, shutdown, slave 之前crash了，则中间的操作没办法恢复。</td><td align="center">粒度较小，crash之后，只有crash之前没有来得及做日志的操作没办法恢复。</td></tr></tbody></table><ul><li>两种区别就是，一个是持续的用日志记录写操作，crash（崩溃）后利用日志恢复；一个是平时写操作的时候不触发写，只有手动提交save命令，或者是shutdown关闭命令时，才触发备份操作。</li><li>选择的标准，就是看系统是愿意牺牲一些性能，换取更高的缓存一致性（aof），还是愿意写操作频繁的时候，不启用备份来换取更高的性能，待手动运行save的时候，再做备份（rdb）。rdb这个就更有些 最终一致性（eventually consistent）的意思了。</li></ul><h2 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h2><ul><li>测试方法是用java写的脚本对redis数据库进行写入，看写入速度。</li><li>100000&#x2F;300000&#x2F;1000000是数据量，插入的都是string。第一个数据是最小时间，第二个是平均，第三个是数据大小。</li></ul><table><thead><tr><th align="center">db类型</th><th align="center">最小时间</th><th align="center">评价时间</th><th align="center">数据大小</th></tr></thead><tbody><tr><td align="center">100000</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">dbmode</td><td align="center">4.8</td><td align="center">5.1</td><td align="center">1477792</td></tr><tr><td align="center">aofmode</td><td align="center">9.1</td><td align="center">9.3</td><td align="center">3677803</td></tr><tr><td align="center">300000</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">dbmode</td><td align="center">16.5</td><td align="center">17.6</td><td align="center">4877792</td></tr><tr><td align="center">aofmode</td><td align="center">21.1</td><td align="center">21.4</td><td align="center">11477803</td></tr><tr><td align="center">1000000</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">dbmode</td><td align="center">61</td><td align="center">65</td><td align="center">16777792</td></tr><tr><td align="center">aofmode</td><td align="center">77</td><td align="center">85</td><td align="center">38777849</td></tr></tbody></table><ul><li>从简单分析来看，aof比rdb慢25-80%，但是大规模数据都比较支持慢25%这端。估计在低数据量下，rdb模式更加占优势。数据规模增长时，速率比接近于4:5。aof的数据比rdb数据大150%（2.5倍上下），这点随着数据增长基本不变。</li><li>从读性能分析来看，两者差异不大。同样，数据分别是最小时间和平均时间。</li></ul><table><thead><tr><th align="center">db类型</th><th align="center">最小时间</th><th align="center">评价时间</th><th align="center">数据大小</th></tr></thead><tbody><tr><td align="center">dbmode</td><td align="center">55</td><td align="center">60</td><td align="center"></td></tr><tr><td align="center">aofmode</td><td align="center">62</td><td align="center">63</td><td align="center"></td></tr></tbody></table><p>差异在10%以内，甚至比最小-平均差异还弱。基本可以视为一致</p><h1 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h1><h2 id="Redis的乐观锁机制"><a href="#Redis的乐观锁机制" class="headerlink" title="Redis的乐观锁机制"></a>Redis的乐观锁机制</h2><ul><li>大多数是基于数据版本（version）的记录机制实现的。即为数据增加一个版本标识，<strong>在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个”version”字段来实现读取出数据时，将此版本号一同读出，之后更新时，对此版本号加1。此时，将提交数据的版本号与数据库表对应记录的当前版本号进行比对，如果提交的数据版本号大于数据库当前版本号，则予以更新，否则认为是过期数据。</strong></li><li>Redis也采用类似的机制，使用watch命令会监视给定的key，当exec时候如果监视的key从调用watch后发生过变化，则整个事务会失败。也可以调用watch多次监视多个key。这样就可以对指定的key加乐观锁了。注意watch的key是对整个连接有效的，事务也一样。如果连接断开，监视和事务都会被自动清除。当然exec，discard，unwatch命令都会清除连接中的所有监视。</li></ul><h2 id="Redis锁概念"><a href="#Redis锁概念" class="headerlink" title="Redis锁概念"></a>Redis锁概念</h2><ul><li>redis是单线程，提交命令时，其它命令无法插入其中，轻松利用单线程实现了事务的原子性。那如果执行多个redis命令呢？自然就没有事务保证，于是redis有下列相关的redis命令来实现事务管理。</li></ul><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">multi</td><td align="center">开启事务</td></tr><tr><td align="center">exec</td><td align="center">提交事务</td></tr><tr><td align="center">discard</td><td align="center">取消事务</td></tr><tr><td align="center">watch</td><td align="center">监控，如果监控的值发生变化，则提交事务时会失败</td></tr><tr><td align="center">unwatch</td><td align="center">去掉监控</td></tr></tbody></table><ul><li>Redis保证一个事务中的所有命令要么都执行，要么都不执行。如果在发送EXEC命令前客户端断线了，则Redis会清空事务队列，事务中的所有命令都不会执行。而一旦客户端发送了EXEC命令，所有的命令就都会被执行，即使此后客户端断线也没关系，因为Redis中已经记录了所有要执行的命令。</li></ul><h2 id="事务案例"><a href="#事务案例" class="headerlink" title="事务案例"></a>事务案例</h2><ul><li>例如：模拟转账，王有200，张有700，张给王转100。过程如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; set w <span class="hljs-number">200</span><br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; set z <span class="hljs-number">700</span><br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; mget w z<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;200&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;700&quot;</span><br>  ==================================事务开启============================================<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; multi<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; decrby z <span class="hljs-number">100</span><br>QUEUED#注意此命令根本没有执行，而是把其放在一个队列中<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; incrby w <span class="hljs-number">100</span><br>QUEUED<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; mget w z<br>QUEUED<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get w#同时，这些相关的变量也不能再读取<br>QUEUED<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get z<br>QUEUED<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; exec<br>==================================事务提交============================================<br><span class="hljs-number">1</span>) (integer) <span class="hljs-number">600</span><br><span class="hljs-number">2</span>) (integer) <span class="hljs-number">300</span><br><span class="hljs-number">3</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;300&quot;</span><br>   <span class="hljs-number">2</span>) <span class="hljs-string">&quot;600&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;300&quot;</span><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;600&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; mget w z<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;300&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;600&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt;<br><br></code></pre></td></tr></table></figure><ul><li>如果有错误则自动取消</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; mget w z<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;300&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;600&quot;</span><br>==================================事务开启============================================<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; multi<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get w<br>QUEUED<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; set w <span class="hljs-number">100</span><br>QUEUED<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; abc<br>(error) ERR unknown command <span class="hljs-string">&#x27;abc&#x27;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; exec<br>==================================事务提交============================================<br>(error) EXECABORT Transaction discarded because of previous errors.<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; mget w z#可以看出数据并未变化<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;300&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;600&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>discard取消事务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; mget z w<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;600&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;300&quot;</span><br>==================================事务开启============================================<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; multi<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; incrby z <span class="hljs-number">100</span><br>QUEUED<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; discard<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get z<br><span class="hljs-string">&quot;600&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; exec<br>==================================事务提交============================================<br>(error) ERR EXEC without MULTI<br><br></code></pre></td></tr></table></figure><ul><li>秒杀业务处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; clear<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; set ticket <span class="hljs-number">1</span><br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; set money <span class="hljs-number">0</span><br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; watch ticket#乐观锁，对值进行观察，改变则事务失败<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; multi#开启事务<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; decr ticket<br>QUEUED<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; incrby money <span class="hljs-number">100</span><br>QUEUED<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端2</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get ticket<br><span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; decr <span class="hljs-title function_">ticket</span><br><span class="hljs-params">(integer)</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//客户端1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; exec<br>(nil)#执行事务，失败<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get ticket<br><span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; unwatch#取消监控<br></code></pre></td></tr></table></figure><h1 id="Redis海量数据导入"><a href="#Redis海量数据导入" class="headerlink" title="Redis海量数据导入"></a>Redis海量数据导入</h1><ul><li>由于做性能测试，需要往redis中导出千万级的数据。得知redis-cli工具支持pipeline导入可以达到最佳性能。测试下500万条命令导入耗时43秒</li><li>将脚本写入文件用<code>redis-cli --pipe</code>导入<ul><li>cat d.txt |redis-cli –pipe</li></ul></li><li>格式要求<ul><li><a href="http://redis.io/topics/mass-insert">官方文档</a></li><li>数据格式要求<ol><li>以*开始</li><li>*n n代表此条命令分成n个部分</li><li>每个部分以\r\n结束</li></ol></li></ul></li><li>案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">set name tony 表达为：<br>*<span class="hljs-number">3</span>\r\n<br>$<span class="hljs-number">3</span>\r\n<br>set\r\n<br>$<span class="hljs-number">4</span>\r\n<br>name\r\n<br>$<span class="hljs-number">4</span>\r\n<br>tony\r\n<br><span class="hljs-comment">//注意：此处的\r\n为换行符，不是输入的字符。</span><br></code></pre></td></tr></table></figure><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/redis/pipe_input.png" alt="pipe"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> redis;<br><br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRedisPipe</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 格式化成输入字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getString</span><span class="hljs-params">(String... args)</span> &#123;<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>sb.append(<span class="hljs-string">&quot;*&quot;</span>).append(args.length).append(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><span class="hljs-keyword">for</span> (String arg : args) &#123;<br>sb.append(<span class="hljs-string">&quot;$&quot;</span>).append(arg.length()).append(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>sb.append(arg).append(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initFile2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:\\d.txt&quot;</span>;<br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-keyword">try</span> &#123;<br>w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file), <span class="hljs-string">&quot;utf-8&quot;</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">100000000</span> ;i &lt; <span class="hljs-number">100100000</span>;i++)&#123;<br><span class="hljs-comment">//for (int i = 1; i &lt;= 100; i++) &#123;</span><br><span class="hljs-keyword">if</span> (i / <span class="hljs-number">30000</span> == <span class="hljs-number">0</span>) &#123;<br>w.flush();<br>&#125;<br>sb.setLength(<span class="hljs-number">0</span>);<br>sb.append(<span class="hljs-built_in">this</span>.getString(<span class="hljs-string">&quot;set&quot;</span>, <span class="hljs-string">&quot;u&quot;</span> + i, <span class="hljs-string">&quot;name&quot;</span> + i));<br><span class="hljs-comment">//sb.append(this.getString(&quot;hmset&quot;, &quot;usr&quot; + i, &quot;userid&quot;, &quot;usr&quot; + i, &quot;username&quot;, &quot;usrname&quot; + i));</span><br>w.append(sb.toString());<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>w.flush();<br>w.close();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;耗时: &quot;</span>+(endTime - startTime)/<span class="hljs-number">1000</span>+<span class="hljs-string">&quot; s。&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//查看命令都耗时2.42秒，可以看到管道命令有多快，令人乍舌！</span><br></code></pre></td></tr></table></figure><h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><ul><li><p>当数据量达几百g时，如果让其程序来缓存，无疑对数据库会造成比较大的压力，而实现对热点数据生成这样的导入文件，执行管道命令快速导入，这样就减少了对数据库的压力，让整个程序更加稳健的接受海量用户的访问。</p></li><li><p>常见问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@localhost</span> redis]# cat d.txt |redis-cli --pipe<br>ERR Protocol error: too big mbulk count string<br>Error writing to the server: Connection reset by peer<br></code></pre></td></tr></table></figure><ul><li>文件太大，和所分配的内存大小密切相关，内存太少则会导致文件太大导入失败。</li></ul></li></ul><h1 id="Redis启动两个服务"><a href="#Redis启动两个服务" class="headerlink" title="Redis启动两个服务"></a>Redis启动两个服务</h1><h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><ul><li>关闭防火墙</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@localhost</span> ~]# systemctl stop firewalld#关闭防火墙<br>[root<span class="hljs-meta">@localhost</span> ~]# systemctl disable firewalld#开机禁用<br></code></pre></td></tr></table></figure><h2 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h2><ul><li>参数：port端口，daemonize后台运行，protected-mode保护模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">redis-server --port <span class="hljs-number">6379</span> --daemonize yes --<span class="hljs-keyword">protected</span>-mode no<br>redis-server --port <span class="hljs-number">6380</span> --daemonize yes --<span class="hljs-keyword">protected</span>-mode no<br></code></pre></td></tr></table></figure><h1 id="Redis分片"><a href="#Redis分片" class="headerlink" title="Redis分片"></a>Redis分片</h1><h2 id="获取redis客户端"><a href="#获取redis客户端" class="headerlink" title="获取redis客户端"></a>获取redis客户端</h2><ul><li><p>获取redis的jar包</p><ol><li>找到redis的client</li></ol><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/redis/redis_client1.png"></p><ol start="2"><li>找到Java项选择Jedis客户端</li></ol><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/redis/jedis_client.png"></p><ol start="3"><li>下载jedis的jar包</li></ol><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/redis/jedis_client1.png"></p></li><li><p>也可以通过网上找Maven依赖依赖jedis的jar包</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>&lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br>&lt;groupId&gt;cn.tedu&lt;/groupId&gt;<br>&lt;artifactId&gt;hello&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">0.0</span><span class="hljs-number">.1</span>-SNAPSHOT&lt;/version&gt;<br>&lt;packaging&gt;jar&lt;/packaging&gt;<br><br>&lt;dependencies&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>&lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">2.9</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.slf4j&lt;/groupId&gt;<br>&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">1.6</span><span class="hljs-number">.4</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;/dependencies&gt;<br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><h2 id="Jedis简单示例"><a href="#Jedis简单示例" class="headerlink" title="Jedis简单示例"></a>Jedis简单示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> redis;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRedis</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//设置连接服务器IP地址和访问端口</span><br><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.115.115&quot;</span>,<span class="hljs-number">6379</span>);<br><br><span class="hljs-comment">//单个值</span><br><span class="hljs-comment">//jedis.set(&quot;test&quot;, &quot;456789&quot;);//设置值</span><br><span class="hljs-comment">//System.out.println(jedis.get(&quot;test&quot;));//获取值</span><br><br><span class="hljs-comment">//多个值</span><br><span class="hljs-comment">//jedis.mset(&quot;test1&quot;,&quot;1&quot;,&quot;test2&quot;,&quot;2&quot;);</span><br>List&lt;String&gt; oList = jedis.mget(<span class="hljs-string">&quot;test1&quot;</span>,<span class="hljs-string">&quot;test2&quot;</span>);<br><span class="hljs-keyword">for</span>(String s : oList)&#123;<br>System.out.println(s);<br>&#125;<br><br>jedis.close();<span class="hljs-comment">//关闭</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用连接池"><a href="#使用连接池" class="headerlink" title="使用连接池"></a>使用连接池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.redis;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPool;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPoolConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisPoolDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 构建连接池配置信息</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">jedisPoolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        <span class="hljs-comment">// 设置最大连接数</span><br>        jedisPoolConfig.setMaxTotal(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-comment">// 构建连接池</span><br>        <span class="hljs-type">JedisPool</span> <span class="hljs-variable">jedisPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(jedisPoolConfig, <span class="hljs-string">&quot; 192.168.163.101&quot;</span>, <span class="hljs-number">6379</span>);<br><br>        <span class="hljs-comment">// 从连接池中获取连接</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> jedisPool.getResource();<br><br>        <span class="hljs-comment">// 读取数据</span><br>        System.out.println(jedis.get(<span class="hljs-string">&quot;name&quot;</span>));<br><br>        <span class="hljs-comment">// 将连接还回到连接池中</span><br>        jedisPool.returnResource(jedis);<br><br>        <span class="hljs-comment">// 释放连接池</span><br>        jedisPool.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分片操作"><a href="#分片操作" class="headerlink" title="分片操作"></a>分片操作</h2><ul><li>实现分布式缓存，Redis多个节点的透明访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Test</span><span class="hljs-comment">//分片</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shard</span><span class="hljs-params">()</span>&#123;<br><br><br><span class="hljs-comment">//构造各个节点链接信息，host和port</span><br>List&lt;JedisShardInfo&gt; infoList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;JedisShardInfo&gt;();<br><span class="hljs-type">JedisShardInfo</span> <span class="hljs-variable">info1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisShardInfo</span>(<span class="hljs-string">&quot;192.168.163.200&quot;</span>,<span class="hljs-number">6379</span>);<br><span class="hljs-comment">//info1.setPassword(&quot;123456&quot;);</span><br>infoList.add(info1);<br><span class="hljs-type">JedisShardInfo</span> <span class="hljs-variable">info2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisShardInfo</span>(<span class="hljs-string">&quot;192.168.163.200&quot;</span>,<span class="hljs-number">6380</span>);<br>infoList.add(info2);<br><span class="hljs-type">JedisShardInfo</span> <span class="hljs-variable">info3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisShardInfo</span>(<span class="hljs-string">&quot;192.168.163.200&quot;</span>,<span class="hljs-number">6381</span>);<br>infoList.add(info3);<br><br><span class="hljs-comment">//分片jedis</span><br><br><span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>config.setMaxTotal(<span class="hljs-number">500</span>);<span class="hljs-comment">//最大链接数</span><br><br><span class="hljs-type">ShardedJedisPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShardedJedisPool</span>(config, infoList);<br><span class="hljs-comment">//ShardedJedis jedis = new ShardedJedis(infoList);</span><br><span class="hljs-type">ShardedJedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> pool.getResource();<span class="hljs-comment">//从pool中获取</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>jedis.set(<span class="hljs-string">&quot;n&quot;</span>+i, <span class="hljs-string">&quot;t&quot;</span>+i);<br>&#125;<br>System.out.println(jedis.get(<span class="hljs-string">&quot;n9&quot;</span>));<br>jedis.close();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分片原理"><a href="#分片原理" class="headerlink" title="分片原理"></a>分片原理</h2><ul><li>在分布式集群中，对机器的添加删除，或者机器故障后自动脱离集群这些操作是分布式集群管理最基本的功能。如果采用常用的hash(object)%N算法，那么在有机器添加或者删除后，很多原有的数据就无法找到了，这样严重的违反了单调性原则。（hash取余算法一般用在集合中）</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/redis/hash1.png"></p><h2 id="Hash一致性算法"><a href="#Hash一致性算法" class="headerlink" title="Hash一致性算法"></a>Hash一致性算法</h2><ul><li>一致性哈希算法在1997年由麻省理工学院提出。</li><li>hash取余产生的问题：新增节点、删除节点会让绝大多数的缓存失效，除了导致性能骤降外很有可能会压垮后台服务器。</li><li>哈希一致性算法<ul><li>解决对象：当集群中的节点新增或挂掉的时候，要对已有的节点的影响降到最小</li><li>解决方法：<ol><li><strong>对缓存的object(key值)和Node(服务器节点值)使用同一个hash函数</strong>(实际不需要完全一致，但至少保证产生的hash空间相同)，<strong>让他们映射到同一个hash空间中去</strong>，当然这很容易实现，因为大多数的hash函数都是返回uint32类型，其空间即为1~232 232-1（2^32 &#x3D; 4294 967 296，近43亿）</li><li>**然后各个Node就将整个hash空间分割成多个interval空间，然后对于每个缓存对象object，都按照顺时针方向遇到的第一个Node负责缓存它。**通过这种方法，在新增加Node和删除Node的时候，只会对顺时针方向遇到的第一个Node负责的空间造成影响，其余的空间都仍然有效。</li><li><strong>同时在以上基础上添加虚拟Node的实现</strong>，即Node-1会有多个分身Node-1-1，Node-1-2等虚拟节点来替自身回收散布在Hash环上的值。通过这种方法，在添加删除Redis服务器或初始Hash计算Node值位置不平均时，保证object仍然能平均被分配给对应的Node服务器</li></ol></li></ul></li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/redis/hash2.png"></p><ul><li>注意：虽然虚拟并不能百分百的解决缓存命中失效的问题，但把问题缩小化，这样影响面小，即使缓存失效，数据库也能承受起用户的负载，从而稳定过渡。</li></ul><h2 id="Hash一致性的特征"><a href="#Hash一致性的特征" class="headerlink" title="Hash一致性的特征"></a>Hash一致性的特征</h2><h3 id="单调性-Monotonicity"><a href="#单调性-Monotonicity" class="headerlink" title="单调性(Monotonicity)"></a>单调性(Monotonicity)</h3><p><strong>单调性是指如果已经有一些请求通过哈希分派到了相应的服务器进行处理，又有新的服务器加入到系统中时候，应保证原有的请求可以被映射到原有的或者新的服务器中去，而不会被映射到原来的其它服务器上去。</strong></p><h3 id="分散性-Spread"><a href="#分散性-Spread" class="headerlink" title="分散性(Spread)"></a>分散性(Spread)</h3><p>分布式环境中，客户端请求时候可能不知道所有服务器的存在，可能只知道其中一部分服务器，在客户端看来他看到的部分服务器会形成一个完整的hash环。如果多个客户端都把部分服务器作为一个完整hash环，那么可能会导致，同一个用户的请求被路由到不同的服务器进行处理。这种情况显然是应该避免的，因为它不能保证同一个用户的请求落到同一个服务器。所谓分散性是指上述情况发生的严重程度。好的哈希算法应尽量避免尽量降低分散性。<br>一致性hash具有很低的分散性。</p><h3 id="平衡性-Balance"><a href="#平衡性-Balance" class="headerlink" title="平衡性(Balance)"></a>平衡性(Balance)</h3><p>平衡性也就是说负载均衡，是指客户端hash后的请求应该能够分散到不同的服务器上去。一致性hash可以做到每个服务器都进行处理请求，但是不能保证每个服务器处理的请求的数量大致相同。</p><h3 id="负载-Load"><a href="#负载-Load" class="headerlink" title="负载(Load)"></a>负载(Load)</h3><p>负载问题实际上是从另一个角度看待<u>分散性</u>问题。既然不同的终端可能将相同的内容映射到不同的缓冲区中，那么对于一个特定的缓冲区而言，也可能被不同的用户映射为不同的内容。与分散性一样，这种情况也是应当避免的，因此好的哈希算法应能够尽量降低缓冲的负荷。</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>出塞二首 其一</title>
    <link href="/2019/06/28/other/poetry_%E5%8D%AB%E9%9D%92/"/>
    <url>/2019/06/28/other/poetry_%E5%8D%AB%E9%9D%92/</url>
    
    <content type="html"><![CDATA[<p>​<strong>出塞二首 其一</strong></p><p><strong>漠南胡未空，汉将复临戎。飞狐出塞北，碣石指辽东。</strong></p><p><strong>冠军临瀚海，长平翼大风。云横虎落阵，气抱龙城虹。</strong></p><p><strong>横行万里外，胡运百年穷。兵寝星芒落，战解月轮空。</strong></p><p><strong>严刁息夜斗，辛角罢鸣弓。北风嘶朔马，胡霜切塞鸿。</strong></p><p><strong>休明大道暨，幽荒日用同。方就长安邸，来谒建章宫。</strong></p><p>这是首开盛唐边塞诗派先河的佳作。诗中反映的是隋王朝出兵抗击突厥的战争。突厥是隋初北方最强大的少数民族政权，由于南北朝时期中原分裂，内战不休，北齐、北周皆重赂突厥以求苟安。突厥木杆可汗灭柔然后，北方归于统一。隋文帝采纳长孙晟建议，对突厥各部采取远交近攻，离间强部、扶助弱部的方法，使突厥各部交相混战。隋开皇四年（584）突厥分裂为东、西两部。其东西疆界相当于今蒙古人民共和国，其北直抵贝加尔湖以北。隋文帝利用其内部纠纷，命高颎、杨素等率兵出塞，大破之。</p><p>“<strong>漠南胡未空，汉将复临戎。</strong>”漠南：在古代泛指蒙古高原大沙漠以南地区，漠南乃隋之疆土。胡为空：指突厥军队尚未消灭干净。汉将：诗人自称。这两句从出师背景落笔，是说漠南地方突厥的军队尚未消灭干净，我作为汉将再次率兵出征。</p><p>“<strong>飞狐出塞北，碣石指辽东。</strong>”飞狐：要塞名，相传有狐于紫锦岭食五粒松子成飞仙，故名，地在今河北涞源，此为兵家必争之地。碣石：古山名，在河北昌黎西北。据说因远望此山，穹窿似冢，山顶有突出之巨石，形如石柱，故名。秦始皇、魏武帝（曹操）均曾东巡至此。此处靠山海关，靠辽东很近。这可能是另一支远征军的行军路线。这两句是说，这次出征一经飞狐塞而出塞；一经碣石而附辽东。</p><p>这两句句式较为特殊：以“出”、“指”两个动词连接两个地名，说出行军的路线。</p><p>“<strong>冠军临瀚海，长平翼大风。</strong>”冠军：将军名号，汉武帝时征匈奴的大奖霍去病被封冠军侯。长平：汉武帝时征匈奴的大将军卫青被封长平侯。瀚海：北海，即今之贝加尔湖。《史记·匈奴传》：“汉骠骑将军（霍去病）之出代二千余里，与左贤王接战，汉兵得胡首虏凡七万余级，左贤王将皆遁走，骠骑封于狼居胥山，禅姑衍，临瀚海而还。”后句用卫青事。翼：辅助。 大风：指气势。这两句是说，隋兵出师后的声威和气势就像汉代抗击匈奴的名将危情、霍去病。诗中实际上也以卫青、霍去病自比。《隋书》本传载，杨素“出云州击突厥，连破之”，便是对这两句诗最好的注脚。</p><p>“<strong>云横虎落阵，气抱龙城虹。</strong>”虎落：遮护城堡或营寨的篱笆。龙城：汉时匈奴地名。匈奴于每年五月于此大会各部酋长，祭其祖先、天地、鬼神，又称龙庭。汉武帝元光六年（前129），卫青至龙城，获首虏七百级。古代边塞诗常用此地名。这两句以磅礴的气势写出征师的必胜信念和整肃的军容。这两句为全诗的诗眼所在。</p><p>以上四句用曾立大功于异域的卫青、霍去病的典故，道出杨素此次出征的情况。</p><p>“<strong>横行万里外，胡运百年穷。</strong>”穷：穷尽。这两句是说，这支军队能征善战，从而使中国北方百年战患一旦结束。</p><p>“<strong>兵寝星芒落，战解月轮空。</strong>”寝：止息。兵寝、战解：战斗结束。星芒落、月轮空：夜将尽之时。这两句是写夜尽之时，战斗也结束了。</p><p>“<strong>严鐎息夜斗，骍角罢鸣弓。</strong>”鐎：即鐎斗，一种有足的刁斗（作报更用）。这两句是说，寒鐎已息，鸣弓已罢。</p><p>这四句写夜战已经结束，但从这响犹在耳的余音和肃杀的气氛中，人们还能感受出战争的气息。</p><p>“<strong>北风嘶朔马，胡霜切塞鸿。</strong>”这两句是说，战败者突厥人的马仍在北风中悲鸣不已， 而哀鸿也发出令人摧肝裂胆的鸣叫。这两句委实令人惊心动魄。</p><p>这里有两点应当说及，一是杨素长于夜战，他领兵灭陈时便常用此法；二是他对突厥作战，一改乖用的鹿角方阵为骑阵。这两点在诗中都有了集中的表现。</p><p>诗的最后四句，写取胜后奏凯京师。</p><p>“<strong>休明大道暨，幽荒日用同。</strong>”休明：美善。暨：至，到。这两句是说对外战争的目的是要使荒僻边远之地同受王化。</p><p>“<strong>方就长安邸，来谒建章宫。</strong>”建章宫：故址在今长安县西，汉武帝时建，位于未央宫西，此处代指朝廷。这两句是说班师回朝，奏凯京师。这个结尾并无特色。以上是为组诗的第一首，应该作于出塞归来之后。</p>]]></content>
    
    
    <categories>
      
      <category>poetry</category>
      
    </categories>
    
    
    <tags>
      
      <tag>warrior</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven仓库统计</title>
    <link href="/2019/02/24/Maven%E4%BB%93%E5%BA%93/"/>
    <url>/2019/02/24/Maven%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="仓库梳理"><a href="#仓库梳理" class="headerlink" title="仓库梳理"></a>仓库梳理</h1><p>之前说了很多仓库，想必已经很乱了，做一节梳理</p><h1 id="Repository（仓库）"><a href="#Repository（仓库）" class="headerlink" title="Repository（仓库）"></a>Repository（仓库）</h1><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/Repository2.png"></p><ol><li>Maven仓库主要有2种： <ul><li>remote repository：相当于公共的仓库，大家都能访问到，一般可以用URL的形式访问</li><li>local repository：存放在本地磁盘的一个文件夹，例如，windows上默认是C:\Users\｛用户名｝.m2\repository目录</li></ul></li><li>Remote Repository主要有3种： <ul><li>中央仓库：<a href="http://repo1.maven.org/maven2/">http://repo1.maven.org/maven2/</a> </li><li>私服：内网自建的maven repository，其URL是一个内部网址 </li><li>其他公共仓库：其他可以互联网公共访问maven repository，例如 jboss repository等</li></ul></li></ol><p>repository（本地库或远程库）存放各种jar包或Maven插件，当用户请求获取新的依赖时会访问本地库，若本地库没有相关依赖则访问远程库获取依赖并缓存到本地库中。可以将做好的jar包放到本地库中供自己使用，或上传到远程库供大家使用。</p><h1 id="Mirror（镜像）"><a href="#Mirror（镜像）" class="headerlink" title="Mirror（镜像）"></a>Mirror（镜像）</h1><p>Mirror类似拦截器，会拦截maven向远程仓库的请求，将请求<strong>重定向</strong>到setting.xml中<code>&lt;Mirror&gt;</code>标签配置的仓库地址。</p><ul><li>没有配置Mirror</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenMirrorFalse.png"></p><ul><li>配置了Mirror(B为A仓库的镜像)</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenMirrorTrue.png"></p><p>镜像仓库可认为是远程仓库的完全备份，从远程仓库获取的依赖一样可以从镜像仓库中获取</p><h2 id="关于mirrorOf"><a href="#关于mirrorOf" class="headerlink" title="关于mirrorOf"></a>关于mirrorOf</h2><ul><li>配置mirrorOf时需要确保仓库间实际上是有关联的，如何关联可参考<a href="">私库创建</a></li></ul><p><code>&lt;mirrorOf&gt;</code>标签用于配置具体的远程仓库名称，它的作用是限定特定依赖请求访问特定镜像。例如本地中可能会配置多个镜像A和B，当我们想限定通过A镜像访问中央仓库，用B镜像访问阿里云仓库时，需要分别配置mirrorOf标签的远程仓库名称。  </p><p>例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>myRepository1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span> <br>     <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-myself<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus myself<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://172.30.201.35:8081/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可见</p><ol><li>需要访问aliyun仓库时会走myRepository1镜像</li><li>需要访问中央仓库时会走nexus-myself镜像</li></ol><p>他们对应的jar包会分别缓存到上述不同的镜像库中取（镜像只是一个概念问题，本质上各个仓库时想和独立的，只是在构建仓库时会关联双方）</p><p>具体配置如下</p><ul><li><code>&lt;mirrorOf&gt;*&lt;/mirrorOf&gt; </code></li></ul><p>​            匹配所有远程仓库。 </p><ul><li><code>&lt;mirrorOf&gt;repo1,repo2&lt;/mirrorOf&gt; </code></li></ul><p>​            匹配仓库repo1和repo2，使用逗号分隔多个远程仓库。 </p><ul><li><code>&lt;mirrorOf&gt;*,!repo1&lt;/miiroOf&gt; </code></li></ul><p>​            匹配所有远程仓库，repo1除外，使用感叹号将仓库从匹配中排除。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>其实，mirror表示的是两个Repository之间的关系，在maven配置文件（setting.xml)里配置了<code>&lt;mirrors&gt;&lt;mirror&gt;..........&lt;/mirror&gt;&lt;/mirrors&gt;</code>，即定义了两个Repository之间的镜像关系。 </p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>配置两个Repository之间的镜像关系，一般是出于访问速度和下载速度考虑。</p><p>例如， 有一个项目，需要在公司和住所都编码，并在项目pom.xml配置了A Maven库。在公司，是电信网络，访问A库很快，所以maven管理依赖和插件都从A库下载；在住所，是网通网络，访问A库很慢，但是访问B库很快。这时，在住所的setting.xml里，只要配置一下<code>&lt;mirrors&gt;&lt;mirror&gt;....&lt;/mirror&gt;&lt;/mirrors&gt;</code>，让B库成为A库的mirror，即可不用更改项目pom.xml里对于A库的相关配置。</p><p>如果该镜像仓库需要认证，则配置setting.xml中的<code>&lt;server&gt;&lt;/server&gt;</code>即可。</p><p>需要注意的是，由于镜像仓库完全屏蔽了被镜像仓库，当镜像仓库不稳定或者停止服务的时候，Maven仍将无法访问被镜像仓库，因而将无法下载构件。</p><h2 id="配置优先顺序"><a href="#配置优先顺序" class="headerlink" title="配置优先顺序"></a>配置优先顺序</h2><p>1、在mirrorOf与repositoryId相同的时候优先是使用mirror的地址</p><p>2、mirrorOf等于*的时候覆盖所有repository配置</p><p>3、存在多个mirror配置的时候mirrorOf等于*放到最后</p><p>4、只配置mirrorOf为central的时候可以不用配置repository </p><h1 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h1><p>私服是一种特殊的远程Maven仓库，它是架设在局域网内的仓库服务，私服一般被配置为互联网远程仓库的镜像，供局域网内的Maven用户使用。</p><p>当Maven需要下载构件的时候，先向私服请求，如果私服上不存在该构件，则从外部的远程仓库下载，同时缓存在私服之上，然后为Maven下载请求提供下载服务，另外，对于自定义或第三方的jar可以从本地上传到私服，供局域网内其他maven用户使用。</p><p>优点主要有：</p><ol><li>节省外网宽带</li><li>加速Maven构建</li><li>部署第三方构件</li><li>提高稳定性、增强控制：原因是外网不稳定</li><li>降低中央仓库的负荷：原因是中央仓库访问量太大</li></ol><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/Repositorysifu.png"></p><h1 id="Maven仓库示意图"><a href="#Maven仓库示意图" class="headerlink" title="Maven仓库示意图"></a>Maven仓库示意图</h1><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenProcess2.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单点来说，repository就是个仓库。maven里有两种仓库，本地仓库和远程仓库。远程仓库相当于公共的仓库，大家都能看到。本地仓库是你本地的一个山寨版，只有你看的到，主要起缓存作用。当你向仓库请求插件或依赖的时候，会先检查本地仓库里是否有。如果有则直接返回，否则会向远程仓库请求，并做缓存。你也可以把你做的东西上传到本地仓库给你本地自己用，或上传到远程仓库，供大家使用。  </p><p>远程仓库可以在工程的pom.xml文件里指定，楼上两位已经列的很清楚了。如果没指定，默认就会把下面这地方做远程仓库，即默认会到<a href="http://repo1.maven.org/maven2%E8%BF%99%E4%B8%AA%E5%9C%B0%E6%96%B9%E5%8E%BB%E8%AF%B7%E6%B1%82%E6%8F%92%E4%BB%B6%E5%92%8C%E4%BE%9D%E8%B5%96%E5%8C%85%E3%80%82">http://repo1.maven.org/maven2这个地方去请求插件和依赖包。</a>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Maven Repository Switchboard<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo1.maven.org/maven2<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>本地仓库默认在你本地的用户目录下的.m2&#x2F;repository目录下。</p><p>mirror就是镜像，主要提供一个方便地切换远程仓库地址的途径。比如，上班的时候在公司，用电信的网络，连的是电信的仓库。回到家后，是网通的网络，我想连网通的仓库，就可以通过mirror配置，统一把我工程里的仓库地址都改成联通的，而不用到具体工程配置文件里一个一个地改地址。  mirror的配置在.m2&#x2F;settings.xml里。如：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>UK<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>UK Central<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://uk.maven.org/maven2<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>这样的话，就会给上面id为central的远程仓库做了个镜像。以后向central这个仓库发的请求都会发到<a href="http://uk.maven.org/maven2%E8%80%8C%E4%B8%8D%E6%98%AFhttp://repo1.maven.org/maven2%E4%BA%86%E3%80%82">http://uk.maven.org/maven2而不是http://repo1.maven.org/maven2了。</a>  <mirrorOf>central</mirrorOf>里是要替代的仓库的id。如果填*，就会替代所有仓库。  </p><p>参考资料：</p><p><a href="https://blog.csdn.net/scythe666/article/details/51881534">https://blog.csdn.net/scythe666/article/details/51881534</a></p>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git远程仓库</title>
    <link href="/2018/12/24/GIT%E4%B9%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <url>/2018/12/24/GIT%E4%B9%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-远程仓库-Github"><a href="#Git-远程仓库-Github" class="headerlink" title="Git 远程仓库(Github)"></a>Git 远程仓库(Github)</h1><p>Git 并不像 SVN 那样有个中心服务器。</p><p>目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。此时就需要远程仓库服务器来存放大家的代码，主要流行的远程仓库有github，gitlab等等。</p><h1 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h1><h2 id="添加秘钥SSHKey操作"><a href="#添加秘钥SSHKey操作" class="headerlink" title="添加秘钥SSHKey操作"></a>添加秘钥SSHKey操作</h2><p>实际上我们不需要SSHKey也可以提交代码或从远程仓库拉取代码，但是每次提交都会提示我们输入你的gitHub账号密码。因此配置SSHKey可以帮助我们实现gitHub的免登录解决很多烦恼。其原理主要是通过git指令生成一对秘钥（公钥和私钥），git是免登陆是基于<u>非对称加密</u>。我们将我们的公钥交给gitHub远程仓库服务器，当我们提交代码远程服务器需要验证用户时，会利用我们的公钥加密一段信息给我们，随后我们用本地的私钥去解密这段信息，如果解密成功则可证明我们是合法用户，因而省去了输入账号密码验证用户的过程。</p><h3 id="生成SSHKey"><a href="#生成SSHKey" class="headerlink" title="生成SSHKey"></a>生成SSHKey</h3><p>如下指令是生产秘钥的指令</p><p><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></p><ul><li>其中参数中的email需要改为你在github官网注册的邮箱同时也是你的github账号</li></ul><hr><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/generateKey.png"></p><ul><li>由于我已有一个key因此会提示是否覆盖，之后会要求确认路径和输入密码（可忽略）</li><li>上图中会看到SSHkey生成的默认路径为用户目录下的.ssh目录（是一个隐藏目录）</li></ul><h3 id="添加秘钥到ssh-agent"><a href="#添加秘钥到ssh-agent" class="headerlink" title="添加秘钥到ssh-agent"></a>添加秘钥到ssh-agent</h3><p>确保 ssh-agent 是可用的。ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，其实ssh-agent就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。 </p><p><code>eval &quot;$(ssh-agent -s)&quot;</code></p><p>添加生成的 SSH key 到 ssh-agent。 </p><p><code>$ ssh-add ~/.ssh/id_rsa </code></p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/ssh-add.png"></p><h3 id="将公钥告诉给远程仓库"><a href="#将公钥告诉给远程仓库" class="headerlink" title="将公钥告诉给远程仓库"></a>将公钥告诉给远程仓库</h3><ol><li>复制.ssh目录下的id_rsa.pub文件内的key</li><li>进入你的github仓库</li><li>点击用户-setting-SSH and GPG keys在图中3位置粘贴你的key</li></ol><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/bindSSHkey.png"></p><ol start="4"><li>最后点击Add SSH key后会将key生成成功，系统还会给你发送邮件提示</li></ol><p>为了验证是否成功，输入以下命令：</p><p><code>$ ssh -T git@github.com</code></p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/connectSuccess.png"></p><p>此时，你的秘钥就已经配置成功了</p><ol start="5"><li>此外，还需要输入一下指令存储账号密码，且第一次需要输入账号密码</li></ol><p><code>git config --global credential.helper store</code></p><h2 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h2><p>本例以gitHub为例</p><p>git远程仓库创建很简单，当你利用github账号登录后</p><ol><li>点击图标处确保返回主页</li><li>点击绿色new按钮，新建一个远程仓库，后续按说明提示新建一个仓库即可</li></ol><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/newRepository.png"></p><p>其实这里我们只需要填一个版本仓库的名字，点击Create repository就OK了。 </p><h2 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h2><h3 id="关联仓库路径"><a href="#关联仓库路径" class="headerlink" title="关联仓库路径"></a>关联仓库路径</h3><p>首先需要添加远程仓库,<u>shortname</u>可认为是远程仓库的别名，方便以后建立分支后指定远程仓库等操作，通常我们用origin(实际上本操作相当于给远程仓库的url取别名)</p><p><code>git remote add [shortname] [url]</code></p><ul><li>参数shortname为别名</li><li>参数url可从github远程仓库中获取如下图</li></ul><hr><p>url可从创建成功后的远程仓库中获取到，如下图</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/newRepositoryUrl.png"></p><p>也可以在仓库主页上点击绿色按钮”Clone of download”获取到</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/gitRepositoryUrl.png"></p><p><strong>具体操作</strong></p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/gitConnectRepository.png"></p><ul><li>此处包含查看别名，删除别名新增别名等操作</li></ul><h3 id="推送分支到远程"><a href="#推送分支到远程" class="headerlink" title="推送分支到远程"></a>推送分支到远程</h3><ul><li><code>$ git push -u origin master </code></li></ul><p>将本地的master分支推送到origin主机，同时指定origin为默认主机；-u参数标识将后面两个参数设为默认，以后push就不用加origin master参数了</p><ul><li><strong>关于其他分支</strong></li></ul><p>如果需要提交其他分支也是需要先将其他分支切换为当前分支然后push如下</p><p><code>$ git checkout fa </code><!-- 切换分支 --> </p><p><code>$ git push -u origin fa </code></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>在创建一个新的远程仓库后，也可以参考github给的提示操作</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/gitHubTips.png"></p><ul><li>在本地创建一个新的仓库并关联远程仓库</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">echo <span class="hljs-string">&quot;# justTest&quot;</span> &gt;&gt; README.md  <span class="hljs-comment">//编辑README.md文件</span><br>git init<span class="hljs-comment">//在本地目录初始化一个git仓库管理这个目录</span><br>git add README.md<span class="hljs-comment">//添加提交代码</span><br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span> <span class="hljs-comment">//提交代码到本地仓库</span><br>git remote add origin https:<span class="hljs-comment">//github.com/AndrewJiao/justTest.git  //设置远程仓库别名</span><br>git push -u origin master<span class="hljs-comment">//推送代码并设置关联指定远程仓库</span><br></code></pre></td></tr></table></figure><ul><li>推送一个已有的仓库代码到远程仓库</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">git remote add origin https:<span class="hljs-comment">//github.com/AndrewJiao/justTest.git</span><br>git push -u origin master<br></code></pre></td></tr></table></figure><ul><li>导入其他远程仓库的代码到这个仓库</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/inportCode.png"></p><h1 id="远程分支跟踪"><a href="#远程分支跟踪" class="headerlink" title="远程分支跟踪"></a>远程分支跟踪</h1><p>上述操作可见r分支只能提交远程仓库的master分支，其他分支也是，倘若我们想从本地A分支提交代码到远程B分支，又或是想查看upsteam（上游）分支是否是我们要提交的分支该怎么办？</p><p><code>git branch --set-upstream branch-name origin/branch-name </code></p><p>将<code>branch-name</code>分支追踪远程分支<code>origin/branch-name</code> </p><p><code>git branch -u origin/serverfix </code></p><p>也可以用上述指令设置当前分支跟踪远程分支origin&#x2F;serverfix </p><hr><ul><li>如果要查看本地与远程upstream分支的追踪关系可用以下指令</li></ul><p><code>git branch -vv </code></p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/gitUpstream.png"></p><h1 id="使用两个秘钥"><a href="#使用两个秘钥" class="headerlink" title="使用两个秘钥"></a>使用两个秘钥</h1><p>我们在家里和在公司用不同的电脑提交到我们的远程仓库时，均可以用同一个秘钥，如果你忘记拷贝秘钥到公司，也可以在公司生成一个新的秘钥以同样的方式添加的远程仓库中。那么，如果我们想在同一个地方用不同的秘钥登录不同的远程仓库，应该如何操作才能让git识别不同秘钥呢？</p><p>假如在公司，我们已经有了一个工作用的秘钥，此时，可以新建一对秘钥（方法一样，需注意文件名参数需要不一致以保障秘钥不会被覆盖）</p><hr><h2 id="创建秘钥"><a href="#创建秘钥" class="headerlink" title="创建秘钥"></a>创建秘钥</h2><ol><li>创建新的 密钥&#x2F;公钥，并指定密钥名称，比如id_rsa_x（x为任意名称）</li></ol><p><code>ssh-keygen -t rsa -f ~/.ssh/id_rsa_x -C &quot;yourmail@xxx.com&quot;</code></p><p>操作完成后，该目录会多出 id_rsa_x 和 id_rsa_x.pub 两个文件。</p><ol start="2"><li>清空本地的 SSH 缓存，添加新的 SSH 密钥 到 SSH agent中</li></ol><p><code>ssh-agent bash</code></p><p>初始化操作</p><p><code>ssh-add -D</code></p><p>清除缓存</p><p><code>ssh-add ~/.ssh/id_rsa_github</code><br><code>sh-add ~/.ssh/id_rsa_gitlab</code></p><p>添加两个私钥给SSH agent管理中心，如果在.ssh目录下可省略文件路径 :ssh-add id_rsa_github</p><p><code>ssh -T git@github.com</code></p><p><code>ssh -T git@gitlab.com</code></p><ol start="3"><li>分别测试秘钥连接是否可用</li></ol><p><code>xxx! You’ve successfully authenticated, but GitHub does not provide bash access.</code></p><p>出现上述提示，连接成功</p><h2 id="git账户设置（此步骤可不需要，只影响提交的用户名）"><a href="#git账户设置（此步骤可不需要，只影响提交的用户名）" class="headerlink" title="git账户设置（此步骤可不需要，只影响提交的用户名）"></a>git账户设置（此步骤可不需要，只影响提交的用户名）</h2><ul><li>取消 git 全局用户名&#x2F;邮箱的设置，设置独立的 用户名&#x2F;邮箱<ol><li>取消全局 用户名&#x2F;邮箱 配置<ul><li><code> git config --global --unset user.name</code></li><li><code> git config --global --unset user.email</code></li></ul></li><li>进入项目文件夹，单独设置每个repo 用户名&#x2F;邮箱<ul><li><code>$ git config user.email &quot;xxxx@xx.com&quot;</code></li><li><code>$ git config user.name &quot;xxxx&quot;</code></li></ul></li></ol></li></ul><h2 id="编辑ssh-config文件"><a href="#编辑ssh-config文件" class="headerlink" title="编辑ssh config文件"></a>编辑ssh config文件</h2><p>没有这个文件可以手动创建一个，文件内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 第一个账号，默认使用的账号</span><br>Host github<br>HostName gitlab.abc.net<br>User ypjiao<br>IdentityFile ~/.ssh/id_rsa<br><span class="hljs-comment"># 第二个账号</span><br>Host gitlab  <span class="hljs-comment"># second为前缀名，可以任意设置</span><br>HostName gitlab.com<br>User Andrew_Jiao<br>IdentityFile ~/.ssh/id_rsa_jiao<br><br><br><span class="hljs-comment"># 配置文件参数</span><br><span class="hljs-comment"># Host : Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件（可以直接填写ip地址）</span><br><span class="hljs-comment"># HostName : 要登录主机的主机名（建议与Host一致）</span><br><span class="hljs-comment"># User : 登录名（如gitlab的username）</span><br><span class="hljs-comment"># IdentityFile : 指明上面User对应的identityFile路径</span><br><span class="hljs-comment"># Port: 端口号（如果不是默认22号端口则需要指定）</span><br></code></pre></td></tr></table></figure><p>该文件内容的意思是</p><p>当你希望克隆<code>Andrew_Jiao@gitlab.com:tik5213/aspirin-release-manager.git</code>这个仓库时。你可以使用如下命令来克隆：</p><p><code>git clone home:tik5213/aspirin-release-manager.git </code></p><ul><li>testrepo 替换成 <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#108;&#97;&#98;&#x2e;&#97;&#98;&#99;&#46;&#110;&#101;&#x74;">git@gitlab.abc.net</a> （即 HostName + User） 最终，使用 IdentityFile 中指明的 ~&#x2F;.ssh&#x2F;testrepo_rsa 私钥去请求下载目标仓库。</li></ul>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>repository</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git特殊命令</title>
    <link href="/2018/12/24/git%E5%91%BD%E4%BB%A4%E6%8F%90%E5%8D%87/"/>
    <url>/2018/12/24/git%E5%91%BD%E4%BB%A4%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<h1 id="git-config命令"><a href="#git-config命令" class="headerlink" title="git config命令"></a>git config命令</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>这些变量可以被存储在三个不同的位置： </p><ol><li><code>/etc/gitconfig</code> 文件：包含了适用于系统所有用户和所有库的值。如果你传递参数选项’—system’ 给 git config，它将明确的读和写这个文件</li><li><code>~/.gitconfig</code> 文件 ：具体到你的用户。你可以通过传递—global 选项使Git 读或写这个特定的文件 </li><li>位于git目录的config文件 (也就是 <code>.git/config</code>) ：无论当前在用的库是什么，特定指向该单一的库。每个级别重写前一个级别的值。因此，在<code>.git/config</code>中的值覆盖了在<code>/etc/gitconfig</code>中的同一个值。</li></ol><h2 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h2><p>带global参数为全局设置，当希望不同工程用不同的用户名时（比如：个人项目和公司项目），则移除–global参数，系统回优先使用当前配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git config  user.name <span class="hljs-string">&quot;maxsu&quot;</span><br>$ git config user.email <span class="hljs-string">&quot;test.com@foxmail.com&quot;</span><br><br>$ git config --global user.name <span class="hljs-string">&quot;maxsu&quot;</span><br>$ git config --global user.email <span class="hljs-string">&quot;test.com@foxmail.com&quot;</span><br></code></pre></td></tr></table></figure><h2 id="配置编辑器"><a href="#配置编辑器" class="headerlink" title="配置编辑器"></a>配置编辑器</h2><ul><li>配置编辑工具<ul><li>$ <code>git config --global core.editor 工具路径</code></li></ul></li><li>配置合并工具<ul><li><code>$ git config --global merge.tool 比较工具路径</code></li></ul></li><li>配置比较工具<ul><li><code>$ git config --global diff.tool  比较工具路径</code></li></ul></li></ul><h2 id="检查配置"><a href="#检查配置" class="headerlink" title="检查配置"></a>检查配置</h2><p>如果想检查你的设置，可以使用 <code>git config --list</code> 命令来列出Git可以在该处找到的所有的设置: </p><h2 id="添加删除配置"><a href="#添加删除配置" class="headerlink" title="添加删除配置"></a>添加删除配置</h2><ul><li>添加<ul><li><code>git config [–local|–global|–system] –add section.key value</code>(默认是添加在 <code>local</code> 配置中)</li></ul></li><li>删除<ul><li><code>git config [–local|–global|–system] –unset section.key </code></li></ul></li></ul><h1 id="git-log命令"><a href="#git-log命令" class="headerlink" title="git log命令"></a>git log命令</h1><h2 id="设置log命令"><a href="#设置log命令" class="headerlink" title="设置log命令"></a>设置log命令</h2><p>设置git log命令可方便查看日志，普通的gitlog指令不人性化</p><ul><li>命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">##单行列出详细信息</span><br>git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%cn committed %h on %cd&quot;</span><br>git <span class="hljs-built_in">log</span> --graph --pretty=format:<span class="hljs-string">&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27;</span> --abbrev-commit<br><span class="hljs-comment">##绘制合并图 --graph</span><br>git <span class="hljs-built_in">log</span> --graph --oneline --decorate<br></code></pre></td></tr></table></figure><ul><li>定义别名</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --global alias.lg<br><br>git config --global alias.lg <span class="hljs-string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span> <br></code></pre></td></tr></table></figure><h2 id="提交log的过滤"><a href="#提交log的过滤" class="headerlink" title="提交log的过滤"></a>提交log的过滤</h2><ul><li><p>根据数量过滤</p><ul><li><code>git log -3 </code></li></ul></li><li><p>根据日期过滤</p><ul><li>可以用before或after参数，这两个参数接受多种日期格式<ul><li>&#96;git log –after&#x3D;”2014-7-1” &#96;&#96;</li><li>&#96;&#96;git log –after&#x3D;”yesterday” &#96;</li></ul></li><li>也可以接受时间概念,像”1 week ago”，或者是”yesterday” <ul><li><code>git log --after=&quot;yesterday&quot; </code></li></ul></li><li>可以用before和after来组成时间区间，同since，until<ul><li><code>git log --after=&quot;2014-7-1&quot; --before=&quot;2014-7-4&quot; </code></li></ul></li></ul></li><li><p>根据提交者过滤</p><ul><li>–auther参数，传入一个正则表达式 可找到正则匹配的所有人，也可直接指定人名<ul><li><code>git log --author=&quot;John/|Mary&quot; </code></li></ul></li></ul></li><li><p>根据提交内容过滤</p><ul><li>使用grep参数可以查找参数指定的关键字过滤，使用-i参数还能忽略大小写<ul><li><code>git log --grep=&quot;TEST&quot;</code></li></ul></li></ul></li><li><p>根据文件过滤</p><ul><li>直接传入文件或文件及路径可直接过滤出想看的文件<ul><li><code>git log -- foo.py bar.py </code></li></ul></li></ul></li><li><p>根据改动内容过滤</p><ul><li>通过-S””参数来判断引号中的内容过滤</li><li>-G”” 参数根据正则匹配<ul><li><code>git log -S&quot;Hello, World!&quot; </code></li></ul></li></ul></li><li><p>根据id范围过滤</p><ul><li><code>git log &lt;since&gt;..&lt;until&gt; </code></li><li>当传入的是分支名称时，则表示展示分支独有的提交commit<ul><li><code>git log &lt;since&gt;..&lt;until&gt; </code></li></ul></li></ul></li><li><p>滤过merge</p><ul><li>如不需要merge的commit<ul><li><code>git log --no-merges </code></li></ul></li><li>如只看merge<ul><li><code>git log --merges </code></li></ul></li></ul></li></ul><h2 id="查看某次提交"><a href="#查看某次提交" class="headerlink" title="查看某次提交"></a>查看某次提交</h2><ul><li>可通过git的GUI工具单独查看，通过输入<code>gitk</code>指令打开</li><li>如果在知道commitID的情况下课通过指令<code>git show commitID</code>查看</li></ul><h1 id="git-rebase命令"><a href="#git-rebase命令" class="headerlink" title="git rebase命令"></a>git rebase命令</h1><p><code>git rebase</code>命令与<code>git merge</code>命令一样都是将<strong>目标分支</strong>的代码合并到<strong>本地分支</strong>，但实现的流程与效果与merge指令不同</p><ul><li><code>git merge</code> 指令是直接将<strong>目标分支</strong>中的提交合并到<strong>本地分支</strong>中，当有冲突时，会把额外生成一次合并冲突的提交记录</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/gitMergeProcess.png"></p><ul><li><code>git rebase</code>则是将<strong>本地分支</strong>中的提交记录保存为补丁（存储在.git&#x2F;rebase目录），随后将<strong>目标分支</strong>的代码合并到<strong>本地分支</strong>中，最后再将暂存的分支重新添加提交到<strong>本地分支</strong>中</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/gitRebaseProcess.png"></p><h2 id="关于冲突"><a href="#关于冲突" class="headerlink" title="关于冲突"></a>关于冲突</h2><p>在rebase的过程中，也许会出现冲突(conflict). 在这种情况，Git会停止rebase并会让你去解决 冲突；在解决完冲突后，用”git-add”命令去更新这些内容的索引(index), 然后，无需执行 git-commit,只要执行: </p><ul><li><code>$ git rebase --continue </code></li></ul><p>在任何时候，你可以用–abort参数来终止rebase的行动，并且”mywork” 分支会回到rebase开始前的状态。 </p><ul><li><p><code>$ git rebase --abort </code></p><p>​            参考文件<a href="https://www.yiibai.com/git/git_config.html">https://www.yiibai.com/git/git_config.html</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven使用</title>
    <link href="/2018/12/21/Maven/"/>
    <url>/2018/12/21/Maven/</url>
    
    <content type="html"><![CDATA[<h1 id="关于Maven"><a href="#关于Maven" class="headerlink" title="关于Maven"></a>关于Maven</h1><p><strong>Maven</strong>: 翻译为”专家”、”内行”，是<strong>Apache</strong>下的一个纯Java开发的一个开源项目。</p><p><strong>Maven</strong>是一个项目管理工具，使用Maven可以来管理企业级的Java项目开发及依赖的管理。</p><p>使用<strong>Maven</strong>开发，可以简化项目配置，统一项目结构。总之，Maven可以让开发者的工作变得更简单。</p><h1 id="Maven的安装和配置"><a href="#Maven的安装和配置" class="headerlink" title="Maven的安装和配置"></a>Maven的安装和配置</h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ul><li>Maven 是一个基于 Java 的工具，所以要做的第一件事情就是安装 JDK。</li><li>Maven对JDK的要求主要是<ol><li>Maven 3.3 要求 JDK 1.7 或以上</li><li>Maven 3.2 要求 JDK 1.6 或以上</li><li>Maven 3.0&#x2F;3.1 要求 JDK 1.5 或以上</li></ol></li></ul><p>最后使用<code>java -version</code>命令来检查是否安装jdk成功以及验证版本是否正确</p><h2 id="Maven的下载"><a href="#Maven的下载" class="headerlink" title="Maven的下载"></a>Maven的下载</h2><p>可在Maven官网进行下载：<a href="http://maven.apache.org/download.cgi">下载地址</a></p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/downloadMaven.png"></p><table><thead><tr><th>系统</th><th>包名</th></tr></thead><tbody><tr><td>Windows</td><td>apache-maven-3.3.9-bin.zip</td></tr><tr><td>Linux</td><td>apache-maven-3.3.9-bin.tar.gz</td></tr></tbody></table><h2 id="添加Maven环境变量"><a href="#添加Maven环境变量" class="headerlink" title="添加Maven环境变量"></a>添加Maven环境变量</h2><p>添加环境变量 MAVEN_HOME：</p><table><thead><tr><th>系统</th><th>配置</th></tr></thead><tbody><tr><td>Windows</td><td>右键 “计算机”，选择 “属性”，之后点击 “高级系统设置”，点击”环境变量”，来设置环境变量，有以下系统变量需要配置：新建系统变量 <strong>MAVEN_HOME</strong>，变量值：你的Maven项目安装目录<img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenEnvironment.png">  编辑系统变量 <strong>Path</strong>，添加变量值：;%MAVEN_HOME%\bin      <img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/SystemPath.png"></td></tr><tr><td>Linux</td><td>下载解压：                                                                                                                                                  <code># wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz                                                                                       # tar -xvf  apache-maven-3.3.9-bin.tar.gz                                                        # sudo mv -f apache-maven-3.3.9 /usr/local/</code>                                                                                         编辑 <strong>&#x2F;etc&#x2F;profile</strong> 文件 sudo vim &#x2F;etc&#x2F;profile，在文件末尾添加如下代码：                                                <code>export MAVEN_HOME=/usr/local/apache-maven-3.3.9export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</code>                               保存文件，并运行如下命令使环境变量生效：# source &#x2F;etc&#x2F;profile在控制台输入如下命令，如果能看到 Maven 相关版本信息，则说明 Maven 已经安装成功：                                                                                              <code># mvn -v</code></td></tr></tbody></table><h2 id="Maven的配置文件基本设置"><a href="#Maven的配置文件基本设置" class="headerlink" title="Maven的配置文件基本设置"></a>Maven的配置文件基本设置</h2><p>配置文件路径一般在Maven项目路径的conf目录中</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenPath.png"></p><h3 id="本地仓库设置"><a href="#本地仓库设置" class="headerlink" title="本地仓库设置"></a>本地仓库设置</h3><ul><li>maven指定的本地仓库的默认位置是在c盘，默认在：C:&#x2F;Users&#x2F;{当前用户}&#x2F;.m2&#x2F;repository,也可通过修改<code>&lt;localRepository/&gt;</code>标签来修改仓库路径</li></ul><h3 id="代理服务器设置"><a href="#代理服务器设置" class="headerlink" title="代理服务器设置"></a>代理服务器设置</h3><p>一些公司和部门有专有的防火墙设置，使用http代理服务器来阻止用户直接访问互联网，因此还需要为maven设置代理才能使maven正常下载依赖包</p><ul><li>取消<code>&lt;proxies&gt;</code>标签内的代理服务器配置注释，并配置正确的代理服务器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">proxies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- proxy</span><br><span class="hljs-comment">     | Specification for one proxy, to be used in connecting to the network.</span><br><span class="hljs-comment">     |</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">proxies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">proxy</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>optional<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">active</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">active</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">protocol</span>&gt;</span>http<span class="hljs-tag">&lt;/<span class="hljs-name">protocol</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>yiibai<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>password<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span>proxy.yiibai.com<span class="hljs-tag">&lt;/<span class="hljs-name">host</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8888<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">nonProxyHosts</span>&gt;</span>local.net|some.host.com<span class="hljs-tag">&lt;/<span class="hljs-name">nonProxyHosts</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">proxy</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">proxies</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Maven中央仓库"><a href="#Maven中央仓库" class="headerlink" title="Maven中央仓库"></a>Maven中央仓库</h1><h2 id="查找依赖包"><a href="#查找依赖包" class="headerlink" title="查找依赖包"></a>查找依赖包</h2><p>如果Maven的本地仓库没有找到指定依赖，会直连<a href="http://repo1.maven.org/maven2/">中央仓库</a>获取依赖，也可直接访问这个中央仓库路径找到想要的依赖包</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenMasterRepository.png"></p><p>直接从目录中找依赖包可能不太方便，因此可在改版后的<a href="http://search.maven.org/">Maven中心存储网站</a>查找依赖包</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenMasterRepository2.png"></p><p>不过目前比较常用的是通过<a href="https://mvnrepository.com来查找依赖/">https://mvnrepository.com来查找依赖</a></p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenRepository.png"></p><h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><p>依赖配置添加在pom.xml文件中的<code>&lt;dependencies&gt;</code>标签内,以log4j为例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置远程仓库"><a href="#配置远程仓库" class="headerlink" title="配置远程仓库"></a>配置远程仓库</h2><ul><li>在settings文件中配置私服服务器为<strong>私服服务器</strong>或者<strong>云服务器</strong>。如果不配置默认连接的是<strong>中央仓库</strong>，由于中央仓库面对的是全球用户，所以在下载jar包时，效率可能会比较低。,配置方法如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-comment">&lt;!--  配置阿里云  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>关于私库如何搭建请参考<a href="">搭建私库</a></p><h1 id="Maven仓库调用流程"><a href="#Maven仓库调用流程" class="headerlink" title="Maven仓库调用流程"></a>Maven仓库调用流程</h1><p>在一般情况下，依赖包拉取流程如下</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenProcess.png"></p><ol><li>从本地获取依赖，若没有则执行2</li><li>从私库获取依赖，若没有则执行3（第二步需要有自定义的私库，若没有则直接执行第三步）</li><li>从远程仓库获取依赖，若没有则报错</li></ol><p>当我们需要的依赖既不存在于本地仓库，也不存在于远程的中央仓库（资源库）时，需要手动设置仓库拉取依赖；修改项目的pom.xml文件添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>资源库ID<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>指定仓库的路径<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置后在以上的依赖顺序上多出一条</p><ol start="4"><li>从配置url指定仓库获取依赖，若没有则报错退出<ul><li>实际上3和4就是同事进行的（或者说先后顺序依赖于配置文件位置），由于我们可以在pom文件中配置多个仓库，所以会根据配置的仓库数一一查找依赖</li></ul></li></ol><p>当然，如果是大型项目的情况下会有多个工程，而每个工程均会有pom.xml文件，且在未来会有越来越多的项目；这是为省去配置的麻烦，可以为Maven设置全局仓库配置。</p><p>全局配置主要是利用setting.xml文件中的<code>&lt;profiles&gt;&lt;profile&gt;.....&lt;/profile&gt;&lt;/profiles&gt;</code>标签，该标签不仅能配置jar包依赖仓库，还能配置Maven插件依赖仓库<code>&lt;pluginRepositories&gt; </code>等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- id必须唯一 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>myRepository1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- id必须唯一 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>myRepository1_1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 仓库的url地址 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- id必须唯一 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>myRepository2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- id必须唯一 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>myRepository2_1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 仓库的url地址 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public-jboss/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">activeProfiles</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 激活myRepository1 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activeProfile</span>&gt;</span>myRepository1<span class="hljs-tag">&lt;/<span class="hljs-name">activeProfile</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 激活myRepository2 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activeProfile</span>&gt;</span>myRepository2<span class="hljs-tag">&lt;/<span class="hljs-name">activeProfile</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">activeProfiles</span>&gt;</span> <br></code></pre></td></tr></table></figure><h1 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h1><p>new一个Maven项目，是否选用骨架均可。</p><p>Maven项目目录介绍</p><ol><li>&#x2F;src&#x2F;main&#x2F;java – 主目录下的Java目录，用于存放项目中的.java文件</li><li>&#x2F;src&#x2F;main&#x2F;resources – 主目下的资源目录，存放项目中的资源文件(如框架的配置文件)</li><li>&#x2F;src&#x2F;test&#x2F;java – 测试目录下的Java目录，用于存放所有单元测试类的.java文件，如Junit测试类</li><li>&#x2F;src&#x2F;test&#x2F;resources – 测试目录下的资源目录，用于存放测试类所需资源文件(如框架的配置文件)</li><li>&#x2F;target – 项目输出目录，编译后的class文件、及项目打成的war包等会输出到此目录中</li><li>&#x2F;pom.xml – maven项目的核心配置文件，文件中通过坐标来管理项目中的所有jar包和插件。</li></ol><h1 id="Maven的pom文件"><a href="#Maven的pom文件" class="headerlink" title="Maven的pom文件"></a>Maven的pom文件</h1><p>POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等</p><p>执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。</p><ul><li>POM 中可以指定以下配置：<ul><li>项目依赖</li><li>插件</li><li>执行目标</li><li>项目构建 profile</li><li>项目版本</li><li>项目开发者列表</li><li>相关邮件列表信息</li></ul></li></ul><h2 id="Maven项目描述"><a href="#Maven项目描述" class="headerlink" title="Maven项目描述"></a>Maven项目描述</h2><p>在创建 POM 之前，我们首先需要描述项目组 (groupId), 项目的唯一ID。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;<span class="hljs-type">project</span> <span class="hljs-variable">xmlns</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>    xmlns:xsi = <span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>    xsi:schemaLocation = <span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span><br><span class="hljs-string">    http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br> <br>    &lt;!-- 模型版本 --&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br>    &lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;<br>    &lt;groupId&gt;com.companyname.project-group&lt;/groupId&gt;<br> <br>    &lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;<br>    &lt;artifactId&gt;project&lt;/artifactId&gt;<br> <br>    &lt;!-- 版本号 --&gt;<br>    &lt;version&gt;<span class="hljs-number">1.0</span>&lt;/version&gt;<br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><ul><li>所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。</li></ul><table><thead><tr><th>节点</th><th>描述</th></tr></thead><tbody><tr><td>project</td><td>工程的根标签。</td></tr><tr><td>modelVersion</td><td>模型版本需要设置为 4.0。</td></tr><tr><td>groupId</td><td>这是工程组的标识。它在一个组织或者项目中通常是唯一的。例如，一个银行组织 com.companyname.project-group 拥有所有的和银行相关的项目。</td></tr><tr><td>artifactId</td><td>这是工程的标识。它通常是工程的名称。例如，消费者银行。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。</td></tr><tr><td>version</td><td>这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。例如：<code>com.company.bank:consumer-banking:1.0com.company.bank:consumer-banking:1.1</code></td></tr></tbody></table><h2 id="必要的Pom"><a href="#必要的Pom" class="headerlink" title="必要的Pom"></a>必要的Pom</h2><h2 id="关于父类（Super）pom"><a href="#关于父类（Super）pom" class="headerlink" title="关于父类（Super）pom"></a>关于父类（Super）pom</h2><p>父类（Super）pom类似于java中的超类，由于pom有父子继承的关系，子类可以直接继承父类所有的pom配置，一般父 POM 会包含一些可被继承的默认设置。</p><p>当 Maven 发现需要下载 POM 中的 依赖时，它会到 Super POM 中配置的<a href="http://repo1.maven.org/maven2">默认仓库</a>去下载。</p><p><strong>Super pom 加上工程自己的配置pom最终会生成一个 effective pom，通过这个 effective pom来执行相关需要的依赖等操作</strong></p><ul><li>可以用<code>mvn help:effective-pom</code>指令来下载查看当前的effective pom（前提是当前目录会有一个pom文件，可进入新创建的maven工程目录查看）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!-- ================================================================= --&gt;</span><br><span class="hljs-comment">&lt;!--                                                                   --&gt;</span><br><span class="hljs-comment">&lt;!-- Generated by Maven Help Plugin on 2012-07-05T11:41:51             --&gt;</span><br><span class="hljs-comment">&lt;!-- See: http://maven.apache.org/plugins/maven-help-plugin/           --&gt;</span><br><span class="hljs-comment">&lt;!--                                                                   --&gt;</span><br><span class="hljs-comment">&lt;!-- ================================================================= --&gt;</span><br> <br><span class="hljs-comment">&lt;!-- ================================================================= --&gt;</span><br><span class="hljs-comment">&lt;!--                                                                   --&gt;</span><br><span class="hljs-comment">&lt;!-- Effective POM for project                                         --&gt;</span><br><span class="hljs-comment">&lt;!-- &#x27;com.companyname.project-group:project-name:jar:1.0&#x27;              --&gt;</span><br><span class="hljs-comment">&lt;!--                                                                   --&gt;</span><br><span class="hljs-comment">&lt;!-- ================================================================= --&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/</span></span><br><span class="hljs-string"><span class="hljs-tag">2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 h</span></span><br><span class="hljs-string"><span class="hljs-tag">ttp://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.companyname.project-group<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>project<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sourceDirectory</span>&gt;</span>C:/MVN/project/src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">sourceDirectory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scriptSourceDirectory</span>&gt;</span>src/main/scripts<span class="hljs-tag">&lt;/<span class="hljs-name">scriptSourceDirectory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">testSourceDirectory</span>&gt;</span>C:/MVN/project/src/test/java<span class="hljs-tag">&lt;/<span class="hljs-name">testSourceDirectory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>C:/MVN/project/target/classes<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">testOutputDirectory</span>&gt;</span>C:/MVN/project/target/test-classes<span class="hljs-tag">&lt;/<span class="hljs-name">testOutputDirectory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mergeId</span>&gt;</span>resource-0<span class="hljs-tag">&lt;/<span class="hljs-name">mergeId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>C:/MVN/project/src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">testResources</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">testResource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mergeId</span>&gt;</span>resource-1<span class="hljs-tag">&lt;/<span class="hljs-name">mergeId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>C:/MVN/project/src/test/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">testResource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">testResources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>C:/MVN/project/target<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>project-1.0<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2-beta-2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-ear-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-ejb-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-install-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-plugin-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-rar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-release-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0-beta-8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-site-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0-beta-7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1-alpha-2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-help-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Maven Repository Switchboard<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo1.maven.org/maven2<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>never<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Maven Plugin Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo1.maven.org/maven2<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">reporting</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>C:/MVN/project/target/site<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">reporting</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上面的 pom.xml 中，你可以看到 Maven 在执行目标时需要用到的默认工程源码目录结构、输出目录、需要的插件、仓库和报表目录。</p><p>Maven 的 pom.xml 文件也不需要手工编写。Maven 提供了大量的原型插件来创建工程，包括工程结构和 pom.xml。</p><h2 id="POM-标签大全详解"><a href="#POM-标签大全详解" class="headerlink" title="POM 标签大全详解"></a>POM 标签大全详解</h2><p>随便看看吧，了解一下即可，不经常用的早晚会忘记</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 </span><br><span class="hljs-comment">        version。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--被继承的父项目的构件标识符 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--被继承的父项目的全球唯一标识符 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--被继承的父项目的版本 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 </span><br><span class="hljs-comment">            目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>asia.banseon<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 </span><br><span class="hljs-comment">        特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>banseon-maven2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目的名称, Maven产生的文档用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>banseon-maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目主页的URL, Maven产生的文档用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 </span><br><span class="hljs-comment">        签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>A maven project to study maven.<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--描述了这个项目构建环境中的前提条件。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">prerequisites</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">prerequisites</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">issueManagement</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--问题管理系统（例如jira）的名字， --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">system</span>&gt;</span>jira<span class="hljs-tag">&lt;/<span class="hljs-name">system</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--该项目使用的问题管理系统的URL --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://jira.baidu.com/banseon<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">issueManagement</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目持续集成信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ciManagement</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--持续集成系统的名字，例如continuum --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">system</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">notifiers</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">notifier</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--传送通知的途径 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--发生错误时是否通知 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">sendOnError</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--构建失败时是否通知 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">sendOnFailure</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--构建成功时是否通知 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">sendOnSuccess</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--发生警告时是否通知 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">sendOnWarning</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--不赞成使用。通知发送到哪里 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">address</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--扩展配置项 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">notifier</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">notifiers</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ciManagement</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">inceptionYear</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--项目相关邮件列表信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mailingLists</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mailingList</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--邮件的名称 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">post</span>&gt;</span>banseon@126.com<span class="hljs-tag">&lt;/<span class="hljs-name">post</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">subscribe</span>&gt;</span>banseon@126.com<span class="hljs-tag">&lt;/<span class="hljs-name">subscribe</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">unsubscribe</span>&gt;</span>banseon@126.com<span class="hljs-tag">&lt;/<span class="hljs-name">unsubscribe</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--你可以浏览邮件信息的URL --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span>http:/hi.baidu.com/banseon/demo/dev/<span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mailingList</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mailingLists</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目开发者列表 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">developers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--某个项目开发者的信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">developer</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--SCM里项目开发者的唯一标识符 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>HELLO WORLD<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--项目开发者的全名 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>banseon<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--项目开发者的email --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>banseon@126.com<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--项目开发者的主页的URL --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">roles</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">role</span>&gt;</span>Project Manager<span class="hljs-tag">&lt;/<span class="hljs-name">role</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">role</span>&gt;</span>Architect<span class="hljs-tag">&lt;/<span class="hljs-name">role</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">roles</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--项目开发者所属组织 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">organization</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">organization</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--项目开发者所属组织的URL --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">organizationUrl</span>&gt;</span>http://hi.baidu.com/banseon<span class="hljs-tag">&lt;/<span class="hljs-name">organizationUrl</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--项目开发者属性，如即时消息如何处理等 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dept</span>&gt;</span>No<span class="hljs-tag">&lt;/<span class="hljs-name">dept</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--项目开发者所在时区， -11到12范围内的整数。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timezone</span>&gt;</span>-5<span class="hljs-tag">&lt;/<span class="hljs-name">timezone</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">developer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">developers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目的其他贡献者列表 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contributors</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--项目的其他贡献者。参见developers/developer元素 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">contributor</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">email</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">organization</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">organizationUrl</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">roles</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timezone</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">contributor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">contributors</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">licenses</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">license</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--license用于法律上的名称 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Apache 2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--官方的license正文页面的URL --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.baidu.com/banseon/LICENSE-2.0.txt<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--项目分发的主要方式： repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">distribution</span>&gt;</span>repo<span class="hljs-tag">&lt;/<span class="hljs-name">distribution</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--关于license的补充信息 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">comments</span>&gt;</span>A business-friendly OSS license<span class="hljs-tag">&lt;/<span class="hljs-name">comments</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">license</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">licenses</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scm</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">connection</span>&gt;</span><br>            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">connection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">developerConnection</span>&gt;</span><br>            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">developerConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--当前代码的标签，在开发阶段默认为HEAD --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tag</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://svn.baidu.com/banseon<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">scm</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--描述项目所属组织的各种属性。Maven产生的文档用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">organization</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--组织的全名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--组织主页的URL --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">organization</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--构建项目需要的信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sourceDirectory</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scriptSourceDirectory</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">testSourceDirectory</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--被编译过的应用程序class文件存放的目录。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--被编译过的测试class文件存放的目录。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">testOutputDirectory</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--使用来自该项目的一系列构建扩展 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--描述使用到的构建扩展。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">extension</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--构建扩展的groupId --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--构建扩展的artifactId --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--构建扩展的版本 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">extension</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">extensions</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">defaultGoal</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例 </span><br><span class="hljs-comment">                    子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--描述存放资源的目录，该路径相对POM路径 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--包含的模式列表，例如**/*.xml. --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--排除的模式列表，例如**/*.xml --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">testResources</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">testResource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">testResource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">testResources</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--构建产生的所有文件存放的目录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filters</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--使用的插件列表 。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--plugin元素包含描述插件所需要的信息。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--插件在仓库里的group ID --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span> /&gt;</span><br>                    <span class="hljs-comment">&lt;!--插件在仓库里的artifact ID --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span> /&gt;</span><br>                    <span class="hljs-comment">&lt;!--被使用的插件的版本（或版本范围） --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span> /&gt;</span><br>                    <span class="hljs-comment">&lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span> /&gt;</span><br>                    <span class="hljs-comment">&lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!--execution元素包含了插件执行需要的信息 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> /&gt;</span><br>                            <span class="hljs-comment">&lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">phase</span> /&gt;</span><br>                            <span class="hljs-comment">&lt;!--配置的执行目标 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span> /&gt;</span><br>                            <span class="hljs-comment">&lt;!--配置是否被传播到子POM --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span> /&gt;</span><br>                            <span class="hljs-comment">&lt;!--作为DOM对象的配置 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--项目引入插件所需要的额外依赖 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!--参见dependencies/dependency元素 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                            ......<br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--任何配置是否被传播到子项目 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span> /&gt;</span><br>                    <span class="hljs-comment">&lt;!--作为DOM对象的配置 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--使用的插件列表 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--参见dependencies/dependency元素 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                        ......<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">goals</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--在列的项目构建profile，如果被激活，会修改构建处理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--根据环境参数或命令行参数激活某个构建处理 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--profile默认是否激活的标志 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">os</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--激活profile的操作系统的名字 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Windows XP<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--激活profile的操作系统所属家族(如 &#x27;windows&#x27;) --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Windows<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--激活profile的操作系统体系结构 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">arch</span>&gt;</span>x86<span class="hljs-tag">&lt;/<span class="hljs-name">arch</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--激活profile的操作系统版本 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.2600<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">os</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--激活profile的属性的名称 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mavenVersion<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--激活profile的属性的值 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--如果指定的文件存在，则激活profile。 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exists</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">exists</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--如果指定的文件不存在，则激活profile。 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">missing</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">missing</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--构建项目所需要的信息。参见build元素 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">defaultGoal</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">testResources</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">testResource</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">testResource</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">testResources</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filters</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span> /&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span> /&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">version</span> /&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span> /&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> /&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span> /&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span> /&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span> /&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> /&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                                <span class="hljs-comment">&lt;!--参见dependencies/dependency元素 --&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                                    ......<br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span> /&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span> /&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">version</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">id</span> /&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">phase</span> /&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">goals</span> /&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span> /&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> /&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!--参见dependencies/dependency元素 --&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                                ......<br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">modules</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--发现依赖和扩展的远程仓库列表。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--参见repositories/repository元素 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">name</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">url</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span> /&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">name</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">url</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--参见dependencies/dependency元素 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    ......<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">reports</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--该元素包括使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">reporting</span>&gt;</span><br>                ......<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">reporting</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--参见dependencyManagement元素 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--参见dependencies/dependency元素 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                        ......<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--参见distributionManagement元素 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>                ......<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--参见properties元素 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--发现依赖和扩展的远程仓库列表。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--包含需要连接到远程仓库的信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--如何处理远程仓库里发布版本的下载 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 </span><br><span class="hljs-comment">                策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>banseon-repository-proxy<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--远程仓库名称 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>banseon-repository-proxy<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--远程仓库URL，按protocol://hostname/path形式 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.1.169:9999/repository/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 </span><br><span class="hljs-comment">                而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span><br>            ......<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span><br> <br> <br>    <span class="hljs-comment">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--依赖的group ID --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--依赖的artifact ID --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-artifact<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， </span><br><span class="hljs-comment">                尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 </span><br><span class="hljs-comment">                JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">classifier</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 - compile ：默认范围，用于编译 - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath </span><br><span class="hljs-comment">                - runtime: 在执行时需要使用 - test: 用于test任务时使用 - system: 需要外在提供相应的元素。通过systemPath来取得 </span><br><span class="hljs-comment">                - systemPath: 仅用于范围为system。提供相应的路径 - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">reports</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">reports</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--该元素描述使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">reporting</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--true，则，网站不包括默认的报表。这包括&quot;项目信息&quot;菜单中的报表。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">excludeDefaults</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--使用的报表插件和他们的配置。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--plugin元素包含描述报表插件需要的信息 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--报表插件在仓库里的group ID --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--报表插件在仓库里的artifact ID --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--被使用的报表插件的版本（或版本范围） --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--任何配置是否被传播到子项目 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--报表插件的配置 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> /&gt;</span><br>                <span class="hljs-comment">&lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">reportSets</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--表示报表的一个集合，以及产生该集合的配置 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">reportSet</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!--报表集合的唯一标识符，POM继承时用到 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> /&gt;</span><br>                        <span class="hljs-comment">&lt;!--产生报表集合时，被使用的报表的配置 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> /&gt;</span><br>                        <span class="hljs-comment">&lt;!--配置是否被继承到子POMs --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span> /&gt;</span><br>                        <span class="hljs-comment">&lt;!--这个集合里使用到哪些报表 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">reports</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">reportSet</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">reportSets</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">reporting</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact </span><br><span class="hljs-comment">        ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--参见dependencies/dependency元素 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                ......<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--部署项目产生的构件到远程仓库需要的信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">uniqueVersion</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>banseon-maven2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>banseon maven2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>file://$&#123;basedir&#125;/target/deploy<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">uniqueVersion</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>banseon-maven2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Banseon-maven2 Snapshot Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--部署项目的网站需要的信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">site</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>banseon-site<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--部署位置的名称 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>business api website<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--部署位置的URL，按protocol://hostname/path形式 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span><br>                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">site</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">downloadUrl</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relocation</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--构件新的group ID --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--构件新的artifact ID --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--构件新的版本号 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--显示给用户的，关于移动的额外信息，例如原因。 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">message</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">relocation</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 </span><br><span class="hljs-comment">            Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">status</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git基础</title>
    <link href="/2018/12/20/git%E6%93%8D%E4%BD%9C/"/>
    <url>/2018/12/20/git%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><ul><li>-mkdir 名称：创建一个目录</li><li>-cd 名称 ：进入名称对应文件夹</li><li>-pwd ：查看当前目录结构</li><li>-git init：将目录变成管理仓库，<strong>细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</strong> </li><li>-ls -ah :列表目录，可以查看影藏目录</li></ul><h3 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h3><ul><li>-git add 文件名：告诉Git，把文件添加到仓库 <ul><li>可以提交多个文件如：    <code>git add &quot;xxx&quot; &quot;xxx&quot;</code></li></ul></li><li>-git commit：提交文件<ul><li>-m：可以再后面续写本次提交的说明如<code>-m &quot;xxx&quot;</code></li></ul></li></ul><h3 id="时光穿梭机"><a href="#时光穿梭机" class="headerlink" title="时光穿梭机"></a>时光穿梭机</h3><h4 id="查看修改的文件"><a href="#查看修改的文件" class="headerlink" title="查看修改的文件"></a>查看修改的文件</h4><ul><li><p>-git status ：查看结果，具体修改了什么文件</p></li><li><p>-git diff 文件名：查看文件名指定的文件做了哪些修改“详细”</p><ul><li><pre><code class="language-java">$ git diff readme.txt diff --git a/readme.txt b/readme.txtindex 46d49bf..9247db6 100644--- a/readme.txt+++ b/readme.txt@@ -1,2 +1,2 @@-Git is a version control system.+Git is a distributed version control system. Git is free software.    //可看出添加了distribute这个单词<figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><br>#### 版本回退<br><br>+ -git log：查看日志历史记录了<br><br>+ ```java<br>  $ git log<br>  commit <span class="hljs-number">1094</span>adb<span class="hljs-number">7</span>b<span class="hljs-number">9</span>b<span class="hljs-number">3807259</span>d<span class="hljs-number">8</span>cb<span class="hljs-number">349e7</span>df<span class="hljs-number">1</span>d<span class="hljs-number">4</span>d<span class="hljs-number">6477073</span> (HEAD -&gt; master)<br>  Author: Michael Liao &lt;askxuefeng<span class="hljs-title">@gmail.com</span>&gt;<br>  Date:   Fri May <span class="hljs-number">18</span> <span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">15</span> <span class="hljs-number">2018</span> <span class="hljs-number">+0800</span><br><br>      append GPL<br><br>  commit e<span class="hljs-number">475</span>afc<span class="hljs-number">93</span><span class="hljs-keyword">c</span><span class="hljs-number">209</span>a<span class="hljs-number">690</span><span class="hljs-keyword">c</span><span class="hljs-number">39</span><span class="hljs-keyword">c</span><span class="hljs-number">13</span>a<span class="hljs-number">46716e8</span>fa<span class="hljs-number">000</span><span class="hljs-keyword">c</span><span class="hljs-number">366</span><br>  Author: Michael Liao &lt;askxuefeng<span class="hljs-title">@gmail.com</span>&gt;<br>  Date:   Fri May <span class="hljs-number">18</span> <span class="hljs-number">21</span>:<span class="hljs-number">03</span>:<span class="hljs-number">36</span> <span class="hljs-number">2018</span> <span class="hljs-number">+0800</span><br><br>      <span class="hljs-keyword">add</span> distributed<br><br>  commit eaadf<span class="hljs-number">4e385</span>e<span class="hljs-number">865</span>d<span class="hljs-number">25</span><span class="hljs-keyword">c</span><span class="hljs-number">48e7</span>ca<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">8395</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>f<span class="hljs-number">7</span>dfaef<span class="hljs-number">0</span><br>  Author: Michael Liao &lt;askxuefeng<span class="hljs-title">@gmail.com</span>&gt;<br>  Date:   Fri May <span class="hljs-number">18</span> <span class="hljs-number">20</span>:<span class="hljs-number">59</span>:<span class="hljs-number">18</span> <span class="hljs-number">2018</span> <span class="hljs-number">+0800</span><br><br>      wrote a readme file<br></code></pre></td></tr></table></figure></code></pre></li><li><p>–pretty&#x3D;oneline</p></li><li><pre><code class="language-java">$ git log --pretty=oneline1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPLe475afc93c209a690c39c13a46716e8fa000c366 add distributedeaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file//前半部分问版本号<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">+</span> -git reset ：版本回退<br><br><span class="hljs-bullet">  +</span> -- hard HEAD^：退回到上一个版本<br><span class="hljs-bullet">  +</span> -- hard HEAD^^：退回到上上一个版本<br><span class="hljs-bullet">  +</span> -- hard HEAD~100：退回到上100个版本<br><span class="hljs-bullet">  +</span> -- hard 1094a...：退回到指定id的版本，不用写权，git会自动匹配<br><br><span class="hljs-bullet">+</span> -git reflog ：用来记录每一次命令<br><br><span class="hljs-section">##### 小结</span><br><br><span class="hljs-bullet">+</span> Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<span class="hljs-code">`HEAD`</span>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<span class="hljs-code">`append GPL改为指向`</span>add distributed<span class="hljs-code">`然后顺便把工作区的文件更新了。所以你让`</span>HEAD`指向哪个版本号，你就把当前版本定位在哪 <br><br>![<span class="hljs-string">d</span>](<span class="hljs-link">http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/zero.jpg</span>)<br><br><br><br><span class="hljs-bullet">+</span> <span class="hljs-code">`HEAD`</span>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<span class="hljs-code">`git reset --hard commit_id`</span>。 <br><span class="hljs-bullet">+</span> 穿梭前，用<span class="hljs-code">`git log`</span>可以查看提交历史，以便确定要回退到哪个版本。 <br><span class="hljs-bullet">+</span> 要重返未来，用<span class="hljs-code">`git reflog`</span>查看命令历史，以便确定要回到未来的哪个版本。 <br><br><span class="hljs-section">#### 工作区和暂存区</span><br><br><span class="hljs-section">##### 工作区</span><br><br><span class="hljs-bullet">+</span> 就是你在电脑里能看到的目录，比如我的<span class="hljs-code">`learngit`</span>文件夹就是一个工作区： <br><br>![<span class="hljs-string">s</span>](<span class="hljs-link">http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/zero.png</span>)<br><br><span class="hljs-section">##### 版本库（Repository）</span><br><br><span class="hljs-bullet">+</span> 工作区有一个隐藏目录<span class="hljs-code">`.git`</span>，这个不算工作区，而是Git的版本库。<br><span class="hljs-bullet">+</span> Git的版本库里存了很多东西，其中最重要的就是称为<span class="hljs-strong">**stage**</span>（或者叫index）的暂存区，还有Git为我们自动创建的第一个<span class="hljs-strong">**分支**</span><span class="hljs-code">`master`</span>，以及指向<span class="hljs-code">`master`</span>的一个<span class="hljs-strong">**指针**</span>叫<span class="hljs-code">`HEAD`</span>。<br><br>![<span class="hljs-string">a</span>](<span class="hljs-link">http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/first.jpg</span>)<br><br><br><br><span class="hljs-bullet">+</span> 分支和<span class="hljs-code">`HEAD`</span>的概念我们以后再讲。<br><br>  前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：<br><br>  第一步是用<span class="hljs-code">`git add`</span>把文件添加进去，实际上就是<span class="hljs-strong">**把文件修改添加到暂存区**</span>；<br><br>  第二步是用<span class="hljs-code">`git commit`</span>提交更改，实际上就是<span class="hljs-strong">**把暂存区的所有内容提交到当前分支**</span>。<br><br>  因为我们创建Git版本库时，Git自动为我们创建了唯一一个<span class="hljs-code">`master`</span>分支，所以，现在，<span class="hljs-code">`git commit`</span>就是往<span class="hljs-code">`master`</span>分支上提交更改。<br><br>  你可以简单理解为，<span class="hljs-strong">**需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改**</span>。<br><br><span class="hljs-section">#### 管理修改</span><br><br><span class="hljs-bullet">+</span> git管理的只是修改，而不是文件<br><span class="hljs-bullet">+</span> 你又理解了Git是如何跟踪修改的，每次修改，如果不用<span class="hljs-code">`git add`</span>到暂存区，那就不会加入到<span class="hljs-code">`commit`</span>中。 <br><br><span class="hljs-section">#### 撤销修改</span><br><br><span class="hljs-bullet">+</span> -git checkout -- test.txt ：把test.txt`文件在工作区的修改全部撤销，这里有两种情况： <br><span class="hljs-bullet">  +</span> 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态 <br><span class="hljs-bullet">  +</span> 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态 <br><span class="hljs-bullet">    +</span> <span class="hljs-strong">**注意**</span>：<span class="hljs-code">`git checkout -- file`</span>命令中的<span class="hljs-code">`--`</span>很重要，没有<span class="hljs-code">`--`</span>，就变成了“切换到另一个分支”的命令 <br><span class="hljs-bullet">+</span> -git reset HEAD test.txt：可以把暂存区的修改撤销掉（unstage），重新放回工作区 <br><span class="hljs-bullet">  +</span> 可以再接git checkout -- test.txt将工作区的文件改回原先的状态 <br><span class="hljs-bullet">+</span> 小结：<br><span class="hljs-bullet">  +</span> 当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<span class="hljs-code">`git checkout -- file`</span>。 <br><span class="hljs-bullet">  +</span> 当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<span class="hljs-code">`git reset HEAD &lt;file&gt;`</span>，就回到了场景1，第二步按场景1操作。 <br><span class="hljs-bullet">  +</span> 已经提交了不合适的修改到版本库时，想要撤销本次提交，参考[<span class="hljs-string">版本回退</span>](<span class="hljs-link">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000</span>)一节，不过前提是没有推送到远程库 <br><br><span class="hljs-section">#### 删除文件</span><br><br><span class="hljs-bullet">+</span> -rm test.txt：将工作区中指定的文件删除<br><span class="hljs-bullet">+</span> -git rm test.txt：git会检测到之前删除的文件，这个命令会从版本库删除文件名指定文件<br><span class="hljs-bullet">+</span> 如果删错了<br><span class="hljs-bullet">+</span> -git checkout -- test.txt：其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。 <br><br><span class="hljs-section">### 远程仓库</span><br><br><span class="hljs-bullet">+</span> $ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;<br><br><span class="hljs-bullet">+</span> 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。<br><br>  如果一切顺利的话，可以在用户主目录里找到<span class="hljs-code">`.ssh`</span>目录，里面有<span class="hljs-code">`id_rsa`</span>和<span class="hljs-code">`id_rsa.pub`</span>两个文件，这两个就是SSH Key的秘钥对，<span class="hljs-code">`id_rsa`</span>是私钥，不能泄露出去，<span class="hljs-code">`id_rsa.pub`</span>是公钥，可以放心地告诉任何人。<br><br><span class="hljs-bullet">+</span> 登陆GitHub，打开“Account settings”，“SSH Keys”页面：<br><br>  然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<span class="hljs-code">`id_rsa.pub`</span>文件的内容：<br><br>![<span class="hljs-string">s</span>](<span class="hljs-link">http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/first.png</span>)<br><br><span class="hljs-bullet">+</span> 点“Add Key”，你就应该看到已经添加的Key： <br><br>![<span class="hljs-string">s</span>](<span class="hljs-link">http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/secend.png</span>)<br><br><span class="hljs-bullet">+</span> 为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。 <br><br><span class="hljs-section">### 从远程库克隆</span><br><br><span class="hljs-bullet">+</span> $ git clone https://github.com/646190632/Jiao：克隆远程仓库的项目到本地，git支持多种协议<br><br><span class="hljs-section">### 分支管理</span><br><br><span class="hljs-section">#### 时间线</span><br><br><span class="hljs-bullet">+</span> 每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<span class="hljs-code">`master`</span>分支。 <br><span class="hljs-bullet">+</span> <span class="hljs-code">`HEAD`</span>严格来说不是指向提交，而是指向<span class="hljs-code">`master`</span>，<span class="hljs-code">`master`</span>才是指向提交的，所以，<span class="hljs-code">`HEAD`</span>指向的就是当前分支。 <br><br>![<span class="hljs-string">d</span>](<span class="hljs-link">http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/third.png</span>)<br><br><span class="hljs-section">#### 创建分支</span><br><br><span class="hljs-bullet">+</span> 当我们创建新的分支，例如<span class="hljs-code">`dev`</span>时，Git新建了一个指针叫<span class="hljs-code">`dev`</span>，指向<span class="hljs-code">`master`</span>相同的提交，再把<span class="hljs-code">`HEAD`</span>指向<span class="hljs-code">`dev`</span>，就表示当前分支在<span class="hljs-code">`dev`</span>上 <br><span class="hljs-bullet">+</span> Git创建一个分支很快，因为除了增加一个<span class="hljs-code">`dev`</span>指针，改改<span class="hljs-code">`HEAD`</span>的指向，工作区的文件都没有任何变化 <br><br>![<span class="hljs-string">s</span>](<span class="hljs-link">http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/fourth.png</span>)<br><br><span class="hljs-bullet">+</span> 对工作区的修改和提交就是针对<span class="hljs-code">`dev`</span>分支了，比如新提交一次后，<span class="hljs-code">`dev`</span>指针往前移动一步，而<span class="hljs-code">`master`</span>指针不变 <br><br>![<span class="hljs-string">a</span>](<span class="hljs-link">http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/fifth.png</span>)<br><br><span class="hljs-bullet">+</span> 代码实现<br><br>  <span class="hljs-code">```java</span><br><span class="hljs-code">  $ git checkout -b dev</span><br><span class="hljs-code">  Switched to a new branch &#x27;dev&#x27;</span><br><span class="hljs-code">  //git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：</span><br><span class="hljs-code">  $ git branch dev</span><br><span class="hljs-code">  $ git checkout dev</span><br><span class="hljs-code">  Switched to branch &#x27;dev&#x27;</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h4 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h4><ul><li>代码实现</li><li>用<code>git branch</code>命令查看当前分支：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">$ git branch<br>* dev<br>  master<br>  <span class="hljs-comment">//git branch命令会列出所有分支，当前分支前面会标一个*号。</span><br></code></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><ul><li>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是<strong>直接把<code>master</code>指向<code>dev</code>的当前提交</strong>，就完成了合并：</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/sixth.png"></p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">$ git merge dev<br>Updating d46f35e..b17d20e<br>Fast-forward<br> readme.txt | <span class="hljs-number">1</span> +<br> <span class="hljs-number">1</span> file changed, <span class="hljs-number">1</span> insertion(+)<br>    <span class="hljs-comment">//git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。</span><br></code></pre></td></tr></table></figure><ul><li>注意：上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。<ul><li>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。</li></ul></li></ul><h4 id="分支的删除"><a href="#分支的删除" class="headerlink" title="分支的删除"></a>分支的删除</h4><ul><li>可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/seven.png"></p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">$ git branch -d dev<br>Deleted branch <span class="hljs-title function_">dev</span> <span class="hljs-params">(was b17d20e)</span>.<br></code></pre></td></tr></table></figure><ul><li>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</li></ul><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><ul><li>git冲突提示不仅会在命令行中，还在文件中会显示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Git is a distributed version control system.<br>Git is free software distributed under the GPL.<br>Git has a mutable index called stage.<br>Git tracks changes of files.<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>Creating a <span class="hljs-keyword">new</span> <span class="hljs-title class_">branch</span> is quick &amp; simple.<br>=======<br>Creating a <span class="hljs-keyword">new</span> <span class="hljs-title class_">branch</span> is quick AND simple.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1<br><br><span class="hljs-comment">//Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存：</span><br></code></pre></td></tr></table></figure><ul><li>如果出现冲突，根据实际情况修改原有冲突文件，两个分支分再次别提交到仓库，再次合并</li></ul><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/eight.png"></p><ul><li><code>$ git log --graph --pretty=oneline --abbrev-commit</code>：可以通过日志查看解决冲突进程</li></ul><h4 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h4><ul><li><code>Fast forward</code>模式：这种模式下，删除分支后，会丢掉分支信息。 因为<code>fast forward</code>合并就看不出来曾经做过合并。 <ul><li><code>--no-ff </code>参数用于禁用该模式</li></ul></li><li>如果禁用Fast forward模式的话，**Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息 **</li><li>在实际开发中，我们应该按照几个基本原则进行分支管理： <ul><li>首先，<code>master</code><strong>分支应该是非常稳定的，也就是仅用来发布新版本</strong>，平时不能在上面干活； </li><li>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本； </li><li>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。 </li><li>所以，团队合作的分支看起来就像这样： </li><li><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/git/nine.png"></li></ul></li></ul><h4 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h4><ul><li>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，<strong>每个bug都可以通过一个新的临时分支来修复</strong>，修复后，合并分支，然后将临时分支删除。 </li><li><code>$ git stash</code>功能 ：可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作 </li><li>关于恢复储藏起来的工作<ul><li>用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除； </li><li>用<code>git stash pop</code>，恢复的同时把stash内容也删了：</li></ul></li><li>注意：<ul><li>可以多次使用stash功能</li><li><code>$ git stash apply stash@&#123;0&#125;</code>可以选择取出指定的stash内容</li></ul></li></ul><h4 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h4><h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><ul><li>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。 </li><li><code>$ git remote</code>：查看远程库的信息<ul><li>参数<code>-v</code>查看详细信息</li></ul></li></ul><h5 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h5><ul><li><code>$ git push 远程库 要推送的分支</code>：把<strong>该分支上的所有本地提交推送到远程库</strong> 。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上： </li><li>关于哪些分支需要推送<ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发</li></ul></li></ul><h5 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h5><ul><li><code>$ git branch --set-upstream-to=origin/dev dev</code>：首先需要将本地的分支和远程的分支链接,此处设置<code>dev</code>和<code>origin/dev</code>的链接 </li><li><code>$ git pull</code>：用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来</li></ul><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ul><li>多人协作的工作模式通常是这样： <ul><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ul></li></ul><h4 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">$ git log --graph --pretty=oneline --abbrev-commit<br>* 7e61ed4 (HEAD -&gt; master) add author<br>* 3611cfe add comment<br>* f005ed4 (origin/master) set exit=<span class="hljs-number">1</span><br>* d1be385 init hello<br>...<br></code></pre></td></tr></table></figure><ul><li><code>$ git rebase</code>：Git把我们本地的提交“挪动”了位置，放到了<code>f005ed4 (origin/master) set exit=1</code>之后，这样，整个提交历史就成了一条直线 <ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比</li></ul></li></ul><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><ul><li>标签都只存储在本地，不会自动推送到远程</li></ul><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><ul><li><code>$ git tag 版本</code>：打一个新标签 <ul><li>可用<code>git tag</code>查看所有标签：</li></ul></li><li><code>$ git tag 版本号 提交的id</code>：给固定的某次提交或修改添加版本号<ul><li>-a：标签名</li><li>-m：指定说明文字</li></ul></li><li><code>$ git show 版本号</code>：显示这个版本号对应提交的详细信息</li><li>默认标签是打在最新提交的commit上的。 </li><li>如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？ <ul><li>方法是找到历史提交的commit id，然后打上就可以了</li></ul></li></ul><h4 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h4><ul><li>删除本地打错的标签<ul><li><code>$ git tag -d v0.1</code></li></ul></li><li>标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除： <ul><li><code>$ git tag -d v0.9</code></li><li><code>$ git push origin :refs/tags/v0.9</code>：注意格式</li></ul></li><li>推送某个标签名称对应的版本到远程<ul><li><code>git push origin &lt;tagname&gt;</code></li></ul></li><li>一次性推送全部尚未推送到远程的本地标签 <ul><li><code>$ git push origin --tags</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql学习</title>
    <link href="/2017/07/28/Mysql/"/>
    <url>/2017/07/28/Mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li><p>用来存储数据</p><ul><li>常用的数据库<ol><li>Oracle</li><li>Mysql</li><li>DB2</li><li>Sybase</li><li>Sql server</li><li>Redis</li><li>MongoDB</li></ol></li></ul></li></ul><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><ul><li>Mysql是服务器软件,需要客户端从远程连接服务器.</li><li>Mysql客户端:<ul><li>Mysql 命令行客户端</li><li>Mysql 官方 Workbench 窗口客户端</li><li>第三方窗口客户端: Navicat, Sql Yog, Sql Front …</li></ul></li></ul><h2 id="命令行客户端"><a href="#命令行客户端" class="headerlink" title="命令行客户端"></a>命令行客户端</h2><h3 id="登录Mysql"><a href="#登录Mysql" class="headerlink" title="登录Mysql"></a>登录Mysql</h3><blockquote><ul><li>开始 à cmd 进入命令行</li></ul><p> 切换到 mysql\bin 目录</p><p> cd  C:\Program Files\MariaDB 5.5\bin</p><ul><li><code>mysql  -uroot -p  -hxxx.xx.xx.xx  -P3306</code></li></ul><ol><li>-u用户名</li><li>-p用密码登录</li><li>-h服务器ip     本机可以省略</li><li>-P端口号       本机可以省略</li></ol></blockquote><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><blockquote><ul><li>show  databases;</li><li>show  schemas;</li></ul></blockquote><h3 id="进入数据库"><a href="#进入数据库" class="headerlink" title="进入数据库"></a>进入数据库</h3><blockquote><ul><li><code>use 数据库名字 </code></li></ul></blockquote><h3 id="查看数据库中的表"><a href="#查看数据库中的表" class="headerlink" title="查看数据库中的表"></a>查看数据库中的表</h3><blockquote><ul><li>show tables;</li></ul></blockquote><h3 id="退出客户端"><a href="#退出客户端" class="headerlink" title="退出客户端"></a>退出客户端</h3><blockquote><ul><li><code>quit;</code></li><li>\q</li><li><code>exit</code></li></ul></blockquote><h3 id="设置客户端中的中文编码"><a href="#设置客户端中的中文编码" class="headerlink" title="设置客户端中的中文编码"></a>设置客户端中的中文编码</h3><blockquote><ul><li><code>set names gbk</code>告诉mysql服务本机用的是gbk编码</li></ul></blockquote><h3 id="创建可远程登录的用户"><a href="#创建可远程登录的用户" class="headerlink" title="创建可远程登录的用户"></a>创建可远程登录的用户</h3><blockquote><ul><li><p>Mysql用户用”用户名+ip地址”来标识</p></li><li><p>eg:</p><ol><li><code>root@localhost</code>    本机</li><li>&#96;<a href="mailto:&#114;&#x6f;&#111;&#116;&#x40;&#x78;&#120;&#x78;&#46;&#x78;&#120;&#x78;&#x2e;&#x78;&#x78;&#x78;&#x2e;&#120;&#x78;&#x78;">root@xxx.xxx.xxx.xxx</a>固定机器</li><li><code>root@%</code>      所有IP（可以活用%指定适用范围）<ul><li>语法</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create user<br>&#x27;xxx&#x27;@&#x27;%&#x27;<br>identified by &#x27;root&#x27; -- 设置密码为root<br></code></pre></td></tr></table></figure></li><li><p>对用户授权：设置用户可以访问的库,表,字段,是否运行执行一些操作,比如建库,建表,增删改查…</p></li><li><p>语法</p><ol><li><code>grant 权限 on 数据库\特定的表 to 用户</code></li></ol><ul><li>eg</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 把test库所有表的查询，插入，更新内容，删除权限给用户abc<br>grant select,update,drop,insert on test.* to &#x27;abc&#x27;@&#x27;%&#x27;;<br>-- 把db1所有表的创建，更改字段，删除权限给用户<br>grant create,alter,drop on db1.* to &#x27;abc&#x27;@&#x27;%&#x27;;<br>-- 把所有库和表的所有权限给用户<br>grant all privileges on *.* to &#x27;abc&#x27;@&#x27;%&#x27;;<br>-- 把db1库和t1表的查询插入权限给用户<br>grant  select on db1.tb1 to &#x27;abc&#x27;@&#x27;%&#x27;;<br>-- 把db1库和t1表的查询字段id，和name权限给用户<br>grant select(id,name) on db1.tb1 to &#x27;abc&#x27;@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure><ul><li>远程登录</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysql -uroot -p –h192.<span class="hljs-number">168</span>.<span class="hljs-number">7</span>.xx  -P3306<br></code></pre></td></tr></table></figure></blockquote><h2 id="mysql数据库管理"><a href="#mysql数据库管理" class="headerlink" title="mysql数据库管理"></a>mysql数据库管理</h2><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><blockquote><ul><li>语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt;create  database  db1;<br>&gt;create  database  db1  charset gbk;<br></code></pre></td></tr></table></figure><ul><li>字符集</li></ul><ol><li>iso-8859-1英文,西欧字符单字节</li><li>gbk国标码中文双字节,默认按拼音排序</li><li>utf8unicode的传输格式中文三字节,默认按笔画排序</li></ol></blockquote><h3 id="查看数据库-1"><a href="#查看数据库-1" class="headerlink" title="查看数据库"></a>查看数据库</h3><blockquote><ul><li><p>库列表</p><p><code>show databases;</code></p></li><li><p>显示建库语句</p><p><code>show create database xxx;</code></p></li></ul></blockquote><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><blockquote><ul><li><p>对数据库只能修改字符集</p><p><code>alter database xxx charset gbk;</code></p></li></ul></blockquote><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><blockquote><ul><li><p>对数据库只能修改字符集(删除数据库是危险操作,不可恢复,应该先进行备份)</p><p><code>drop dababase xxx;</code></p></li></ul></blockquote><h2 id="Mysql表管理"><a href="#Mysql表管理" class="headerlink" title="Mysql表管理"></a>Mysql表管理</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><blockquote><ul><li>语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table xxx(<br>id int,<br>name varchar<br>)engine=innodb charset=utf8;<br></code></pre></td></tr></table></figure></blockquote><h3 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h3><blockquote><ul><li>语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show tables; -- 查看所有表<br>desc xxx; -- 查看字段语句<br>show create table xxx; -- 查看创表语句<br></code></pre></td></tr></table></figure></blockquote><h3 id="修改表"><a href="#修改表" class="headerlink" title="*修改表"></a>*修改表</h3><blockquote><ul><li>语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 改表名<br>rename table xx1 to xx2;<br>-- 改表属性<br>alter table xxx engine=innodb charset=utf8;<br></code></pre></td></tr></table></figure></blockquote><p>##字段修改</p><h3 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h3><blockquote><ul><li>添加字段到指定位置</li></ul><ol><li>first</li><li>after</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt;-- 修改tb2，新增gander在name之后<br>&gt;alter table tb2 add gander varchar(20) after name;<br>&gt;-- 添加多个字段出生日期，重量，email<br>&gt;alter table tb2 add(<br>&gt;birth double,<br>&gt;heigth double,<br>&gt;email varchar(100)<br>&gt;);-- 类似穿件表<br></code></pre></td></tr></table></figure></blockquote><h3 id="修改字段名"><a href="#修改字段名" class="headerlink" title="*修改字段名"></a>*修改字段名</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 修改tb2，修改字段名gander为sex<br>alter table tb2 change gander sex varchar(20)<br></code></pre></td></tr></table></figure><p>###修改字段属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt;-- 把sex字段的属性改为char(2)<br>&gt;alter table tb2 modify sex char(2);<br></code></pre></td></tr></table></figure></blockquote><h3 id="修改字段顺序"><a href="#修改字段顺序" class="headerlink" title="修改字段顺序"></a>修改字段顺序</h3><blockquote><ul><li>关键词<ul><li>firsst，after</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 将email放到name字段之后<br>alter table tb2 modify email varchar(20) after name;<br></code></pre></td></tr></table></figure></blockquote><h3 id="删除字段-危险操作，必须备份"><a href="#删除字段-危险操作，必须备份" class="headerlink" title="删除字段(危险操作，必须备份)"></a>删除字段(危险操作，必须备份)</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 删除字段height<br>alter table tb2 drop height;<br></code></pre></td></tr></table></figure></blockquote><h3 id="删除表-同上"><a href="#删除表-同上" class="headerlink" title="删除表(同上)"></a>删除表(同上)</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 删除tb2<br>drop table tb2;<br></code></pre></td></tr></table></figure></blockquote><h3 id="截断表-删除-重建"><a href="#截断表-删除-重建" class="headerlink" title="截断表(删除+重建)"></a>截断表(删除+重建)</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">truncate table tb2;<br></code></pre></td></tr></table></figure></blockquote><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><ul><li><p>Mysql 支持多种数据表存储引擎,不同引擎数据存储方式,支持的数据访问功能不同</p><p>常用引擎是 innodb(默认)和myisam</p><ul><li>innodb <ol><li>支持事务</li><li>外键</li><li>行级锁</li><li>数据表文件：<ol><li>tb2.frm       表的结构文件</li><li>tb2.ibd       存储表中的数据及索引</li></ol></li></ol></li><li>myisam<ol><li>不支持事务</li><li>不支持外键</li><li>表级锁</li><li>数据表文件<ol><li>tb2.frm       表结构</li><li>tb2.MYD       存储在表中的数据</li><li>tb2.MYI       索引数据</li></ol></li></ol></li></ul></li></ul><h2 id="Mysql增删改查"><a href="#Mysql增删改查" class="headerlink" title="Mysql增删改查"></a>Mysql增删改查</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><blockquote><ul><li>语法：<code>insert  into  tb2  values(值1,值2,值3...);</code></li><li>测试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 新建表tb3设字段为 id，name，price<br>create table tb3(<br>  id int,<br>  name varchar(20),<br>  price decimal(8,2)<br>)engine=innodb charset=utf8;<br>-- 同表中插入数据<br>insert into tb3 values(12,&#x27;华为Mate10&#x27;,4899),(45, &#x27;iPhone X&#x27;, 7299),(8, &#x27;vivo 12&#x27;, 3199);<br>-- 查询显示数据<br>select * from tb3;<br></code></pre></td></tr></table></figure></blockquote><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="*修改数据"></a>*修改数据</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 把华为Mate 10的价格改为2899；<br>update tb3 set name=&#x27;华为Mate 10&#x27;,price=2899 where id=12;<br></code></pre></td></tr></table></figure></blockquote><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 删除id为45的行<br>delete from tb3 where id=45;<br></code></pre></td></tr></table></figure></blockquote><hr><h1 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h1><h2 id="字段属性"><a href="#字段属性" class="headerlink" title="字段属性"></a>字段属性</h2><h3 id="字符串（四个）"><a href="#字符串（四个）" class="headerlink" title="字符串（四个）"></a>字符串（四个）</h3><blockquote><ul><li><p>char(长度）定长字符串，最长255字节,特点:长度不足时会补空格</p></li><li><p>varchar(最大长度)可变长度字符串，最大65535字节，</p></li><li><p>不超过255字符时，会在前面添加一个字节来显示字符串长度</p></li><li><p>超过255字符时，会在前面添加两个字节来显示字符串长度</p></li><li><p><strong>使用长度一般不超过255</strong>；</p></li><li><p>test：65535字节<strong>注意区分字符和字节差别</strong>；</p></li><li><p>blob：大对象类型（音频视屏等）</p></li></ul></blockquote><h3 id="数字"><a href="#数字" class="headerlink" title="*数字"></a>*数字</h3><blockquote><ul><li>标记<ul><li>zerofill 填充0<u>该命令会自动添加unsigned命令</u></li><li>unsigned  无符号</li></ul></li><li>int 4字节<ul><li>查询显示时，按5位显示,不足5位可以选择补0(zerofill),例如: 23 à 00023,超过5位没有影响</li></ul></li><li>bigint 8字节</li><li>float 4字节浮点数</li><li>double 8字节浮点数</li><li>decimal(m,n)m和n的意思分别是？钱一般用decimal<ol><li>定点数，一般用来表示钱</li><li>字节量，m+2；</li></ol></li><li>tinyint 1字节</li><li>smallint 2字节</li></ul></blockquote><p>​<strong>注意浮点数和定点数区别；同java</strong></p><p>###日期（四个）</p><blockquote><ul><li>datet年 月日</li><li>time 时分秒</li><li>datetime 年月日时分秒</li><li>timestamp时间戳，最大只能到2038年;特点(两个) ;<ol><li>表中第一个时间戳会自动更新时间</li><li>不能放入空值（可以放null）</li></ol></li><li>处理日期数据时,有时也会选择用 bigint 整数来作为日期数据,来标识1970-1-1 0点开始的毫秒值</li></ul></blockquote><ul><li><p>table中的所有字段字节量不超过65535;</p></li><li><blockquote><ul><li>若存在可null字段，会用有个字节来表示null（所有字段共用这个字节）</li><li>varchar</li><li>若表的字段字节量占用多可用text（只占表的10个字节）</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">测试表的总字节量<br>创建表a int b double c varchar(尝试创建长度?)，计算字节差（用表格用latin1存）<br>测试2<br>创建表a int,b varchar(255),c varchar(x)utf8码求x的最大值；<br>思考：latin1和utf8区别<br></code></pre></td></tr></table></figure></li></ul><hr><ul><li><blockquote><p>  +timestamp</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">测试timestamp<br>创建tb3 a int(3) unsigned zerofill,b timestamp,c timestamp<br>只向a字段插入4213;<br>只向a插入13<br>+ 观察a中的差别和b和c的差别；<br>+ 在尝试加入-13<br>测试2<br>修改a13行中的a，改为14*时间会自动更新*<br>查看构造代码观察tb3<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><ul><li>直接在字段属性后面添加<strong>默认值关键字</strong> (default x)</li></ul><h2 id="约束（五种）"><a href="#约束（五种）" class="headerlink" title="约束（五种）"></a>约束（五种）</h2><h3 id="主键约束-四个要点"><a href="#主键约束-四个要点" class="headerlink" title="*主键约束(四个要点)"></a>*主键约束(四个要点)</h3><blockquote><ul><li>要点</li></ul><ol><li>不重复；唯一</li><li>不能为空</li><li>自动创建索引</li><li>尽量用与业务无关的数据做主键</li></ol><ul><li>测试加主键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">创建id int，name varchar(20)并设定id为PK（两个方法）如何加入双主键，但尽量不用<br>加入数据abc主键为123；<br>加入null值在主键；<br>在主键中加入重复的值；<br></code></pre></td></tr></table></figure><ul><li><p>建表时（两个方法）和修改表时加主键</p></li><li><p>查看主键约束</p></li><li><p>删除主键约束</p></li><li><p>*自增主键（描述自增进程，3个特点）</p><ul><li>特点<ol><li>向表中插入数据时,不需要提供自增主键的值,它会自动产生连续增加的值.</li><li>如果插入null,自动填入新的自增值.</li><li>如果插入较大值,以后会从插入的值继续向后递增.</li></ol></li></ul><ol><li>添加自增主键（两个：创建表时，修改表时）</li></ol><p>  ​插入null进id</p><p>  插入1000在id</p><p>  ​再尝试插入null进id</p><ol start="2"><li><p>*取消自增主键（只取消自增）<em>类似改变字段属性</em></p><p>注意：看起来像是把主键删了其实只删了自增属性</p></li><li><p>获得刚刚插入的自增值（两个特点）</p></li></ol><p>  使用函数查询<code>last_insert_id()</code></p><p>  使用两个客户端查询查看值分别是多少；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">创建xuesheng表id int(自增主键) name<br>创建banji表banji_id int,xs_id int,name varchar(20)<br>select last_insert_id();<br>set names gbk; -- 通知服务器客户端字符集<br>use test;<br>-- 同时向班学生表和练习方式表插入数据<br>1insert into xuesheng(name) values(&#x27;张三&#x27;);<br>2insert into lianxi(xs_id,tel)  values(last_insert_id(),&#x27;234563462345&#x27;);-- 一般用于外键<br> <br>select * from xuesheng;<br>select * from lianxi; <br></code></pre></td></tr></table></figure></li></ul></blockquote><h3 id="外键约束-外键特点4个"><a href="#外键约束-外键特点4个" class="headerlink" title="外键约束(外键特点4个)"></a>外键约束(外键特点4个)</h3><blockquote><ul><li>特点<ol><li>引用主键的值</li><li>允许重复，也允许null值</li><li>自动会创建索引</li><li>*外键会降低表的访问效率,在大型互联网应用中,数据库表一般都不添加外键约束,<u>会用程序来保证数据的正确性</u></li></ol></li><li>建表时添加外键<ol><li>创建学生表；（两个）分别是班级和学生（id，name）</li><li>修改学生表，添加班级id外键引用班级的主键</li></ol></li><li>修改表示添加外键（格式同上）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建学生表<br>drop table if exists xuesheng;<br>create table xuesheng(<br>id int primary key auto_increment,<br>name varchar(20)<br>)engine=innodb charset=utf8<br>-- 创建班级表<br>drop table if exists banji;<br>create table banji(<br>id int,<br>name varchar(20)<br>)engine=innodb charset=utf8;<br>-- 修改学生表,添加banji_id外键,引用班级的主键<br>alter table banji add primary key(id);<br>alter table banji modify id int auto_increment;<br>alter table xuesheng add foreign key(banji_id) references banji(id);<br>-- 插入数据<br>insert into banji(name) values(&#x27;一班&#x27;),(&#x27;二班&#x27;),(&#x27;三班&#x27;);<br>insert into xuesheng(name,banji_id) values(&#x27;张三&#x27;,1) , (&#x27;李四&#x27;,3)<br>, (&#x27;王五&#x27;,3) , (&#x27;赵六&#x27;,1);<br>select * from banji;<br>select * from xuesheng;<br></code></pre></td></tr></table></figure><ul><li>查看外键约束</li><li>删除外键约束<ol><li>删除约束</li><li>删除索引（区分字段名和索引名字）</li><li>再为banji_id添加约束</li></ol></li></ul></blockquote><h3 id="唯一约束（2点）"><a href="#唯一约束（2点）" class="headerlink" title="唯一约束（2点）"></a>唯一约束（2点）</h3><blockquote><ul><li>特点<ol><li>保证字段中的值不重复,但允许重复的null值</li><li>*唯一约束会创建索引,如果取消唯一约束,通过删除索引来取消</li></ol></li><li>创建表时添加唯一约束（两个方法）</li><li>修改表时添加唯一约束(两个方法)<ol><li>在之前学生表的基础上添加把name设置为唯一约束</li><li>添加两次A班和b班；</li></ol></li><li>添加字段组合唯一约束</li><li>查看唯一约束</li><li>*删除唯一约束<ul><li>唯一约束需要通过删除它的索引来删除；</li></ul></li></ul></blockquote><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><blockquote><ul><li>添加非空约束<ol><li>创建表时添加</li><li>修改表时添加</li></ol></li><li>改变非空约束</li><li>查看非空约束</li><li>删除非空约束</li></ul></blockquote><h3 id="检查约束mysql没有实现"><a href="#检查约束mysql没有实现" class="headerlink" title="检查约束mysql没有实现"></a>检查约束<em>mysql没有实现</em></h3><p>​语法check()</p><ul><li><p>设置检查条件,判断存入字段中的值,是否符合要求</p><p>mysql支持检查约束的语法,但没有实现检查约束</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">对年龄范围进行检查: &gt;=7 并且 &lt;=60<br>对性别取值检查: =&#x27;男&#x27; 或者 =&#x27;女&#x27;<br>create table tb5(<br>    ...,<br>    age int,<br>    gender char(1),<br>    ...<br>    check(age&gt;=7 and age&lt;L=60),<br>    check(gender=&#x27;男&#x27; or gender=&#x27;女&#x27;)<br>);<br></code></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul><li><p>一对一关系</p><ol><li>在学生表的基础上建立联系方式表</li><li>设定xsid为主键和学生表的外键</li></ol></li><li><p>一对多关系</p><ol><li>学生与班级关系</li><li>班级多学生一</li></ol></li><li><p>多对多关系:通过多对多关系中间表体现</p><p>关系表中添加两个外键字段分别引用两张表的主键</p><ol><li>学生和课程表关系（建立课程表）</li><li>需要新建表</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 课程表和关系中间表<br>drop table if exists kecheng;<br>create table kecheng(<br>   id int primary key auto_increment,<br>   name varchar(20)<br>)engine=innodb  charset=utf8;<br> <br>drop table if exists xs_kc_link;<br>create table xs_kc_link(<br>   xs_id int not null,<br>   kc_id int not null,<br>   foreign key(xs_id)<br>      references xuesheng(id),<br>   foreign key(kc_id)<br>      references kecheng(id),<br>   unique key(xs_id, kc_id)<br>)engine=innodb  charset=utf8;<br> <br>insert into kecheng(name)<br>values(&#x27;语文&#x27;), (&#x27;数学&#x27;);<br> <br>insert into xs_kc_link<br>values(3,1), (3,2), (5,1), (5,2);<br> <br>select * from xs_kc_link;<br></code></pre></td></tr></table></figure><hr><h1 id="Day03"><a href="#Day03" class="headerlink" title="Day03"></a>Day03</h1><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><ul><li><p>结构化的查询语言,所有数据库都通过SQL来访问数据</p><p>SQL有标准语法规范,个数据库厂商都有自己的SQL扩展语法</p></li></ul><blockquote><ul><li>SQL分类:<ul><li>DDL(已学):数据定义语句,库、表管理</li><li>DML:数据操作语句,增删改查</li><li>DQL:数据查询语句,select</li></ul></li></ul></blockquote><p>##DML</p><p>###mysql</p><blockquote><ul><li>向所有字段插入值</li><li>向指定字段插入值</li><li>将查询的结果数据，全部插入表中</li><li>将查询的结果，创建成一张表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">--  新建学生备份表<br>create table xuesheng_bak(<br>   id int primary key,<br>   name varchar(20)<br>)engine=innodb charset=utf8;<br>-- 从xuesheng查询数据,插入bak表<br>-- 查询学生数据,把结果直接创建成表<br></code></pre></td></tr></table></figure><ul><li><p>插入特殊字符</p><ul><li>单引号用两个单引号转意、</li><li>*sql注入攻击:<code>select * from users where name=&#39;swfwe&#39; and pwd=&#39;1&#39; or &#39;1&#39;=&#39;1&#39;</code></li><li>\转意字符</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 在name字段插入I&#x27;am张三<br></code></pre></td></tr></table></figure><ul><li><p>修改数据</p><ul><li>修改特定行</li><li>特殊的更新方式</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 销量最低的5件商品，降价一半<br>-- 新添加的学生去二班<br></code></pre></td></tr></table></figure><ul><li><p>删除</p><p><code>delete from xxx;</code>删除全部数据</p><ul><li><p>特殊删除</p><p>​    <code>delete from xxx where xxx=xxx;</code>删除指定行</p></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 删除销量最低的五件商品<br>-- 删除最新来的三个学生<br></code></pre></td></tr></table></figure><ul><li><p>查询</p><ul><li>where子句</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br>=等值过滤<br>&lt;&gt; 不等过滤<br>&gt; &gt;= &lt; &lt;=比较大小<br>between ... and ...&gt;=小 and &lt;=大<br>in(20,15,38,30)取列表中指定的值<br>is null/is not nullnull值过滤<br>like<br>_  通配单个字符<br>%  通配任意多个字符<br>\_  转义成普通下划线字符<br>\%  转义成普通百分号字符<br>字符串的模糊查询<br> <br>not<br>not between ... and ...<br>not in(1,2,3,4)<br>is not null<br>not like<br>and并且<br>or或者<br></code></pre></td></tr></table></figure><ul><li>练习</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询在1995-1-1年之前入职<br>-- 查询公众(job_id)以SA开头的员工<br>-- 姓名中有en，且在80部门中的员工<br></code></pre></td></tr></table></figure><ul><li><p>distinct（能组合）</p><p><code>select distinck 字段 from xxx;</code></p><p><code>select distinck 字段1,字段2 from xxx;</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 所有部门id,去除null值<br>-- 所有主管id, manager_id,去除null值<br>-- 部门和主管组合不重复<br></code></pre></td></tr></table></figure><ul><li><p>order by字句</p><p><code>select  字段x  from xxx order by 字段X (desc) (limit by x)</code></p></li><li><p>字段别名（4个要点）</p></li></ul></blockquote><hr><p>#Day04</p><p>##函数</p><h4 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数####"></a>字符串处理函数####</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">char_length(&#x27;a中&#x27;) - 字符数<br>   length(&#x27;a中&#x27;) - 字节数<br>   concat(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;cde&#x27;,&#x27;fff&#x27;) - 字符串连接，其他数据库可用 || 连接字符串，&#x27;abc&#x27; || &#x27;def&#x27;<br>   concat_ws(&#x27;;&#x27;,&#x27;abc&#x27;,&#x27;def&#x27;,&#x27;ggg&#x27;) - 用分隔符连接字符串   <br>   instr(&#x27;abcdefgdef&#x27;,&#x27;def&#x27;) - 返回第一个子串的位置，从1开始，找不到返回0<br>   locate(&#x27;abc&#x27;, &#x27;---abc---abc---abc-&#x27;) - 返回第一个子串的位置，从1开始，找不到返回0<br>   locate(&#x27;abc&#x27;, &#x27;---abc---abc---abc-&#x27;,5) - 从指定位置向后找<br>   insert(&#x27;abcdefghijkl&#x27;,2, 11, &#x27;---&#x27;) - 用子串取代从2位置开始的11个字符<br>   lower(&#x27;AdFfLJf&#x27;) - 变为小写<br>   upper(&#x27;AdFfLJf&#x27;) - 变为大写<br>   left(&#x27;AdFfLJf&#x27;,3) - 返回最左边的三个字符<br>   right(&#x27;AdFfLJf&#x27;,3) - 返回最右边的三个字符<br>   lpad(&#x27;abc&#x27;, 8, &#x27;*&#x27;) - 左侧填充，指定长度比源字符串少，相当于left<br>   rpad(&#x27;abc&#x27;, 8, &#x27;*&#x27;) - 右侧填充，指定长度比源字符串少，相当于left<br>   trim(&#x27;  a  bc   &#x27;) - 去除两端空格<br>   substring(&#x27;abcdefghijklmn&#x27;, 3) - 从3位置开始的所有字符<br>   substring(&#x27;abcdefghijklmn&#x27;, 3, 6) - 从3位置开始的6个字符<br>   repeat(&#x27;abc&#x27;, 3) - 重复三遍abc<br>   REPLACE(&#x27;Hello MySql&#x27;,&#x27;My&#x27;,&#x27;Your&#x27;) - 子串替换<br>   REVERSE(&#x27;Hello&#x27;) - 翻转字符串<br>   SPACE(10) - 返回10个空格<br></code></pre></td></tr></table></figure><blockquote><ol><li>搜索‘a中’的字符数</li><li>搜索‘a中’的字节数</li><li>连接‘abc’def’ghi’三个字符</li><li><strong>用&#x2F;分割‘abc’def’ghi’三个字符</strong></li><li><strong>在abc abc abc字符串中定位bc</strong> </li><li>从第三列起在abc abc abc字符串中定位bc</li><li><strong>把abcdefghijk中的第三到第五列换成—</strong>；</li><li>AbCd换成全大写</li><li>AbCd换成全小写</li><li>左取abcd的两位</li><li>右取abcd的两位</li><li><strong>向abc左边填充*直到8位位置</strong> </li><li>向abc右边填充*直到8位位置</li><li>向abc左边填充*直到2位位置</li><li>向abc右边填充*直到2位位置</li><li>截取abcde从3以后的字符</li><li>截取abcde从3位以后的两个字符</li><li>重复三遍abc</li><li>替换abc abc abc 中的bc为-</li><li>翻转字符串hello</li><li>返回十个空格</li></ol><ul><li><h5 id="习题"><a href="#习题" class="headerlink" title="习题#####"></a>习题#####</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- first_name和last_name首字母相同<br>-- first_name和last_name长度相同<br>-- email不是用first_name首字母+last_name(有些人last_name有空格)<br>-- 连接姓名,空格居中显示<br></code></pre></td></tr></table></figure></blockquote><h4 id="数字处理函数"><a href="#数字处理函数" class="headerlink" title="数字处理函数####"></a>数字处理函数####</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ceil(3.14) - 天花板,向上取整<br>floor(3.94) - 地板,向下取整<br>format(391.536, 2) - 数字格式化为字符串，###,###.###，四舍五入，第二个参数为小数位数<br>round(673.4974) - 四舍五入<br>round(673.4974, 2) - 四舍五入到小数点后两位<br>round(673.4974, -2) - 四舍五入到百<br>TRUNCATE(234.31, 1) - 舍去至小数点后1位<br></code></pre></td></tr></table></figure><blockquote><ol><li>3.14和-3.14向上取值</li><li><strong>查询52342.6675保留小数两位的值和保留百位的值</strong>会四舍五入** </li><li><strong>舍去（52342.7785）的小数以后两位和百位的值</strong>不会四舍五入** </li><li>*<strong>格式化52342.6675</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1. select ceil(3.14);<br>2. select round(52342.6675,2);select round(52342.6675,-2);<br>3. select truncate(52342.6675,2);select truncate(52342.6675,-2);<br>4. select formate(52342.6675);<br></code></pre></td></tr></table></figure><ul><li><p><strong>习题</strong></p><ol><li><strong>涨工资10.41%，向上取整到十位</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ceil(salary/10*1.1041)*10 sel from employees;<br></code></pre></td></tr></table></figure></li></ul></blockquote><h4 id="日期处理函数"><a href="#日期处理函数" class="headerlink" title="日期处理函数####"></a>日期处理函数####</h4><blockquote><p>1.<strong>当前时间</strong><br>2.<strong>当前年月日</strong><br>3.<strong>当前time</strong><br>4.当前时间的年份<br>5.提取当前时间的date<br>6<strong>当前时间增加十年</strong><br>7.<strong>当前时间减去10年</strong><em><strong>两个方法</strong></em><br>8.<strong>今天到1993年5月12日的天数</strong><br>9.<strong>反过来</strong><br>10.<strong>查询当前时间，格式化</strong></p><ul><li><p><strong>习题</strong> </p><ol><li><strong>入职三十年的员工</strong>两个方法</li><li><strong>1997年上半年入职的人</strong></li><li>不论那一年，所有一月份入职的人</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1.lect hire_date from employees where datediff(now(),hire_date)&gt;30*365+7;<br>2.select hire_date,first_name from employees where extract(year from hire_date)=1997 and extract(month from hire_date)&lt;7;<br>3.select first_name,hire_date from employees where extract(month from hire_date)=1;<br></code></pre></td></tr></table></figure></li></ul></blockquote><h4 id="null值处理函数（两个）"><a href="#null值处理函数（两个）" class="headerlink" title="null值处理函数（两个）"></a>null值处理函数（两个）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ifnull(数据1,数据2) - 数据1是null返回数据2；不是null返回数据1<br>      coalesce(数据1,数据2,数据3,......) - 从左向右第一个不是null的数据<br></code></pre></td></tr></table></figure><blockquote><ul><li><p>习题</p><ol><li>求年薪提成比例</li><li>没有主管显示’老板’</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1.select salary*12*ifnull(1+commission,0),commission_pck from employees<br>2.select ifnull(manager_id,&#x27;老板&#x27;) from employees;<br></code></pre></td></tr></table></figure></li></ul></blockquote><h4 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数####"></a>加密函数####</h4><ul><li>md5()  md5加密,常用来对密码加密<br>  加密结果是32位16进制数字字符</li><li>sha()  比md5更安全的加密方式</li></ul><blockquote><ol><li>分别用两种加密方式加密123； </li><li>加密jtdb的tb_user一栏的用户密码保存</li></ol></blockquote><h4 id="分支（两个）"><a href="#分支（两个）" class="headerlink" title="*分支（两个）####"></a>*分支（两个）####</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">if(1, 2, 3) 判断条件1,成立执行2,否则执行3<br>-- 形式1 <br>case<br>    when 条件 then ...<br>    when 条件 then ...<br>    else<br>end<br>-- 形式2<br>case 数据<br>    when 值1 then ...<br>    when 值2 then ...<br>    else<br>end<br></code></pre></td></tr></table></figure><blockquote><ul><li><p>习题</p><ol><li>如果rand（）小于0.5，结果是1或者2</li><li>*<strong>工资大于10000，有钱；大于5000，小康；大于3000，温饱；否则，穷逼；按工资排序</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select first_name,<br>case<br>when salary&gt;10000 then &#x27;有钱&#x27;<br>when salary&gt;5000 then &#x27;小康&#x27;<br>when salary&gt;3000 then &#x27;温饱&#x27;<br>else &#x27;穷逼&#x27;<br>end &#x27;身份&#x27;<br>from employees order by salary desc;<br></code></pre></td></tr></table></figure></li></ul></blockquote><h4 id="多行函数"><a href="#多行函数" class="headerlink" title="多行函数"></a>多行函数</h4><ul><li><p>多行函数不能和其它字段一起查询(select avg(salary), <del>first_name</del> from …)</p><p>虽然这里的mysql能输出first_name但无意义</p></li><li><p>多个多行函数可以一起查询select count(id),max(id),min(id),avg(id),sum(id)</p></li><li><p>多行函数会忽略null值</p></li><li><p>count(*) 求行数<br>  <em>当数据量非常大时(千万),count(</em>)效率很低</p></li></ul><blockquote><ol><li>计算行数</li><li>求和</li><li>求平均值</li><li>求最大值</li><li>求最小值</li></ol><ul><li>分组<ol><li>按指定的字段分组,每一组数据分别求多行函数</li><li>分组后,分组字段可以和多行函数一起查询</li><li>只有求多行函数时,才做分组查询</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select -- 多行函数, 分组字段<br>from ...<br>where ...<br>group by -- 分组字段<br>group by a,b -- 以字段的组合进行分组<br></code></pre></td></tr></table></figure><ul><li>分组过滤</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 求只有1个人的部门,先分组求人数,在按人数过滤<br>having子句<br>select ...count(*)<br>where ...<br>group by  a<br>having count(*)=1<br></code></pre></td></tr></table></figure><ul><li>习题<ol><li>对提成计数</li><li>有多少个部门，有多少个主管</li><li>员工人数<strong>效率低</strong> </li><li>1997年入职的人数</li><li>50部门的人数</li><li><strong>最后一个入职的人时间</strong></li><li>122号员工是个主管，他的手下多少人</li><li>每个部门有多少人，并按人数排序</li><li>每种工作的平均工资</li><li>每年入职的人数</li><li><strong>每个部门，每个主管的手下人数</strong></li><li>只有一个人的部门，过滤null值</li><li>只有一个人入职的年份</li><li>只有一个手下的主管id，过滤null值</li><li>平均工资大于10000的工作</li></ol></li></ul></blockquote><h4 id="mysql分页查询"><a href="#mysql分页查询" class="headerlink" title="mysql分页查询"></a>mysql分页查询</h4><blockquote><ol><li>前十条</li><li>第一到第十行</li><li>第十一到第二十行</li><li>第page页数据</li></ol></blockquote><hr><h1 id="Day05"><a href="#Day05" class="headerlink" title="Day05"></a>Day05</h1><h1 id="mysql-day05"><a href="#mysql-day05" class="headerlink" title="mysql day05##"></a>mysql day05##</h1><h2 id="select查询"><a href="#select查询" class="headerlink" title="select查询###"></a>select查询###</h2><ul><li>结构<code>select distinct xxx from xxx where xxx?xxx group by xxx having xxx order by xxx</code></li></ul><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询###"></a>子查询###</h2><ul><li><p>条件子查询</p></li><li><p>from子查询</p></li><li><p>查询字段列表中的子查询</p><h3 id="条件子查询"><a href="#条件子查询" class="headerlink" title="条件子查询###"></a>条件子查询###</h3></li><li><p>查询结果,作为另一个查询的过滤条件</p><ol><li>单值子查询:&#x3D; ,&lt;&gt;,&lt;</li><li>多值子查询:in,all 大于最大值,any 大于最小值</li><li>多列子查询:(a,b) in 子查询</li></ol></li></ul><p>1.拿最低工资的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">+ select min(salary),first_name from employees ; <br>+ select employee_id,first_name,salary from employees where salary=(select   min(salary) from employees) ;<br></code></pre></td></tr></table></figure><p>2.工资低于平均工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">+ select * from employees where salary&lt;(select avg(salary) from employees);<br></code></pre></td></tr></table></figure><p>3.只有1个人的部门中的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">+ select * from employees group by department_id having count(*)=1 and department_id is not null;<br></code></pre></td></tr></table></figure><p>4.*<strong>每个部门拿最高工资的人信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">+ select * from employees where (salary,department_id) in(select max(salary),department_id from employees group by department_id);<br></code></pre></td></tr></table></figure><hr><h3 id="from子查询"><a href="#from子查询" class="headerlink" title="from子查询###"></a>from子查询###</h3><ul><li>select … from (select…) t</li><li>mysql中,必须起别名</li></ul><ol start="5"><li>*<strong>手下人数最多的人，查询其个人信息</strong>；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1.select count(*) from employees group by manager_id;-- 每个经理的人数<br>2.select max(d) from(select count(*) d from employees group by manager_id)p;-- 人数最多的经理<br>3.select manager_id from employees group by manager_id having count(*)=(select max(d) from(select count(*) d from employees group by manager_id)p);<br>4.select * from employees where employee_id=(select manager_id from employees group by manager_id having count(*)=(select max(d) from(select count(*) d from employees group by manager_id)p));<br></code></pre></td></tr></table></figure><hr><h3 id="字段列表中的子查询"><a href="#字段列表中的子查询" class="headerlink" title="字段列表中的子查询"></a>字段列表中的子查询</h3><ol start="6"><li>员工信息后面添加平均工资值</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1.select avg(salary) from employees<br>2.select employee_id,first_name,salary,()avg from employees;<br>+ select employee_id,first_name,salary,(select avg(salary) from employees)avg from employees;<br></code></pre></td></tr></table></figure><hr><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><ol start="7"><li>部门表；</li><li>员工，显示所在的部门名；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select a.first,a.department_id,b.department_name,a.salary from employees a,departments b where a.department_id=b.department_id;<br></code></pre></td></tr></table></figure><ol start="9"><li>部门，显示部门经理</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select d.department_id,d.department_name,e.employee_id,e.first_name from departments d,employees e where d.manager_id=e.employee_id;<br></code></pre></td></tr></table></figure><ol start="10"><li>部门所在城市</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.first_name,d.department_name,l.city from employees e,departments d,locations l where d.manager_id=e.employee_id and d.location_id=l.location_id;<br></code></pre></td></tr></table></figure><ol start="11"><li>员工的主管名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e1.first_name employees,e2.first_name manager from employees e1,employees e2 where e1.manager_id=e2.employee_id order by manager desc;<br></code></pre></td></tr></table></figure><h4 id="标准语法"><a href="#标准语法" class="headerlink" title="标准语法####"></a>标准语法####</h4><ul><li><p>前面的表连接语法,是非标准语法,但多数数据库都支持这种语法,在做外连接查询时,不同数据库都有各自的扩展语法</p><p>标准语法,解决了外连接语法不兼容问题</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ...<br>from a inner join b on 条件<br>       inner join c on 条件<br>       inner join d on 条件<br>inner 可以省略<br>左外连接、右外连接<br>左外连接: 左侧表条件以外的数据也查询出来<br>右外连接: 右侧表条件以外的数据也查询出来<br>select ...<br>from a left outer join b on 条件<br>outer 可以省略<br>全外连接: full outer join<br></code></pre></td></tr></table></figure><p>1.107个员工全部显示部门名字，没有部门显示null</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.employee_id,e.first_name,d.department_id from employees e right join departments d on e.department_id=d.department_id;<br></code></pre></td></tr></table></figure><p>2.<strong>查员工，显示部门名字，显示城市，显示部门经理，显示员工的主管</strong>；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br></code></pre></td></tr></table></figure><p>15.按城市分组，计算每个城市的员工数量，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select city,count(*) from employees e1 join departments d1 on e1.department_id=d1.department_id join locations l on d1.location_id=l.location_id group by l.city;<br></code></pre></td></tr></table></figure><p>16.seattle时所有员工的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from employees e1 join departments d1 on e1.department_id=d1.department_id join locations l on d1.location_id=l.location_id and l.city=&#x27;Seattle&#x27;; <br></code></pre></td></tr></table></figure><p>17.在Seattle拿最低工资的人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e1.first_name from employees e1 <br>join departments d1 on e1.department_id=d1.department_id join locations l on d1.location_id=l.location_id <br>where <br>l.city=&#x27;Seattle&#x27; <br>and e1.salary= <br>(select min(salary) from employees e1 <br>         join departments d1 on e1.department_id=d1.department_id <br>         join locations l on d1.location_id=l.location_id and l.city=&#x27;Seattle&#x27;); <br></code></pre></td></tr></table></figure><h2 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h2><ul><li><p>事务由多个数据操作(增删改查)组合</p></li><li><p>事务是数据操作的最小单元</p></li><li><p>事务中所有操作全部成功,事务整体成功</p></li><li><p>当事务中一项操作失败,事务整体失败</p><ul><li><p>例如,游戏中 A 账户向 B 账户转账</p><ol><li><p>A 更新,减掉金额</p></li><li><p>B 更新,加金额失败(断电),转账事务要整体失败,回退到以前的状态</p></li></ol></li><li><p>事务特性:ACID</p><ul><li>A - 原子性 Atomic</li><li>C - 一致性 Consistency<ol><li>转账前 a+b &#x3D; 100</li><li>转帐后 a+b &#x3D; 100</li></ol></li><li>I - 隔离性 Isolation<ol><li>一个事物进行中时</li><li>另一事物不能操作数据</li></ol></li><li>D - 持久性 Durancy<ol><li>提交事务之后，</li><li>数据持久生效</li></ol></li></ul></li></ul></li></ul><h3 id="开启事物"><a href="#开启事物" class="headerlink" title="开启事物"></a>开启事物</h3><ol><li>begin</li><li>star transaction</li><li>set qutocommit&#x3D;0设置关闭自动提交</li></ol><h3 id="提交事物"><a href="#提交事物" class="headerlink" title="提交事物"></a>提交事物</h3><ul><li>commit</li></ul><h3 id="滚回事物"><a href="#滚回事物" class="headerlink" title="滚回事物"></a>滚回事物</h3><ul><li>rollbac</li></ul><h3 id="事物隔离"><a href="#事物隔离" class="headerlink" title="事物隔离"></a>事物隔离</h3><ol><li>事务完全隔离,一个事务完成,另一个事务才能执行,效率低</li><li>事务不隔离,会有数据访问冲突,数据不安全</li><li>数据库当中,可以设置事务的隔离性,来兼顾安全和性能</li></ol><ul><li>脏读(一般不允许发生)：一个会话未提交的数据,被另一个会话读取</li><li>不可重复读：同一行数据,再次执行相同查询,与第一次查询结果不一致</li><li>幻读<ol><li>其它会话新插入并提交的数据,查询不到</li><li>其它会话删除并提交的数据,仍然能查询到</li></ol></li></ul><h3 id="事物隔离级别"><a href="#事物隔离级别" class="headerlink" title="事物隔离级别"></a>事物隔离级别</h3><ol><li>set tx_isolation&#x3D;’READ-UNCOMMITTED’;脏读,不可重复读,幻读</li><li>set tx_isolation&#x3D;’read-committed’;不可重复读,幻读</li><li>set tx_isolation&#x3D;’repeatable-read’;幻读</li><li>set tx_isolation&#x3D;’serializable’;</li></ol><hr><h1 id="mysql-day06"><a href="#mysql-day06" class="headerlink" title="mysql day06"></a>mysql day06</h1><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li>将查询语句保存到数据库，命名名字，以便于以后通过调用名字来调用视图<ol><li>可简化查询</li><li>安全可靠（不用向用户暴露源码和表格）</li></ol></li><li><strong>创建视图</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create or replace view v1 <br>as select<br>   e1.employee_id,e1.first_name,<br>   d.department_name,<br>   l.city,<br>   e2.first_name dept_mgr,<br>   e3.first_name mgr_name<br>from<br>   employees e1<br>join departments d<br>on e1.department_id=d.department_id<br>      join locations l<br>on d.location_id=l.location_id<br>      join employees e2<br>on d.manager_id=e2.employee_id<br>      join employees e3<br>on e1.manager_id=e3.employee_id;<br>-- 查看<br>select * from vi;<br></code></pre></td></tr></table></figure><ul><li><strong>查看视图</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show tables;-- 格式都同table<br>desc vi;<br>show create table vi\G;<br></code></pre></td></tr></table></figure><ul><li><strong>删除视图</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop view v1;<br></code></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li><p>加速查询</p><ol><li>索引为字段中的数据，会自动生成一份索引数据，查询时可通过索引快速定位数据</li><li>mysql 的innodb和myisam数据表引擎,生成索引模式使用b-tree(平衡红黑树)数据结构</li></ol></li><li><p><strong>创建索引</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1.create index index_name on name(c1,c2) -- 可以输入两个参数做成组合索引<br>-- 用employee的姓名组合测试<br>create index index_name on employees(first_name,last_name);<br></code></pre></td></tr></table></figure><ul><li><strong>正确用索引查询</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1.where c1=&#x27;abc&#x27;<br>2.where c1=&#x27;abc&#x27; and c2=&#x27;sdf&#x27;<br>3.where c1=&#x27;ab%&#x27;<br></code></pre></td></tr></table></figure><p><strong>不可行查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1.where c1=&#x27;%c&#x27;-- 无论是否有索引都会遍历所有内容<br>2.跳过c1,where c2=&#x27;sdf&#x27;-- 同理<br></code></pre></td></tr></table></figure><ul><li><strong>删除索引</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ex.alter table employees drop index index_name<br></code></pre></td></tr></table></figure><ul><li>查询本语句是否用索引来查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">explain select * from employees where first_name=&#x27;a&#x27; and last_name=&#x27;b&#x27;<br></code></pre></td></tr></table></figure><h2 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h2><p>​在操作系统命令行执行</p><pre><code class="hljs">   1.  mysqldump 命令备份数据   2.  mysql 命令恢复数据</code></pre><ul><li><p>备份</p><ol><li>备份hr库</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysqldump -uroot -p --default-character-set=表中存的编码 想导出的数据库&gt;路径+文件名（有后缀）<br></code></pre></td></tr></table></figure><ul><li>恢复</li></ul><ol><li>新建hr库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1.create database hr2 charset=utf8;<br></code></pre></td></tr></table></figure><ol start="2"><li>恢复数据</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -uroot -p --default-character-set=utf8 hr2&lt;d:\hhh.sql-- 需要登录创建hr2<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="自定义会话变量"><a href="#自定义会话变量" class="headerlink" title="自定义会话变量"></a>自定义会话变量</h3><ol><li>存在于本次窗口中</li><li>命名需要用@</li><li>变量赋值时用set</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @v1=1234;<br>select @v1;<br></code></pre></td></tr></table></figure><h3 id="系统的环境变量"><a href="#系统的环境变量" class="headerlink" title="系统的环境变量"></a>系统的环境变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables;-- 所有变量<br></code></pre></td></tr></table></figure><h3 id="代码块中的局部变量"><a href="#代码块中的局部变量" class="headerlink" title="代码块中的局部变量"></a>代码块中的局部变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">begin -- 相当于java的括号<br>declare i int -- 声明变量，设定类型<br>declare i int default i 0 -- 初始化变量为0<br>end<br></code></pre></td></tr></table></figure><h2 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h2><ul><li>存储在数据库中的一段代码</li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li>需要自定义结束符号，因为语句后一般用;号结束 ，会引起冲突</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询当前时间的一段代码<br>delimiter // -- 设定结束符号<br>drop procedure if exists p1;//<br>create procedure p1() -- 参数可以加入<br>begin<br>select now();<br>end;<br>//<br></code></pre></td></tr></table></figure><ul><li><p>参数</p><ol><li>in 输入参数</li><li>out 输出参数，会自动输出</li><li>inout 输入输出都可以</li></ol><p>call(a,@v1):@v1用来存储输出参数的内容以便查询</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 输入a，查询a的平方的值<br>drop procedure if exists p2;//<br>create procedure p2(in a int,out b int)<br>begin<br>set b=a*a;<br>end;<br>//<br>call p2(3,@v1);// -- 调用存储过程<br>select @v1;//<br></code></pre></td></tr></table></figure><h3 id="查看存储过程"><a href="#查看存储过程" class="headerlink" title="查看存储过程"></a>查看存储过程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 所有存储过程<br>show procedure status\G<br>-- 指定库中的存储过程<br>show procedure status where db=&#x27;test&#x27;\G<br>-- 存储过程的构造代码<br>show create procedure p2/G<br></code></pre></td></tr></table></figure><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><ul><li>类似table</li></ul><h3 id="分支判断"><a href="#分支判断" class="headerlink" title="分支判断"></a>分支判断</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1.if 条件 then<br>...<br>  end if;<br>2.if 条件 then<br>...<br>  else<br>  ...<br>  end if;<br>3.case 条件<br>when 值1 then ...；<br>when 值2 then ...；<br>else...;<br>  end case;<br>4.case 数据<br>when 条件1 then ...；<br>when 条件2 then ...；<br>else...;<br>  end case;<br></code></pre></td></tr></table></figure><ul><li>分支测试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 输入1234，能调用出同样的值<br>drop procedure if exists p3;<br>create procedure p3(in a int)<br>begin<br>if a=1 then<br>select 1;<br>end if;<br>case<br>when a=1 then select 1;<br>when a=2 then select 2;<br>when a=3 then select 3;<br>else select 4;<br>end case;<br>end;<br>//<br>call p3();//<br></code></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1.while 条件 do<br>...;<br>  end while;<br>2.lp:loop<br>...;<br>if 条件 then<br>leave lp;<br>end if;<br>  end loop;<br>3.repeat<br>...;<br>  until 条件 end repeat;<br></code></pre></td></tr></table></figure><ul><li>*<strong>循环测试</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建一个测试表字段为c类型为int<br>drop table if exists t;//<br>create table t(<br>c int<br>);//<br>-- 创建存储过程，循环向表中插入n行数据，插入循环次数i<br>drop procedure if exists p4//<br>create procedure p4(in n int)<br>begin<br>declare i int default 0;<br>while i&lt;n do<br>insert into t values(i);<br>set i=i+1;<br>end while;<br>set i=0;<br>lp:loop<br>insert into t values(i);<br>set i=i+1;<br>if i&gt;=n then<br>leave lp;<br>end if;<br>end loop;<br>set i=0;<br>repeat<br>insert into t values(i);<br>set i=i+1;<br>until i&gt;=n end repeat;<br>end;<br>//<br>call p4(5)//<br>select * from t;//<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>与存储过程不同函数有返回值</li></ul><h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 输入一个数，输出他的平方<br>create function fn(a int) returns varchar(255)<br>begin<br>declare r int;<br>set r=a*a;<br>return r;<br>end;<br></code></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select fn(3);<br>-- 把所有员工的工资平方<br>select employee_id,fn1(department_id) from employees;-- 函数与表之间的连用<br></code></pre></td></tr></table></figure><p>###查看函数</p><ul><li>同存储过程一样（三个）</li></ul><h3 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop function if exists fn;//<br></code></pre></td></tr></table></figure><h3 id="函数测试"><a href="#函数测试" class="headerlink" title="函数测试"></a>函数测试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- a的b次方<br>drop function if exists fn1//<br>create function fn1(a int,b int) returns varchar(255)<br>begin<br>declare c int default a;<br>declare i int default 0;<br>while i&lt;b-1 do<br>set c=c*a;<br>set i=i+1;<br>end while;<br>return c;<br>end;<br>//<br>select fn1(3,3);//<br></code></pre></td></tr></table></figure><ul><li><p>测试  随机产生[a, b)长度的字符串</p><ol><li>[a,b)区间取值&#x3D;&#x3D;a+ceil(rand()*b-a)</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop function if exists fn2//<br>create function fn2(a int,b int) returns varchar(255)<br>begin<br>declare char_num int;<br>declare contant_char varchar(1000) default&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ的一是在不了有和人这中大为上个国我以要他时来用们生到作地于出就分对成会可主发年动同工也能下过子说产种面而方后多定行学法所民得经十三之进着等部度家电力里如水化高自二理起小物现实加量都两体制机当使点从业本去把性好应开它合还因由其些然前外天政四日那社义事平形相全表间样与关各重新线内数正心反你明看原又么利比或但质气第向道命此变条只没结解问意建月公无系军很情者最立代想已通并提直题党程展五果料象员革位入常文总次品式活设及管特件长求老头基资边流路级少图山统接知较将组见计别她手角期根论运农指几九区强放决西被干做必战先回则任取据处队南给色光门即保治北造百规热领七海口东导器压志世金增争济阶油思术极交受联什认六共权收证改清己美再采转更单风切打白教速花带安场身车例真务具万每目至达走积示议声报斗完类八离华名确才科张信马节话米整空元况今集温传土许步群广石记需段研界拉林律叫且究观越织装影算低持音众书布复容儿须际商非验连断深难近矿千周委素技备半办青省列习响约支般史感劳便团往酸历市克何除消构府称太准精值号率族维划选标写存候毛亲快效斯院查江型眼王按格养易置派层片始却专状育厂京识适属圆包火住调满县局照参红细引听该铁价严龙飞&#x27;;<br>declare choose int;<br>declare get_char varchar(255);<br>declare return_char varchar(1000) default&#x27;&#x27;;<br>declare i int default 0;<br>set char_num=a+floor(rand()*(b-a));<br>while i&lt;char_num do<br>set choose=ceil(rand()*char_length(contant_char));<br>set get_char=substring(contant_char,choose-1,1);<br>set return_char=concat(return_char,get_char);<br>set i=i+1;<br>end while;<br>return return_char;<br>end;<br>//<br>select fn2(3,6);//<br>set char_num=a+floor(rand()*(b-a));<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建一张内存表，大量暂时插入内存表中<br>-- 再将内存表数据，一次导入磁盘表<br>-- 内存表（字段为c）<br>create table tm(<br>c varchar(10)<br>)engine=memory charset=utf8;<br>-- 磁盘表（字段为id的主键和c）<br>create table tb(<br>id bigint primary key auto_increment,<br>d varchar(10)<br>)engine=innodb charset=utf8;<br>-- 批量产生数据的存储过程<br>drop procedure if exists gen_data;<br>create procedure gen_data(in n int)<br>begin<br>-- 产生字符串并向表内插入数据<br>declare i int default 0;<br>repeat<br>set i=i+1;<br>insert into tm(c) values(fn2(3,6));<br>until i&gt;=n end repeat;<br>insert into tb(d) select c from tm;<br>delete from tm;<br>end;<br>//<br>call gen_data();<br><br></code></pre></td></tr></table></figure><ul><li>测试大量数据有索引和没有索引的查询</li><li>有索引会更加效率</li></ul><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><ul><li><p>插入，修改，删除时，可以自动触发的一段代码</p></li><li><p>可以在操作之前或者之后触发</p></li><li><p>一共有六种触发器</p><ol><li>before insert</li><li>before update</li><li>before delete</li><li>after insert</li><li>after update</li><li>after delete</li></ol><ul><li>两个隐含对象<ul><li>new - 新数据</li><li>oud - 旧数据</li><li>insert<ul><li>new 插入新数据</li><li>old 没有</li></ul></li><li>update<ul><li>new 修改之后的新数据</li><li>old 修改之前的旧数据</li></ul></li><li>delete<ul><li>new 没有</li><li>old 被删除的旧数据</li></ul></li><li>访问新的数据行或旧的数据行<ul><li>new.employee_id;</li><li>old.first_name;</li></ul></li></ul></li></ul></li></ul><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器*"></a>创建触发器*</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 新建tb1表(主键id，字段c，更新时间，创建时间)<br>drop table if exists tb1;//<br>create table tb1(<br>id int primary key auto_increment,<br>c varchar(255),<br>update_time datetime,<br>create_time datetime<br>)engine=innodb charset=utf8;//<br>-- 新建触发器,插入数据时<br>-- 自动为created和updated填入当前时间<br>drop trigger if exists tb1_before_insert//<br>create trigger tb1_before_insert before insert on tb1 for each row<br>begin<br>set new.update_time=now();<br>    set new.create_time=now();<br>end//<br>insert into tb1(c) values(&#x27;a&#x27;);<br>//<br>select * from tb1;//<br></code></pre></td></tr></table></figure><h3 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h3><ul><li>需要去专门的数据库查看触发器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use information_schema//<br>select * from trigger\G<br>-- 删除触发器<br>drop trigger 触发器名<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这是一个测试模板</title>
    <link href="/2013/12/24/AAA_%E6%A8%A1%E6%9D%BF/"/>
    <url>/2013/12/24/AAA_%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>just Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eureka-客户端与服务端</title>
    <link href="/2013/12/24/Eureka-%E5%88%86%E6%9E%90/"/>
    <url>/2013/12/24/Eureka-%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="Eureka工作流程"><a href="#Eureka工作流程" class="headerlink" title="Eureka工作流程"></a>Eureka工作流程</h2><p>1、Eureka Server 启动成功，等待服务端注册。在启动过程中如果配置了集群，集群之间定时通过 Replicate 同步注册表，每个 Eureka Server 都存在独立完整的服务注册表信息</p><p>2、Eureka Client 启动时根据配置的 Eureka Server 地址去注册中心注册服务</p><p>3、Eureka Client 会每 30s 向 Eureka Server 发送一次心跳请求，证明客户端服务正常</p><p>4、当 Eureka Server 90s 内没有收到 Eureka Client 的心跳，注册中心则认为该节点失效，会注销该实例</p><p>5、单位时间内 Eureka Server 统计到有大量的 Eureka Client 没有上送心跳，则认为可能为网络异常，进入自我保护机制，不再剔除没有上送心跳的客户端</p><p>6、当 Eureka Client 心跳请求恢复正常之后，Eureka Server 自动退出自我保护模式</p><p>7、Eureka Client 定时全量或者增量从注册中心获取服务注册表，并且将获取到的信息缓存到本地</p><p>8、服务调用时，Eureka Client 会先从本地缓存找寻调取的服务。如果获取不到，先从注册中心刷新注册表，再同步到本地缓存</p><p>9、Eureka Client 获取到目标服务器信息，发起服务调用</p><p>10、Eureka Client 程序关闭时向 Eureka Server 发送取消请求，Eureka Server 将实例从注册表中删除</p>]]></content>
    
    
    <categories>
      
      <category>springBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OGNL类库</title>
    <link href="/2013/12/24/Ognl%E7%B1%BB%E5%BA%93/"/>
    <url>/2013/12/24/Ognl%E7%B1%BB%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="OGNL概述"><a href="#OGNL概述" class="headerlink" title="OGNL概述"></a>OGNL概述</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>OGNL是Object Graphic Navigation Language(对象图导航语言)的缩写，他是一个开源项目。Struts框架使用OGNL作为默认的表达式语言。</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>Ognl有三个核心类，Ognl,OgnlContext,OgnlRuntime<ul><li>Ognl:Ognl的核心操作类，封装多种函数。解析表达式，生成上下文，以及提取表达式中的内容等</li><li>OgnlContext:是Ognl的上下文环境，本质是一个Map，存储需要被表达式解析提取的数据。</li><li>OgnlRuntime:可理解为Ognl的配置类，提供多种配置和接口，实现Ognl的自定义特性</li></ul></li><li>此外OgnlContext能设置根(Root)元素，当设置根元素时，取值不需要添加#，mybatis框架中#{}表达式中的Ognl表达式正是用到了根元素</li></ul><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="Ognl表达式取值"><a href="#Ognl表达式取值" class="headerlink" title="Ognl表达式取值"></a>Ognl表达式取值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOGNL</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> OgnlException &#123;<br><span class="hljs-comment">//定义测试类，这是个实体类，里面有id，name属性</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    student.setName(<span class="hljs-string">&quot;ypjiao&quot;</span>);<br>    student.setId(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//初始ognl上下文</span><br>    <span class="hljs-type">OgnlContext</span> <span class="hljs-variable">ognlContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OgnlContext</span>();<br>    <span class="hljs-comment">//存入实体</span><br>    ognlContext.put(<span class="hljs-string">&quot;student&quot;</span>,student);<br>    <span class="hljs-comment">//该方法的第一个参数为表达式,第二个参数为上下文，第三个参数可从上下文中获取root元素，此例中root未设置，为空</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Ognl.getValue(<span class="hljs-string">&quot;#student.name&quot;</span>, ognlContext, ognlContext.getRoot());<br>    out.println(value);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> Ognl.parseExpression(<span class="hljs-string">&quot;#student.id&quot;</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> Ognl.getValue(expression, ognlContext, ognlContext.getRoot());<br>    out.println(value1);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Ognl表达式获取Root元素"><a href="#Ognl表达式获取Root元素" class="headerlink" title="Ognl表达式获取Root元素"></a>Ognl表达式获取Root元素</h2><ul><li>root元素中不需要传#</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>student.setName(<span class="hljs-string">&quot;ypjiao&quot;</span>);<br><span class="hljs-type">OgnlContext</span> <span class="hljs-variable">ognlContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OgnlContext</span>();<br><span class="hljs-comment">//设置根元素（根元素不同于ognlContext中的Map集合</span><br>ognlContext.setRoot(student);<br><span class="hljs-comment">//取根元素不需要#，且表达式中无需包含根元素</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Ognl.getValue(<span class="hljs-string">&quot;name&quot;</span>, ognlContext, ognlContext.getRoot());<br>out.println(value);<br></code></pre></td></tr></table></figure><h2 id="Ognl表达式创建数组和对象"><a href="#Ognl表达式创建数组和对象" class="headerlink" title="Ognl表达式创建数组和对象"></a>Ognl表达式创建数组和对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OgnlContext</span> <span class="hljs-variable">ognlContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OgnlContext</span>();<br><span class="hljs-type">Object</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> Ognl.parseExpression(<span class="hljs-string">&quot;&#123;&#x27;aaa&#x27;,&#x27;bbb&#x27;,&#x27;ccc&#x27;&#125;&quot;</span>);<br><span class="hljs-comment">//返回的object对象为一个数组</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Ognl.getValue(expression, ognlContext, ognlContext.getRoot());<br>out.println(<span class="hljs-string">&quot;array=&quot;</span>+value);<br><br><br></code></pre></td></tr></table></figure><h2 id="Ognl调用静态方法"><a href="#Ognl调用静态方法" class="headerlink" title="Ognl调用静态方法"></a>Ognl调用静态方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OgnlContext</span> <span class="hljs-variable">ognlContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OgnlContext</span>();<br><span class="hljs-type">Object</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> Ognl.parseExpression(<span class="hljs-string">&quot;@Math@random()&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Ognl.getValue(expression, ognlContext, ognlContext.getRoot());<br>out.println(<span class="hljs-string">&quot;random=&quot;</span>+value.toString());<br></code></pre></td></tr></table></figure><h2 id="Ognl调用方法"><a href="#Ognl调用方法" class="headerlink" title="Ognl调用方法"></a>Ognl调用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>student.setName(<span class="hljs-string">&quot;Andrew&quot;</span>);<br><span class="hljs-type">OgnlContext</span> <span class="hljs-variable">ognlContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OgnlContext</span>();<br>ognlContext.put(<span class="hljs-string">&quot;student_Andrew&quot;</span>,student);<br><span class="hljs-type">Object</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> Ognl.parseExpression(<span class="hljs-string">&quot;#student_Andrew.getName()&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Ognl.getValue(expression, ognlContext, ognlContext.getRoot());<br>out.println(<span class="hljs-string">&quot;name=&quot;</span>+value.toString());<br></code></pre></td></tr></table></figure><h1 id="其它特性"><a href="#其它特性" class="headerlink" title="其它特性"></a>其它特性</h1><h2 id="Property访问器"><a href="#Property访问器" class="headerlink" title="Property访问器"></a>Property访问器</h2><p>我们可以注册自定义<strong>解析器</strong>以及<strong>解析对象</strong>，用于解析特殊的数据或达到解析自定义。当注册完成后，Ognl在解析数据时当发现有注册过的对象类型，则会调用专门的解析器的get方法来读取数据；</p><p>我们需要分别实现<strong>解析器</strong>和<strong>解析对象</strong></p><h3 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h3><ul><li>解析器需要实现PropertyAccessor接口</li><li>实现接口中的方法来达到自定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//本例中会从ypMap集合中获取一个key为test_ypjiao的对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">YpAccessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PropertyAccessor</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//参数1是OgnlContext对象，参数2是解析对象，参数3是分割后的ognl表达式（ognl表达式会被.分割）</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProperty</span><span class="hljs-params">(Map map, Object target, Object o1)</span> <span class="hljs-keyword">throws</span> OgnlException &#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">ypMap</span> <span class="hljs-operator">=</span> (Map)target;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parameterObject</span> <span class="hljs-operator">=</span> ypMap.get(<span class="hljs-string">&quot;test_ypjiao&quot;</span>);<br>        <span class="hljs-keyword">if</span> (parameterObject <span class="hljs-keyword">instanceof</span> Map) &#123;<br>            <span class="hljs-keyword">return</span> ((Map)parameterObject).get(o1);<br>        &#125;<br>        <span class="hljs-keyword">return</span> parameterObject;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperty</span><span class="hljs-params">(Map map, Object target, Object o1, Object o2)</span> <span class="hljs-keyword">throws</span> OgnlException &#123;<br>        Map&lt;String,Object&gt; ypMap = (Map&lt;String,Object&gt;)target;<br>        ypMap.put((String)o1,o2);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSourceAccessor</span><span class="hljs-params">(OgnlContext ognlContext, Object o, Object o1)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSourceSetter</span><span class="hljs-params">(OgnlContext ognlContext, Object o, Object o1)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解析对象"><a href="#解析对象" class="headerlink" title="解析对象"></a>解析对象</h3><p>解析类型一般是一个集合，完全自定义，他们最终会作为参数传递给解析器的get或set方法以便调用；</p><p>我们可以通过第二个参数获取到解析类型对象，本例中解析对象是一个继承自HashMap的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">YpMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例调用"><a href="#案例调用" class="headerlink" title="案例调用"></a>案例调用</h3><ul><li>需要新的解析对象时，都应该注册</li><li>本例中会将实体对象Student存入自定义集合YpMap中，且key为一个写死的固定值，不会从表达式中获取和传输这个固定值，目的是为了让自定义的<strong>解析器</strong>通过写死的key获取到我们需要的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOGNLArray</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> OgnlException &#123;<br>    OgnlRuntime.setPropertyAccessor(YpMap.class,<span class="hljs-keyword">new</span> <span class="hljs-title class_">YpAccessor</span>());<br><br>    <span class="hljs-type">YpMap</span> <span class="hljs-variable">ypMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YpMap</span>();<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    student.setName(<span class="hljs-string">&quot;ypjiao&quot;</span>);<br>    student.setId(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//写死key</span><br>    ypMap.put(<span class="hljs-string">&quot;test_ypjiao&quot;</span>, student);<br>    <span class="hljs-comment">//我们还可以通过Ognl来创建上下文context，且还能设置个性化配置，本利我们设置Property访问器</span><br>    <span class="hljs-comment">//该方法的第一个参数是我们的集合，它会把他设为root</span><br>    <span class="hljs-type">Map</span> <span class="hljs-variable">ognlContext</span> <span class="hljs-operator">=</span> Ognl.createDefaultContext(ypMap, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultClassResolver</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultTypeConverter</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMemberAccess</span>(<span class="hljs-literal">true</span>));<br>    <span class="hljs-comment">//理论上从student.name是无法解析出来的，因为student对象是存储在ypMap(root)集合中的，它需要通过专有的key来获取出student；但本例中我们实现了类型解析器，因此能取出来student随后进行后续的逐步解析</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Ognl.getValue(<span class="hljs-string">&quot;student.name&quot;</span>, ognlContext, ypMap);<br>    out.println(<span class="hljs-string">&quot;name=&quot;</span>+value);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Ognl</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ogn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring分析</title>
    <link href="/2013/12/24/Spring/"/>
    <url>/2013/12/24/Spring/</url>
    
    <content type="html"><![CDATA[<h1 id="spring加载"><a href="#spring加载" class="headerlink" title="spring加载"></a>spring加载</h1><p>启动tomcat服务器时，会读取项目中的web.xml文件来启动具体的服务；在servelet3.0后，web.xml文件消失，通过读取包目录中META-INF&#x2F;services文件夹中描述文件加载启动指定的服务；这种机制称为spi机制；</p><ul><li><p>基于web.xml文件</p></li><li><p>基于描述文件加载</p></li></ul><p>描述文件名为服务接口类名称该接口由servelet提供，并需要实现onStartup方法；描述文件内容为具体服务启动对象类名称实现刚才的接口，由spring实现</p><p><img src="D:\Andrew_pro\blog\upload_image\spring\serverlet.png" alt="image-20210419155730218"></p><p>在spring中如下</p><p><img src="D:\Andrew_pro\blog\upload_image\spring\spring-servlet.png" alt="image-20210419160027602"></p><h2 id="启动Spring"><a href="#启动Spring" class="headerlink" title="启动Spring"></a>启动Spring</h2><ol><li>Spring实现Servelet3.0的SPI规范，实现了接口极其方法onStartup()</li><li>Tomcat依据规范调用这个接口的onStartup()方法</li><li>Spring依据HandlesTypes注解描述的接口，将所有实现类注入到onStartup()方法的Set集合参数中<ul><li>下述接口是Spring提供的接口，也是HandlesTypes注解描述中的接口</li></ul></li><li>根据Set集合中的类，创建对象</li><li>执行这些对象的onStartup方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WebApplicationInitializer</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Configure the given &#123;<span class="hljs-doctag">@link</span> ServletContext&#125; with any servlets, filters, listeners</span><br><span class="hljs-comment"> * context-params and attributes necessary for initializing this web application. See</span><br><span class="hljs-comment"> * examples &#123;<span class="hljs-doctag">@linkplain</span> WebApplicationInitializer above&#125;.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> servletContext the &#123;<span class="hljs-doctag">@code</span> ServletContext&#125; to initialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException if any call against the given &#123;<span class="hljs-doctag">@code</span> ServletContext&#125;</span><br><span class="hljs-comment"> * throws a &#123;<span class="hljs-doctag">@code</span> ServletException&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">onStartup</span><span class="hljs-params">(ServletContext servletContext)</span> <span class="hljs-keyword">throws</span> ServletException;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="启动配置类"><a href="#启动配置类" class="headerlink" title="启动配置类"></a>启动配置类</h2><p>由上分析可见spring的启动类为org.springframework.web.SpringServletContainerInitializer，该类负责加载spring所需的组件；</p><p>其中@HandlesTypes注解修饰的接口为具体要加载的配置类接口（WebApplicationInitializer），我们可以实现它完成spring框架的整合以及spring相关组件的配置</p><ul><li>如下所示MyWebApplicationInitializer也是WebApplicationInitializer接口的子类实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 该类配置来源于spring官网</span><br><span class="hljs-comment"> * tomcat 启动时会加载此类，然后执行相关方法</span><br><span class="hljs-comment"> * 完成初始化动作(此类中要完成原web.xml中要</span><br><span class="hljs-comment"> * 执行的一些操作)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWebApplicationInitializer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebApplicationInitializer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStartup</span><span class="hljs-params">(ServletContext servletContext)</span> &#123;<br><br>        <span class="hljs-comment">// 生成IOC容器</span><br>        <span class="hljs-type">AnnotationConfigWebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigWebApplicationContext</span>();<br>        <span class="hljs-comment">// 注册配置类，配置类由我们实现</span><br>        context.register(AppConfig.class);<br><br>        <span class="hljs-comment">// Create and register the DispatcherServlet</span><br>        <span class="hljs-comment">// 创建DispatcherServlet</span><br>        <span class="hljs-type">DispatcherServlet</span> <span class="hljs-variable">servlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispatcherServlet</span>(context);<br>        <span class="hljs-comment">// 向servlet容器对象注册创建DispatchdespacerServlet</span><br>        <span class="hljs-comment">// DispatcherServlet有对应的doGet，doPost方法（存在继承父类中），注册后Tomcat就能把请求分发给DispatcherServlet了</span><br>        ServletRegistration.<span class="hljs-type">Dynamic</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> servletContext.addServlet(<span class="hljs-string">&quot;app&quot;</span>, servlet);<br>        registration.setLoadOnStartup(<span class="hljs-number">1</span>);<br>        registration.addMapping(<span class="hljs-string">&quot;/app/*&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>我们继承AbstractAnnotationConfigDispatcherServletInitializer并实现它的抽象方法以达到自定义配置的实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.db.common.config;<br><span class="hljs-keyword">import</span> javax.servlet.FilterRegistration;<br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><br><span class="hljs-keyword">import</span> org.springframework.web.filter.DelegatingFilterProxy;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * tomcat 启动时会加载此类，然后执行相关方法</span><br><span class="hljs-comment"> * 完成初始化动作(此类中要完成原web.xml中要</span><br><span class="hljs-comment"> * 执行的一些操作)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ta</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppWebInitializer</span> <span class="hljs-keyword">extends</span> <br>    <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br><span class="hljs-comment">//此类对象在执行时首先会执行onStartup方法完成一些初始化操作</span><br><span class="hljs-comment">//并且会注册spring mvc前端控制器</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStartup</span><span class="hljs-params">(ServletContext servletContext)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>System.out.println(<span class="hljs-string">&quot;onStartup()&quot;</span>);<br><span class="hljs-comment">//super.onStartup(servletContext);</span><br>registerContextLoaderListener(servletContext);<br>registerFilter(servletContext);<br>registerDispatcherServlet(servletContext);<br>&#125;<br>    <span class="hljs-comment">//注册shiro中的核心过滤器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerFilter</span><span class="hljs-params">(ServletContext servletContext)</span> &#123;<br><span class="hljs-comment">//注册Filter对象</span><br><span class="hljs-comment">//什么时候需要采用此方式进行注册?</span><br><span class="hljs-comment">//项目没有web.xml并且此filter不是自己写的</span><br>FilterRegistration.Dynamic dy=<br>servletContext.addFilter(<span class="hljs-string">&quot;filterProxy&quot;</span>,<br>DelegatingFilterProxy.class);<br>dy.setInitParameter(<span class="hljs-string">&quot;targetBeanName&quot;</span>,<span class="hljs-string">&quot;shiroFilterFactory&quot;</span>);<br>dy.addMappingForUrlPatterns(<br><span class="hljs-literal">null</span>,<span class="hljs-comment">//EnumSet&lt;DispatcherType&gt;</span><br><span class="hljs-literal">false</span>,<span class="hljs-string">&quot;/*&quot;</span>);<span class="hljs-comment">//url-pattern</span><br>&#125;<br><br><span class="hljs-comment">//官方建议在此方法中加载model(service,respository)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>System.out.println(<span class="hljs-string">&quot;getRootConfigClasses()&quot;</span>);<br><span class="hljs-comment">//return new Class[]&#123;AppDataSourceConfig.class,AppMyBatisConfig.class&#125;;</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;AppRootConfig.class&#125;;<br>&#125;<br><span class="hljs-comment">//官方建议在此方法中加载View,Controller,...</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>System.out.println(<span class="hljs-string">&quot;getServletConfigClasses()&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;AppMvcConfig.class&#125;;<br>&#125;<br><span class="hljs-comment">//官方建议在此方法中定义请求映射</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>System.out.println(<span class="hljs-string">&quot;getServletMappings()&quot;</span>);<br><span class="hljs-comment">//由前端控制器处理所有以.do结尾的请求</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;*.do&quot;</span>&#125;;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="SpringIOC"><a href="#SpringIOC" class="headerlink" title="SpringIOC"></a>SpringIOC</h1><p>ioc容器核心来源于两个map，分别以Map&lt;String beanName,BeanDefinition definition&gt;,Map&lt;String beanName,Object object&gt;的方式存储数据；</p><p>他们都属于BeanFactory接口下的对象</p><h2 id="IOC加载流程"><a href="#IOC加载流程" class="headerlink" title="IOC加载流程"></a>IOC加载流程</h2><h3 id="核心控制类"><a href="#核心控制类" class="headerlink" title="核心控制类"></a>核心控制类</h3><p>AbstractApplicationContext类的refresh()方法控制了IOC容器的加载流程，其中比较关键的几步如下：</p><ol><li>ConfigurableListableBeanFactory beanFactory &#x3D; obtainFreshBeanFactory();，创建BeanFactory，注册BeanDefinition</li><li>prepareBeanFactory(beanFactory);，准备类加载器，用于创建对象</li><li>finishBeanFactoryInitialization(beanFactory);，初始化singleton的Bean对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException &#123;<br>   <span class="hljs-comment">// 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛</span><br>   <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.startupShutdownMonitor) &#123;<br> <br>      <span class="hljs-comment">// 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span><br>      prepareRefresh();<br> <br>      <span class="hljs-comment">// 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span><br>      <span class="hljs-comment">// 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span><br>      <span class="hljs-comment">// 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-&gt; beanDefinition 的 map)</span><br>      <span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> obtainFreshBeanFactory();<br> <br>      <span class="hljs-comment">// 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span><br>      <span class="hljs-comment">// 这块待会会展开说</span><br>      prepareBeanFactory(beanFactory);<br> <br>      <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-comment">// 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span><br>         <span class="hljs-comment">// 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span><br> <br>         <span class="hljs-comment">// 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span><br>         <span class="hljs-comment">// 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span><br>         postProcessBeanFactory(beanFactory);<br>         <span class="hljs-comment">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法</span><br>         invokeBeanFactoryPostProcessors(beanFactory);<br> <br>         <span class="hljs-comment">// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span><br>         <span class="hljs-comment">// 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span><br>         <span class="hljs-comment">// 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化</span><br>         registerBeanPostProcessors(beanFactory);<br> <br>         <span class="hljs-comment">// 初始化当前 ApplicationContext 的 MessageSource，国际化这里就不展开说了，不然没完没了了</span><br>         initMessageSource();<br> <br>         <span class="hljs-comment">// 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span><br>         initApplicationEventMulticaster();<br> <br>         <span class="hljs-comment">// 从方法名就可以知道，典型的模板方法(钩子方法)，</span><br>         <span class="hljs-comment">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span><br>         onRefresh();<br> <br>         <span class="hljs-comment">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span><br>         registerListeners();<br> <br>         <span class="hljs-comment">// 重点，重点，重点</span><br>         <span class="hljs-comment">// 初始化所有的 singleton beans</span><br>         <span class="hljs-comment">//（lazy-init 的除外）</span><br>         finishBeanFactoryInitialization(beanFactory);<br> <br>         <span class="hljs-comment">// 最后，广播事件，ApplicationContext 初始化完成</span><br>         finishRefresh();<br>      &#125;<br> <br>      <span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>         <span class="hljs-keyword">if</span> (logger.isWarnEnabled()) &#123;<br>            logger.warn(<span class="hljs-string">&quot;Exception encountered during context initialization - &quot;</span> +<br>                  <span class="hljs-string">&quot;cancelling refresh attempt: &quot;</span> + ex);<br>         &#125;<br> <br>         <span class="hljs-comment">// Destroy already created singletons to avoid dangling resources.</span><br>         <span class="hljs-comment">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span><br>         destroyBeans();<br> <br>         <span class="hljs-comment">// Reset &#x27;active&#x27; flag.</span><br>         cancelRefresh(ex);<br> <br>         <span class="hljs-comment">// 把异常往外抛</span><br>         <span class="hljs-keyword">throw</span> ex;<br>      &#125;<br> <br>      <span class="hljs-keyword">finally</span> &#123;<br>         <span class="hljs-comment">// Reset common introspection caches in Spring&#x27;s core, since we</span><br>         <span class="hljs-comment">// might not ever need metadata for singleton beans anymore...</span><br>         resetCommonCaches();<br>      &#125;<br>   &#125;<br>&#125;<br><span class="hljs-comment">//代码注释解析来自博客https://blog.csdn.net/nuomizhende45/article/details/81158383/</span><br></code></pre></td></tr></table></figure><h3 id="创建BeanFactory，注册BeanDefinition"><a href="#创建BeanFactory，注册BeanDefinition" class="headerlink" title="创建BeanFactory，注册BeanDefinition"></a>创建BeanFactory，注册BeanDefinition</h3><p>需要注意以下几点</p><ol><li>初始三各类继承关系如下，AbstractApplicationContext→AbstractRefreshableApplicationContext→AbstractXmlApplicationContext</li><li>AbstractRefreshableApplicationContext类会创建Bean工厂“DefaultListableBeanFactory”该工厂内涵几个核心Map，后续流程中会被注入到BeanDefinitionReader对象中用于BeanDefinition的注入</li><li>DefaultBeanDefinitionDocumentReader通过委派BeanDefinitionParserDelegate来实现BeanDefinition的封装，核心流程均由这个被委派这完成</li><li>后续会通过BeanDefinitionReaderUtils的静态方法registerBeanDefinition()注册BeanDefition，实际上Spring框架在多个地方都调用该方法手动注册一些Spring核心类</li></ol><img src="D:\Andrew_pro\blog\upload_image\spring\BeamDefinition.jpg" alt="BeamDefinition"  /><h3 id="准备类加载器"><a href="#准备类加载器" class="headerlink" title="准备类加载器"></a>准备类加载器</h3><p>该方法主要职责在第一行，设置类加载器；</p><p>需要注意，目前该方法始终是在AbstractApplicationContext类中的，而AbstractApplicationContext继承自DefaultResourceLoader，在DefaultResourceLoader的无参构造函数中就通过<u>this.classLoader &#x3D; ClassUtils.getDefaultClassLoader();来创建获取类加载器</u></p><p> ClassUtils是Spring框架的类对象操作工具类，可提取出来学习利用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Configure the factory&#x27;s standard context characteristics,</span><br><span class="hljs-comment"> * such as the context&#x27;s ClassLoader and post-processors.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> beanFactory the BeanFactory to configure</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;<br>   <span class="hljs-comment">// 设置 BeanFactory 的类加载器，我们知道 BeanFactory 需要加载类，也就需要类加载器，</span><br>   <span class="hljs-comment">// 这里设置为当前 ApplicationContext 的类加载器</span><br>   beanFactory.setBeanClassLoader(getClassLoader());<br>   <span class="hljs-comment">// 设置 BeanExpressionResolver</span><br>   beanFactory.setBeanExpressionResolver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardBeanExpressionResolver</span>(beanFactory.getBeanClassLoader()));<br>   <span class="hljs-comment">// </span><br>   beanFactory.addPropertyEditorRegistrar(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceEditorRegistrar</span>(<span class="hljs-built_in">this</span>, getEnvironment()));<br> <br>   <span class="hljs-comment">// 添加一个 BeanPostProcessor，这个 processor 比较简单，</span><br>   <span class="hljs-comment">// 实现了 Aware 接口的几个特殊的 beans 在初始化的时候，这个 processor 负责回调</span><br>   beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationContextAwareProcessor</span>(<span class="hljs-built_in">this</span>));<br> <br>   <span class="hljs-comment">// 下面几行的意思就是，如果某个 bean 依赖于以下几个接口的实现类，在自动装配的时候忽略它们，</span><br>   <span class="hljs-comment">// Spring 会通过其他方式来处理这些依赖。</span><br>   beanFactory.ignoreDependencyInterface(EnvironmentAware.class);<br>   beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);<br>   beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);<br>   beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);<br>   beanFactory.ignoreDependencyInterface(MessageSourceAware.class);<br>   beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);<br> <br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 下面几行就是为特殊的几个 bean 赋值，如果有 bean 依赖了以下几个，会注入这边相应的值，</span><br><span class="hljs-comment">    * 之前我们说过，&quot;当前 ApplicationContext 持有一个 BeanFactory&quot;，这里解释了第一行</span><br><span class="hljs-comment">    * ApplicationContext 继承了 ResourceLoader、ApplicationEventPublisher、MessageSource</span><br><span class="hljs-comment">    * 所以对于这几个，可以赋值为 this，注意 this 是一个 ApplicationContext</span><br><span class="hljs-comment">    * 那这里怎么没看到为 MessageSource 赋值呢？那是因为 MessageSource 被注册成为了一个普通的 bean</span><br><span class="hljs-comment">    */</span><br>   beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);<br>   beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="hljs-built_in">this</span>);<br>   beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="hljs-built_in">this</span>);<br>   beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="hljs-built_in">this</span>);<br> <br>   <span class="hljs-comment">// 这个 BeanPostProcessor 也很简单，在 bean 实例化后，如果是 ApplicationListener 的子类，</span><br>   <span class="hljs-comment">// 那么将其添加到 listener 列表中，可以理解成：注册事件监听器</span><br>   beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationListenerDetector</span>(<span class="hljs-built_in">this</span>));<br> <br>   <span class="hljs-comment">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span><br>   <span class="hljs-comment">// 这里涉及到特殊的 bean，名为：loadTimeWeaver，这不是我们的重点，忽略它</span><br>   <span class="hljs-keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;<br>      beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadTimeWeaverAwareProcessor</span>(beanFactory));<br>      <span class="hljs-comment">// Set a temporary ClassLoader for type matching.</span><br>      beanFactory.setTempClassLoader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextTypeMatchClassLoader</span>(beanFactory.getBeanClassLoader()));<br>   &#125;<br> <br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 从下面几行代码我们可以知道，Spring 往往很 &quot;智能&quot; 就是因为它会帮我们默认注册一些有用的 bean，</span><br><span class="hljs-comment">    * 我们也可以选择覆盖</span><br><span class="hljs-comment">    */</span><br> <br>   <span class="hljs-comment">// 如果没有定义 &quot;environment&quot; 这个 bean，那么 Spring 会 &quot;手动&quot; 注册一个</span><br>   <span class="hljs-keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;<br>      beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());<br>   &#125;<br>   <span class="hljs-comment">// 如果没有定义 &quot;systemProperties&quot; 这个 bean，那么 Spring 会 &quot;手动&quot; 注册一个</span><br>   <span class="hljs-keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;<br>      beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());<br>   &#125;<br>   <span class="hljs-comment">// 如果没有定义 &quot;systemEnvironment&quot; 这个 bean，那么 Spring 会 &quot;手动&quot; 注册一个</span><br>   <span class="hljs-keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;<br>      beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());<br>   &#125;<br>&#125;<br><span class="hljs-comment">//代码注释解析来自博客https://blog.csdn.net/nuomizhende45/article/details/81158383/</span><br></code></pre></td></tr></table></figure><h3 id="后置处理器"><a href="#后置处理器" class="headerlink" title="后置处理器"></a>后置处理器</h3><p>后置处理器有两种，BeanFactoryPostProcessor和BeanPostProcessor</p><ul><li>BeanFactoryPostProcessor：<strong>用于拓展Spring框架</strong>，内部可得到Bean容器，操作BeanDefinition</li><li>BeanPostProcessor：用于增加Bean生命周期操作</li></ul><p>此时还没有创建Bean对象，这里只讲BeanFactoryPostProcessor，Spring主要的后置处理较多，这里距离三个常用到的</p><ul><li>PropertySourcesPlaceholderConfigurer：处理配置类占位符${..}</li><li>ConfigurationClassParser：<strong>识别注解标签，创建对应的BeanDefiniton</strong></li></ul><h3 id="初始化Bean对象"><a href="#初始化Bean对象" class="headerlink" title="初始化Bean对象"></a>初始化Bean对象</h3><p>Bean对象的初始化利用到了反射技术，核心操作类如图可见为AbstractAutowireCapableBeanFactory.java，它负责了bean对象的创建，属性注入，init方法和后置处理器的调度使用</p><p>可将getBean()方法看作bean的初始化开启方法，我们经常通过applictionContext.getBean()方法获取bean，两者是同一个方法</p><p><img src="D:\Andrew_pro\blog\upload_image\spring\BeanInit.png" alt="Bean初始化"></p><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>SpringMVC核心是DispatcherServlet对象，核心方法是doDispatch()</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">DispatcherServlet</span><br></code></pre></td></tr></table></figure><p><strong>由于DispatcherServlet是个Servlet对象，虽然没有doGet，doPost方法(实际已被父类实现)，但请求最终会进入该类的doService()-&gt;doDispatch()</strong></p><p>Controller对象中的方法和映射如何匹配?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span>&#123;<span class="hljs-comment">//类加载(将类读到内存)--&gt;Class</span><br>  <span class="hljs-meta">@RequestMapping(&quot;doIndexUI&quot;)</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doIndexUI</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;starter&quot;</span>;<span class="hljs-comment">//WEB-INF/pages/starter.html</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringMvc找Controller流程</p><ol><li>扫描项目所有包，注册所有注解和配置描述的bean，由ioc容器预先完成</li><li>@拿到所有Controller类</li><li>遍历类中的所有方法对象Method.class</li><li>判断方法是否添加了@RequestMapping注解</li><li>将RequestMapping注解中的描述如：”doIndexUI”作为key，步骤4的方法对象作为value存入map集合中</li><li>容器启动完成</li><li>根据用户发送的请求，拦截获取URI   注：URL&#x3D;<a href="http://localhost/test.do">http://localhost:80/test.do</a>   URI&#x3D;&#x2F;test.do</li><li>根据URI（&#x2F;test.do）查找Map集合获取Method方法对象</li><li>通过反射调用Method方法</li></ol><h1 id="DispatcherSerblet主流程"><a href="#DispatcherSerblet主流程" class="headerlink" title="DispatcherSerblet主流程"></a>DispatcherSerblet主流程</h1><p>注意，此时容器已启动完成，用户请求发送通过servlet传递进入doDispatch()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br><span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 处理确认所有的带有二进制文件的请求，遵循http协议，判断请求中的描述符确认</span><br>processedRequest = checkMultipart(request);<br>multipartRequestParsed = (processedRequest != request);<br><br><span class="hljs-comment">// Determine handler for the current request.</span><br>                <span class="hljs-comment">// 根据请求获取mapperHandler，即Controller对象或映射指定的Method对象</span><br>mappedHandler = getHandler(processedRequest);<br><span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>noHandlerFound(processedRequest, response);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// Determine handler adapter for the current request.</span><br>                 <span class="hljs-comment">// 获取Handler适配器，原理同getHandler，根据情况获取不同种类的Handler适配器</span><br><span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><br><span class="hljs-comment">// Process last-modified header, if supported by the handler.</span><br><span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isGet</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GET&quot;</span>.equals(method);<br><span class="hljs-keyword">if</span> (isGet || <span class="hljs-string">&quot;HEAD&quot;</span>.equals(method)) &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// Actually invoke the handler.</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>applyDefaultViewName(processedRequest, mv);<br>mappedHandler.applyPostHandle(processedRequest, response, mv);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>dispatchException = ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br><span class="hljs-comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span><br><span class="hljs-comment">// making them available for @ExceptionHandler methods and other scenarios.</span><br>dispatchException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler dispatch failed&quot;</span>, err);<br>&#125;<br>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>triggerAfterCompletion(processedRequest, response, mappedHandler,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler processing failed&quot;</span>, err));<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-comment">// Instead of postHandle and afterCompletion</span><br><span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Clean up any resources used by a multipart request.</span><br><span class="hljs-keyword">if</span> (multipartRequestParsed) &#123;<br>cleanupMultipart(processedRequest);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取MethodHandler"><a href="#获取MethodHandler" class="headerlink" title="获取MethodHandler"></a>获取MethodHandler</h2><ul><li>通过getHandler(processedRequest);开启</li></ul><p>MethodHandler可能是Controller控制器的封装类，也可能是对应Method对象的封装类</p><p>DispacherServlet对象有一个HandelrMapping对象集合，HandlerMapping对象里的Map集合用来存储之前描述的Method对象；之所以有不同的HandlerMapping是由于Spring有多种Controller的实现，需要不同的Handler处理</p><p><img src="D:\Andrew_pro\blog\upload_image\spring\springMVCgetHandler.png" alt="image-20210501184910811"></p><ul><li>最终HandlerMapping们会通过自身集合中的Map集合获取到对应的Method或对象</li><li>上述代码最终返回HandlerMethod，它实际上是uri和对应Method对象的包装类，也可以理解为Controller</li></ul><p><img src="D:\Andrew_pro\blog\upload_image\spring\getHandler.png" alt="获取Handler"></p><p>由图可见，不同的HandlerMapping有不同的Map集合，分情况进入</p><h3 id="Controller案例1"><a href="#Controller案例1" class="headerlink" title="Controller案例1"></a>Controller案例1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类型1Controller，通过注解<span class="hljs-doctag">@Controller</span>实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/ControllerType1/&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ControllerType1</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;getPathValue&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testController</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Controller2执行&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;hello,&quot;</span>+name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello,&quot;</span>+name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Controller案例2"><a href="#Controller案例2" class="headerlink" title="Controller案例2"></a>Controller案例2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于实现Controller接口实现Controller</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component(&quot;/ControllerType2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ControllerType2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Controller</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 通过paramMap读取请求参数手动操作数据</span><br>        <span class="hljs-comment">// Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br>        System.out.println(<span class="hljs-string">&quot;Controller2执行&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;Controller2,say hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="请求分发"><a href="#请求分发" class="headerlink" title="请求分发"></a>请求分发</h2><p>handlerAdapter.handle()</p><p>根据情况调用适当的适配器后，通过适配器调用实际要进入的方法，这里分上述两个Controller案例分析</p><h3 id="案例一，基于实现Controller接口"><a href="#案例一，基于实现Controller接口" class="headerlink" title="案例一，基于实现Controller接口"></a>案例一，基于实现Controller接口</h3><p>原理很简单，直接调用Controller对象的的对应方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleControllerHandlerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerAdapter</span> &#123;<br>    <span class="hljs-comment">//参数4的handler就是先前被封装的Controller对象</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-keyword">return</span> ((Controller) handler).handleRequest(request, response);<br>&#125;<br>&#125;    <br></code></pre></td></tr></table></figure><h3 id="案例二，基于注解RequestMapping"><a href="#案例二，基于注解RequestMapping" class="headerlink" title="案例二，基于注解RequestMapping"></a>案例二，基于注解RequestMapping</h3><p>部分源码跳过</p><h4 id="获取参数处理器"><a href="#获取参数处理器" class="headerlink" title="获取参数处理器"></a>获取参数处理器</h4><p>参数处理器中的参数指的时Controller中映射方法的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> HandlerMethodArgumentResolver <span class="hljs-title function_">getArgumentResolver</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br>    <span class="hljs-comment">//先从缓存中获取</span><br><span class="hljs-type">HandlerMethodArgumentResolver</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.argumentResolverCache.get(parameter);<br><span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="hljs-built_in">this</span>.argumentResolvers) &#123;<br>                <span class="hljs-comment">//基于不同参数处理器的supportsParameter方法判定</span><br><span class="hljs-keyword">if</span> (resolver.supportsParameter(parameter)) &#123;<br>result = resolver;<br><span class="hljs-built_in">this</span>.argumentResolverCache.put(parameter, result);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例几个参数处理器案例</p><ul><li>当请求方法中有@RequestBody注解时，直接通过参数中的注解判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">return</span> parameter.hasParameterAnnotation(RequestBody.class);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>当请求方法参数中有@RequestParam时，通过是否含注解判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-type">RequestParam</span> <span class="hljs-variable">requestParam</span> <span class="hljs-operator">=</span> parameter.getParameterAnnotation(RequestParam.class);<br><span class="hljs-keyword">return</span> (requestParam != <span class="hljs-literal">null</span> &amp;&amp; Map.class.isAssignableFrom(parameter.getParameterType()) &amp;&amp;<br>!StringUtils.hasText(requestParam.name()));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>当请求方法参数中有@PathVariable也同理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-type">PathVariable</span> <span class="hljs-variable">ann</span> <span class="hljs-operator">=</span> parameter.getParameterAnnotation(PathVariable.class);<br><span class="hljs-keyword">return</span> (ann != <span class="hljs-literal">null</span> &amp;&amp; Map.class.isAssignableFrom(parameter.getParameterType()) &amp;&amp;<br>!StringUtils.hasText(ann.value()));<br>&#125;<br></code></pre></td></tr></table></figure><p>不同参数处理器有不同的操作，依据需要装配的类型而定，后续不一一例举了，可自行查看HandlerMethodArgumentResolver接口下的子类</p><h1 id="SpringAOP"><a href="#SpringAOP" class="headerlink" title="SpringAOP"></a>SpringAOP</h1><h2 id="代理对象创建"><a href="#代理对象创建" class="headerlink" title="代理对象创建"></a>代理对象创建</h2><p>代理对象创建在Bean生命周期init方法之后执行，由Spring内置的后置处理器BeanPostProcess实现</p><ul><li>该方法在AbstractAutowireCapableBeanFactory类中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">applyBeanPostProcessorsAfterInitialization</span><span class="hljs-params">(Object existingBean, String beanName)</span><br><span class="hljs-keyword">throws</span> BeansException &#123;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> existingBean;<br>        <span class="hljs-comment">//循环执行所有后置处理器</span><br><span class="hljs-keyword">for</span> (BeanPostProcessor processor : getBeanPostProcessors()) &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> processor.postProcessAfterInitialization(result, beanName);<br><span class="hljs-keyword">if</span> (current == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>result = current;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代理对象创建主要逻辑</li><li>具体实现通知类为<strong>AbstractAutoProxyCreator</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">wrapIfNecessary</span><span class="hljs-params">(Object bean, String beanName, Object cacheKey)</span> &#123;<br><span class="hljs-keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="hljs-built_in">this</span>.targetSourcedBeans.contains(beanName)) &#123;<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><span class="hljs-keyword">if</span> (Boolean.FALSE.equals(<span class="hljs-built_in">this</span>.advisedBeans.get(cacheKey))) &#123;<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><span class="hljs-keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;<br><span class="hljs-built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><br><span class="hljs-comment">// 创建并获取所有的通知，通知会被加入通知缓存</span><br>Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;<br><span class="hljs-built_in">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);<br>            <span class="hljs-comment">//创建代理对象</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> createProxy(<br>bean.getClass(), beanName, specificInterceptors, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonTargetSource</span>(bean));<br><span class="hljs-built_in">this</span>.proxyTypes.put(cacheKey, proxy.getClass());<br><span class="hljs-keyword">return</span> proxy;<br>&#125;<br><span class="hljs-comment">// 代理对象加入缓存</span><br><span class="hljs-built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>匹配可用通知</li><li>创建代理对象工厂</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">createProxy</span><span class="hljs-params">(Class&lt;?&gt; beanClass, <span class="hljs-meta">@Nullable</span> String beanName,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Object[] specificInterceptors, TargetSource targetSource)</span> &#123;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.beanFactory <span class="hljs-keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;<br>AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="hljs-built_in">this</span>.beanFactory, beanName, beanClass);<br>&#125;<br><span class="hljs-comment">//场景代理对象工厂为工厂注入属性</span><br><span class="hljs-type">ProxyFactory</span> <span class="hljs-variable">proxyFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>();<br>proxyFactory.copyFrom(<span class="hljs-built_in">this</span>);<br><span class="hljs-keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;<br><span class="hljs-comment">//此处逻辑判断依据需要被代理类是否有接口</span><br><span class="hljs-keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;<br>proxyFactory.setProxyTargetClass(<span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//有接口则进入以下逻辑为工厂添加接口</span><br>evaluateProxyInterfaces(beanClass, proxyFactory);<br>&#125;<br>&#125;<br><span class="hljs-comment">//筛选通知，找到对应的通知</span><br>Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);<br>    <span class="hljs-comment">//设置通知</span><br>proxyFactory.addAdvisors(advisors);<br>     <span class="hljs-comment">//设置目标类，后续代理对象需要调用原方法时，通过该对象调用</span><br>proxyFactory.setTargetSource(targetSource);<br>    <span class="hljs-comment">//钩子方法，无具体实现</span><br>customizeProxyFactory(proxyFactory);<br><br>proxyFactory.setFrozen(<span class="hljs-built_in">this</span>.freezeProxy);<br><span class="hljs-keyword">if</span> (advisorsPreFiltered()) &#123;<br>proxyFactory.setPreFiltered(<span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-comment">//通过工厂创建代理对象</span><br><span class="hljs-keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>接下来进入代理工厂</li></ul><h3 id="ProxyFactory"><a href="#ProxyFactory" class="headerlink" title="ProxyFactory"></a>ProxyFactory</h3><p>代理后置处理器会createAopProxy().getProxy(classLoader)；方法依据条件调用后对应的代理创建方法；</p><p>工厂依据事先设置的属性判断创建何种代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> AopProxy <span class="hljs-title function_">createAopProxy</span><span class="hljs-params">(AdvisedSupport config)</span> <span class="hljs-keyword">throws</span> AopConfigException &#123;<br><span class="hljs-keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;<br>Class&lt;?&gt; targetClass = config.getTargetClass();<br><span class="hljs-keyword">if</span> (targetClass == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AopConfigException</span>(<span class="hljs-string">&quot;TargetSource cannot determine target class: &quot;</span> +<br><span class="hljs-string">&quot;Either an interface or a target is required for proxy creation.&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;<br>            <span class="hljs-comment">//jdk动态代理</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdkDynamicAopProxy</span>(config);<br>&#125;<br>            <span class="hljs-comment">//CGLIB代理</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjenesisCglibAopProxy</span>(config);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//jdk动态代理</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdkDynamicAopProxy</span>(config);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="通知的执行"><a href="#通知的执行" class="headerlink" title="通知的执行"></a>通知的执行</h2><p>无论切面是基于JDK还是CGLIB实现，均会调用特定方法获取到<strong>通知集合(adviceChain)</strong>，通过这个集合SpringAOP基于责任链的模式实现了通知方法的切入</p><ul><li>通知集合总是以特定顺序排序</li></ul><p><img src="D:\Andrew_pro\blog\upload_image\spring\createMethodHandler.png" alt="createMethodHandler"></p><ul><li>通知通过传递MethodInvocation对象实现责任链模式</li><li>methodInvocation.proceed()能进入MethodInvocation对象中遍历数组找到下一个通知并进入对应invoke()方法，它们以类似递归的方式执行</li><li>invokeAdviceMethod()方法为调用通知，底层基于反射调用对应通知</li></ul><p><img src="D:\Andrew_pro\blog\upload_image\spring\adviceChain.png" alt="adviceChain"></p><h2 id="通知具体分析"><a href="#通知具体分析" class="headerlink" title="通知具体分析"></a>通知具体分析</h2><p>五种不同的通知实现的方式和承担的职责不同，以下对核心代码分析</p><h3 id="arround环绕同通知"><a href="#arround环绕同通知" class="headerlink" title="arround环绕同通知"></a>arround环绕同通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(MethodInvocation mi)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><span class="hljs-keyword">if</span> (!(mi <span class="hljs-keyword">instanceof</span> ProxyMethodInvocation)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;MethodInvocation is not a Spring ProxyMethodInvocation: &quot;</span> + mi);<br>&#125;<br><span class="hljs-type">ProxyMethodInvocation</span> <span class="hljs-variable">pmi</span> <span class="hljs-operator">=</span> (ProxyMethodInvocation) mi;<br>        <span class="hljs-comment">//为环绕通知创建ProceedingJoinPoint对象，将作为参数注入具体的通知方法以供用户使用</span><br>        <span class="hljs-comment">//通过这个JoinPoint能重新进入MethodHandler的proceed()方法继续通知责任链</span><br><span class="hljs-type">ProceedingJoinPoint</span> <span class="hljs-variable">pjp</span> <span class="hljs-operator">=</span> lazyGetProceedingJoinPoint(pmi);<br><span class="hljs-type">JoinPointMatch</span> <span class="hljs-variable">jpm</span> <span class="hljs-operator">=</span> getJoinPointMatch(pmi);<br>        <span class="hljs-comment">//调用通知方法</span><br><span class="hljs-keyword">return</span> invokeAdviceMethod(pjp, jpm, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="before前置通知"><a href="#before前置通知" class="headerlink" title="before前置通知"></a>before前置通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(MethodInvocation mi)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//没什么好讲的，先执行通知方法</span><br><span class="hljs-built_in">this</span>.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis() );<br>        <span class="hljs-comment">//再重新进入MethodHandler继续责任链</span><br><span class="hljs-keyword">return</span> mi.proceed();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="after后置通知"><a href="#after后置通知" class="headerlink" title="after后置通知"></a>after后置通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(MethodInvocation mi)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//先进入责任链</span><br><span class="hljs-keyword">return</span> mi.proceed();<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//后执行通知</span><br>            <span class="hljs-comment">//可见后置通知执行代码是再finally块的，因此无论是否异常都会执行</span><br>invokeAdviceMethod(getJoinPointMatch(), <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="afterReturning返回通知"><a href="#afterReturning返回通知" class="headerlink" title="afterReturning返回通知"></a>afterReturning返回通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(MethodInvocation mi)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">retVal</span> <span class="hljs-operator">=</span> mi.proceed();<br>            <span class="hljs-comment">//先进入责任链</span><br><span class="hljs-built_in">this</span>.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis());<br>            <span class="hljs-comment">//后执行通知</span><br><span class="hljs-keyword">return</span> retVal;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="afterThrowing异常通知"><a href="#afterThrowing异常通知" class="headerlink" title="afterThrowing异常通知"></a>afterThrowing异常通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(MethodInvocation mi)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//先进入责任链</span><br><span class="hljs-keyword">return</span> mi.proceed();<br>&#125;<br>    <span class="hljs-comment">//可见由于通知在异常代码块中，只有代码出现异常才会执行该通知</span><br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br><span class="hljs-keyword">if</span> (shouldInvokeOnThrowing(ex)) &#123;<br>            <span class="hljs-comment">//出现异常后执行通知</span><br>invokeAdviceMethod(getJoinPointMatch(), <span class="hljs-literal">null</span>, ex);<br>&#125;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js杂项</title>
    <link href="/2013/12/24/js%E6%9D%82%E9%A1%B9/"/>
    <url>/2013/12/24/js%E6%9D%82%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="js表单验证"><a href="#js表单验证" class="headerlink" title="js表单验证"></a>js表单验证</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*是否带有小数*/</span><br><span class="hljs-keyword">function</span>    <span class="hljs-title function_">isDecimal</span>(<span class="hljs-params">strValue </span>)  &#123;  <br>   <span class="hljs-keyword">var</span>  objRegExp= <span class="hljs-regexp">/^\d+\.\d+$/</span>;<br>   <span class="hljs-keyword">return</span>  objRegExp.<span class="hljs-title function_">test</span>(strValue);  <br>&#125;  <br><br><span class="hljs-comment">/*校验是否中文名称组成 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ischina</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">var</span> reg=<span class="hljs-regexp">/^[\u4E00-\u9FA5]&#123;2,4&#125;$/</span>;   <span class="hljs-comment">/*定义验证表达式*/</span><br>    <span class="hljs-keyword">return</span> reg.<span class="hljs-title function_">test</span>(str);     <span class="hljs-comment">/*进行验证*/</span><br>&#125;<br><br><span class="hljs-comment">/*校验是否全由8位数字组成 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isStudentNo</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">var</span> reg=<span class="hljs-regexp">/^[0-9]&#123;8&#125;$/</span>;   <span class="hljs-comment">/*定义验证表达式*/</span><br>    <span class="hljs-keyword">return</span> reg.<span class="hljs-title function_">test</span>(str);     <span class="hljs-comment">/*进行验证*/</span><br>&#125;<br><br><span class="hljs-comment">/*校验电话码格式 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isTelCode</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">var</span> reg= <span class="hljs-regexp">/^((0\d&#123;2,3&#125;-\d&#123;7,8&#125;)|(1[3584]\d&#123;9&#125;))$/</span>;<br>    <span class="hljs-keyword">return</span> reg.<span class="hljs-title function_">test</span>(str);<br>&#125;<br><br><span class="hljs-comment">/*校验邮件地址是否合法 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">IsEmail</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">var</span> reg=<span class="hljs-regexp">/^\w+@[a-zA-Z0-9]&#123;2,10&#125;(?:\.[a-z]&#123;2,4&#125;)&#123;1,3&#125;$/</span>;<br>    <span class="hljs-keyword">return</span> reg.<span class="hljs-title function_">test</span>(str);<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>more</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [reg 百度网盘链接匹配]</span><br><span class="hljs-comment"> * 说明：匹配支持百度分享的两种链接格式</span><br><span class="hljs-comment"> * 格式一：链接: https://pan.baidu.com/s/15gzY8h3SEzVCfGV1xfkJsQ 提取码: vsuw 复制这段内容后打开百度网盘手机App，操作更方便哦</span><br><span class="hljs-comment"> * 格式二：http://pan.baidu.com/share/link?shareid=179436&amp;uk=3272055266 提取码: vsuw 复制这段内容后打开百度网盘手机App，操作更方便哦</span><br><span class="hljs-comment"> * 匹配出下载地址和提取码，并且还支持如果没有提取码，也能匹配出下载链接。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">正则表达式</span>&#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> array 返回匹配成功的链接和地址</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">baiduDownLinkArr</span>(<span class="hljs-params"> string </span>)&#123;<br>  <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/([http|https]*?:\/\/pan\.baidu\.com\/[(?:s\/)&#123;0,1&#125;|(share)]*(?:[0-9a-zA-Z?=&amp;])+)(?:.+:(?:\s)*)?([a-zA-Z]&#123;4&#125;)?/</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(string));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="各种事件"><a href="#各种事件" class="headerlink" title="各种事件"></a>各种事件</h1><p>onchange HTML 元素改变<br>onclick 用户点击 HTML 元素<br>onmouseover 用户在一个HTML元素上移动鼠标<br>onmouseout用户从一个HTML元素上移开鼠标<br>onkeydown 用户按下键盘按键<br>onload 浏览器已完成页面的加载 </p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js_learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven私库搭建</title>
    <link href="/2013/12/24/Maven%E7%A7%81%E5%BA%93/"/>
    <url>/2013/12/24/Maven%E7%A7%81%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>当我们参与多人开发时，为提高效率，一般会创建一个私库，以方便依赖包的获取。当项目组中的某员工在pom.xml文件中添加了某依赖的配置时，往往会访问默认或已配置的远程中央仓库获取相关依赖。然而有时候公共仓库不是那么稳定且下载速度很慢，这时创建一个私有仓库就极大缩减了依赖包的拉取时间。</p><ol><li>当A员工需要某依赖时，会先访问私库</li><li>私库没有依赖是则会访问配置的公共仓库</li><li>公共仓库也没有时则会打印报错到控制台</li></ol><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenProcess.png"></p><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><ul><li>搭建nuxus maven 私库前还需确保搭建好jdk和maven环境</li></ul><h1 id="解压安装jdk"><a href="#解压安装jdk" class="headerlink" title="解压安装jdk"></a>解压安装jdk</h1><ol><li>找到要安装到的目录执行<code>tar -zxvf jdk-8u91-linux-x64.tar.gz</code>命令解压</li><li>配置环境变量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">vim /etc/profile<br><br>添加如下内容：JAVA_HOME根据实际目录来<br>JAVA_HOME=/usr/java/jdk1<span class="hljs-number">.8</span><span class="hljs-number">.0_65</span><br>CLASSPATH=$JAVA_HOME/lib/<br>PATH=$PATH:$JAVA_HOME/bin<br>export PATH JAVA_HOME CLASSPATH<br></code></pre></td></tr></table></figure><h1 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h1><ol><li><p>下载：到Maven官网下载安装文件，目前最新版本为3.3.9，下载文件为apache-maven-3.3.9-bin.tar.gz，下载可以使用wget命令； </p></li><li><p>进入下载文件夹，找到下载的文件，运行如下命令解压</p><p><code>tar -xvf  apache-maven-3.3.9-bin.tar.gz</code></p></li><li><p>配置环境变量l</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">MAVEN_HOME=/usr/local/src/maven/apache-maven-<span class="hljs-number">3.6</span><span class="hljs-number">.1</span><br>PATH=$PATH:$MAVEN_HOME/bin<br>export MAVEN_HOME PATH<br><br>运行以下命令使环境变量生效<br>source /etc/profile<br></code></pre></td></tr></table></figure><h1 id="安装Nexus-Maven私库"><a href="#安装Nexus-Maven私库" class="headerlink" title="安装Nexus Maven私库"></a>安装Nexus Maven私库</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>nexus maven官<a href="http://www.sonatype.org/nexus/go">网地址</a>下载</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenInstall.png"></p><p>选择你想安装的操作系统版本即可安装</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenDownload.png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>创建指定目录，传输文件</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenNeoxsInstall.png"></p><p>执行<code>tar -zxvf 下载的tar包</code>即可安装成功</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动前可能还需要设置环境变量<code>export RUN_AS_USER=root</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置开机启动</span><br>sudo ln -s /usr/local/nexus/nexus-<span class="hljs-number">2.14</span><span class="hljs-number">.13</span>-<span class="hljs-number">01</span>/bin/nexus /etc/init.d/nexus<br>./nexus status/start/stop<br><span class="hljs-comment">//查看nexus服务状态、启动服务、停止服务等</span><br>chkconfig nexus on/off<br><span class="hljs-comment">//设置nexus服务开机自启动或者开机不启动</span><br></code></pre></td></tr></table></figure><h1 id="使用私库"><a href="#使用私库" class="headerlink" title="使用私库"></a>使用私库</h1><p>一般通过8081端口访问Maven私库</p><p>用户名密码为，admin和admin123</p><p>项目启动之初，就已经有了几个仓库和组，可以直接拿来使用</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/IntoMaven.png"></p><p>tips:</p><pre><code class="hljs">1. nexus-2.14.13-01-bundle\nexus-2.14.2\conf\打开nexus.properties文件可以配置默认端口以解决端口占用的问题2. proxy是我们实际上用到的仓库，Maven中央仓库，阿里云仓库就是这个类型</code></pre><ul><li>一些类型介绍<ol><li>hosted 类型的仓库，内部项目的发布仓库</li><li>releases 内部的模块中release模块的发布仓库</li><li>snapshots 发布内部的SNAPSHOT模块的仓库</li><li>3rd party 第三方依赖的仓库，这个数据通常是由内部人员自行下载之后发布上去</li><li>proxy 类型的仓库，从远程中央仓库中寻找数据的仓库</li><li>group 类型的仓库，组仓库用来方便我们开发人员进行设置的仓库</li></ol></li></ul><h2 id="远程索引"><a href="#远程索引" class="headerlink" title="远程索引"></a>远程索引</h2><p>当前默认创建好的仓库均没有开启远程索引链接，我们还需要开启相关开关，这样才能在通过拉取依赖的同时，将依赖包缓存到这个项目上</p><p>具体操作时找到指定仓库，在configuration下降Download Remote Indexes的值设置为true，然后点击save；</p><p><img src="http://ypimage.oss-cn-shenzhen.aliyuncs.com/upload_image/Maven/MavenUseNexus.png"></p><p>选择指定仓库点击右键，选择Repari Index就可以去下载依赖了，此外，你还可以设置Remote Storage Location来控制具体要关联哪些仓库，因为直接从默认的中央仓库下载会很慢。推荐用阿里云地址<a href="http://maven.aliyun.com/nexus/content/groups/public/">http://maven.aliyun.com/nexus/content/groups/public/</a></p><h1 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h1><h2 id="获取依赖包"><a href="#获取依赖包" class="headerlink" title="获取依赖包"></a>获取依赖包</h2><p>当我们想从私库中获取依赖包时，直接配置pom.xml文件即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--依赖包配置--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Public Repositories<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.163.101:8081/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span> <br><span class="hljs-comment">&lt;!-- 依赖插件配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Public Repositories<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.163.101:8081/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>添加以上配置后，你的项目jar包会从url指定的私服服务器下载依赖，如果私服没有则会从私服对应的远程仓库中获取依赖。</p><p>然而，上述配置是在pom.xml文件中配置的，其他项目或其他人员需要从私服上下载jar包时，则还需要再次配置pom.xml，这显然会很麻烦，因此需要修改全局配置setting.xml。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--设置本地仓库--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>$&#123;user.home&#125;/.m2/repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- localRepository</span><br><span class="hljs-comment">   | The path to the local repository maven will use to store artifacts.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="hljs-comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="hljs-comment">  --&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- interactiveMode</span><br><span class="hljs-comment">   | This will determine whether maven prompts you when it needs input. If set to false,</span><br><span class="hljs-comment">   | maven will use a sensible default value, perhaps based on some other setting, for</span><br><span class="hljs-comment">   | the parameter in question.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">   | Default: true</span><br><span class="hljs-comment">  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</span><br><span class="hljs-comment">  --&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- offline</span><br><span class="hljs-comment">   | Determines whether maven should attempt to connect to the network when executing a build.</span><br><span class="hljs-comment">   | This will have an effect on artifact downloads, artifact deployment, and others.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">   | Default: false</span><br><span class="hljs-comment">  &lt;offline&gt;false&lt;/offline&gt;</span><br><span class="hljs-comment">  --&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- pluginGroups</span><br><span class="hljs-comment">   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.</span><br><span class="hljs-comment">   | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers</span><br><span class="hljs-comment">   | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list.</span><br><span class="hljs-comment">   |--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">pluginGroups</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- pluginGroup</span><br><span class="hljs-comment">     | Specifies a further group identifier to use for plugin lookup.</span><br><span class="hljs-comment">    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;</span><br><span class="hljs-comment">    --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginGroups</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- proxies</span><br><span class="hljs-comment">   | This is a list of proxies which can be used on this machine to connect to the network.</span><br><span class="hljs-comment">   | Unless otherwise specified (by system property or command-line switch), the first proxy</span><br><span class="hljs-comment">   | specification in this list marked as active will be used.</span><br><span class="hljs-comment">   |--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">proxies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- proxy</span><br><span class="hljs-comment">     | Specification for one proxy, to be used in connecting to the network.</span><br><span class="hljs-comment">     |</span><br><span class="hljs-comment">    &lt;proxy&gt;</span><br><span class="hljs-comment">      &lt;id&gt;optional&lt;/id&gt;</span><br><span class="hljs-comment">      &lt;active&gt;true&lt;/active&gt;</span><br><span class="hljs-comment">      &lt;protocol&gt;http&lt;/protocol&gt;</span><br><span class="hljs-comment">      &lt;username&gt;proxyuser&lt;/username&gt;</span><br><span class="hljs-comment">      &lt;password&gt;proxypass&lt;/password&gt;</span><br><span class="hljs-comment">      &lt;host&gt;proxy.host.net&lt;/host&gt;</span><br><span class="hljs-comment">      &lt;port&gt;80&lt;/port&gt;</span><br><span class="hljs-comment">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span><br><span class="hljs-comment">    &lt;/proxy&gt;</span><br><span class="hljs-comment">    --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">proxies</span>&gt;</span><br><br><br>  <span class="hljs-comment">&lt;!--设置私库认证信息--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-snapshot<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servers</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--设置私库mirror 表示maven所有的请求都由nexus来处理--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- &lt;mirror&gt;  </span><br><span class="hljs-comment">            &lt;id&gt;ibiblio.org&lt;/id&gt;  </span><br><span class="hljs-comment">            &lt;name&gt;ibiblio Mirror of http://repo1.maven.org/maven2/&lt;/name&gt;  </span><br><span class="hljs-comment">            &lt;url&gt;http://mirrors.ibiblio.org/pub/mirrors/maven2&lt;/url&gt;  </span><br><span class="hljs-comment">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  </span><br><span class="hljs-comment">        &lt;/mirror&gt; --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span> <br>        <span class="hljs-comment">&lt;!-- &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus Mirror.<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.199.201:8081/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--设置maven私库信息--&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span> <br>          <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.199.201:8081/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span> <br>          <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span> <br>          <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.199.201:8081/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span> <br>          <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span> <br><br>    <span class="hljs-comment">&lt;!--覆盖maven中央仓库设置开启releases和snapshots版本的下载--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span> <br>           <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span> <br>              <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <br>              <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://central<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> <br>              <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span> <br>              <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span> <br>          <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span> <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span> <br>          <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepository</span>&gt;</span> <br>              <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <br>              <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://central<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> <br>              <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span> <br>              <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span> <br>          <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepository</span>&gt;</span> <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--激活私库信息的配置--&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">activeProfiles</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">activeProfile</span>&gt;</span>nexus<span class="hljs-tag">&lt;/<span class="hljs-name">activeProfile</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">activeProfile</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">activeProfile</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">activeProfiles</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>之后所有本机的Maven项目就在私服下载组件，这是推荐的做法。(主要是通过mirror镜像来控制访问私服服务器，可先学习Maven镜像以便了解)</p>]]></content>
    
    
    <categories>
      
      <category>Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
